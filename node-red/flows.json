[
    {
        "id": "bf163cd5.f84c",
        "type": "tab",
        "label": "Office Light Button",
        "disabled": false,
        "info": ""
    },
    {
        "id": "4c3e78a1.ebb138",
        "type": "tab",
        "label": "Master Bedroom Light Button",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7b5378f9.154968",
        "type": "tab",
        "label": "Kitchen Light Button",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1d296556.09592b",
        "type": "tab",
        "label": "Foyer Motion",
        "disabled": false,
        "info": ""
    },
    {
        "id": "62ce34cf.a7671c",
        "type": "tab",
        "label": "Upstairs Hallway Sensors",
        "disabled": false,
        "info": ""
    },
    {
        "id": "35ab222c.a6eb9e",
        "type": "tab",
        "label": "Downstairs Hallway Motion",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e9868773.797078",
        "type": "tab",
        "label": "Front Door Entry/Exit",
        "disabled": false,
        "info": ""
    },
    {
        "id": "884319a9.e92148",
        "type": "tab",
        "label": "Kitchen Door Entry/Exit",
        "disabled": false,
        "info": ""
    },
    {
        "id": "390fc521.dffd0a",
        "type": "tab",
        "label": "Living Room Media",
        "disabled": false,
        "info": ""
    },
    {
        "id": "3aefc8fa.f61958",
        "type": "tab",
        "label": "Relinquish to Motion",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c35af4f2.4cd108",
        "type": "tab",
        "label": "Phone Location",
        "disabled": false,
        "info": ""
    },
    {
        "id": "66eaa4d8.773f4c",
        "type": "tab",
        "label": "Skip Next on Yamaha",
        "disabled": false,
        "info": ""
    },
    {
        "id": "bec3a76b.4b57e8",
        "type": "tab",
        "label": "Alarm Triggered",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e393795c.3d6e88",
        "type": "tab",
        "label": "Start Mercedes",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e6c80f9f.2d85a",
        "type": "tab",
        "label": "Laundry Room Button",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7a29c613.b063d8",
        "type": "tab",
        "label": "Living Room Switch",
        "disabled": false,
        "info": ""
    },
    {
        "id": "bc4cdd27.07d12",
        "type": "tab",
        "label": "Upstairs Bathroom Switch",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b9e6e1b8.4fd",
        "type": "tab",
        "label": "Alexa Actionable Notifications Example",
        "disabled": false,
        "info": ""
    },
    {
        "id": "392db80.c724a48",
        "type": "tab",
        "label": "Alexa, Where's the Beer?",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a28e9600.dc1528",
        "type": "tab",
        "label": "Finish Workout",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ae1f782f.839ce8",
        "type": "tab",
        "label": "Kitchen Sink Light Button",
        "disabled": false,
        "info": ""
    },
    {
        "id": "888dfbf1.eaaba8",
        "type": "tab",
        "label": "Spotlight",
        "disabled": false,
        "info": ""
    },
    {
        "id": "12fa1fa6.22a6e",
        "type": "tab",
        "label": "Reconciliation",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1e7298d6.94a3d7",
        "type": "tab",
        "label": "Guest Bedroom Switch",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e7792035.7e5bc",
        "type": "tab",
        "label": "Christmas Trees",
        "disabled": true,
        "info": ""
    },
    {
        "id": "61cd3ec7.a4b89",
        "type": "tab",
        "label": "Liquor Room Motion",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2f5bd1e0.67e40e",
        "type": "server",
        "z": "",
        "name": "Home Assistant",
        "legacy": false,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true
    },
    {
        "id": "48ca387f.7f63d8",
        "type": "semaphore-config",
        "z": "",
        "name": "Spotlight HA queue",
        "capacity": "1"
    },
    {
        "id": "7df2c2af.096bec",
        "type": "semaphore-config",
        "z": "",
        "name": "Spotlight HA dequeue loop",
        "capacity": "1"
    },
    {
        "id": "977b0e52.0f681",
        "type": "semaphore-config",
        "z": "",
        "name": "Spotlight room state lock",
        "capacity": "1"
    },
    {
        "id": "c4f7cda5.2695f",
        "type": "semaphore-config",
        "z": "",
        "name": "Reconciliation last cmd",
        "capacity": "1"
    },
    {
        "id": "8f718bb8.e27f08",
        "type": "semaphore-config",
        "z": "",
        "name": "Reconciliation HA dequeue loop",
        "capacity": "1"
    },
    {
        "id": "c9f3aa98.cd67b8",
        "type": "hue-bridge",
        "z": "",
        "name": "JC Hue Hub",
        "bridge": "192.168.1.65",
        "key": "no-api-key-disabled-for-now",
        "interval": "3000",
        "disableupdates": false
    },
    {
        "id": "2ac9b613.9a48fa",
        "type": "mqtt-broker",
        "z": "",
        "name": "mosquitto",
        "broker": "localhost",
        "port": "1883",
        "clientid": "node-red",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "3b8bc8cf.939ae8",
        "type": "api-call-service",
        "z": "bf163cd5.f84c",
        "name": "Toggle office lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "toggle",
        "entityId": "light.office",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 650,
        "y": 520,
        "wires": [
            [
                "ac86b665.134f48"
            ]
        ]
    },
    {
        "id": "3e59fa2.e73b206",
        "type": "switch",
        "z": "bf163cd5.f84c",
        "name": "Is press?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "single",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 520,
        "wires": [
            [
                "3b8bc8cf.939ae8"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "ac86b665.134f48",
        "type": "api-call-service",
        "z": "bf163cd5.f84c",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Office Light Button flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1580,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "52b13ab7.819424",
        "type": "api-call-service",
        "z": "4c3e78a1.ebb138",
        "name": "Toggle master bedroom lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "toggle",
        "entityId": "light.master_bedroom",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 650,
        "y": 580,
        "wires": [
            [
                "17f19bed.57f464"
            ]
        ]
    },
    {
        "id": "b3772296.72252",
        "type": "switch",
        "z": "4c3e78a1.ebb138",
        "name": "Is press?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "single",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 420,
        "y": 580,
        "wires": [
            [
                "52b13ab7.819424"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "17f19bed.57f464",
        "type": "api-call-service",
        "z": "4c3e78a1.ebb138",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Master Bedroom Light Button flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 940,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "e1166209.a2d2e",
        "type": "api-call-service",
        "z": "7b5378f9.154968",
        "name": "Toggle kitchen lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "toggle",
        "entityId": "light.kitchen",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 580,
        "y": 560,
        "wires": [
            [
                "5c4fa7d4.fd52b8"
            ]
        ]
    },
    {
        "id": "57754fcc.df72e",
        "type": "switch",
        "z": "7b5378f9.154968",
        "name": "Is press?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "single",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 380,
        "y": 560,
        "wires": [
            [
                "e1166209.a2d2e"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "5c4fa7d4.fd52b8",
        "type": "api-call-service",
        "z": "7b5378f9.154968",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Kitchen Light Button flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 840,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "cd526cf1.d6312",
        "type": "switch",
        "z": "1d296556.09592b",
        "name": "Motion On or Off?",
        "property": "payload.occupancy",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 580,
        "wires": [
            [
                "881f2136.3abd6",
                "1e3cfe7.c8f8702"
            ],
            [
                "af9ec202.685c7"
            ]
        ]
    },
    {
        "id": "7c5a2e5c.bd53",
        "type": "api-current-state",
        "z": "1d296556.09592b",
        "name": "Light not on yet?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is_not",
        "override_topic": false,
        "entity_id": "light.foyer",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 630,
        "y": 500,
        "wires": [
            [
                "442100ee.26b29",
                "37b07451.e12c2c"
            ],
            []
        ]
    },
    {
        "id": "37b07451.e12c2c",
        "type": "api-call-service",
        "z": "1d296556.09592b",
        "name": "Turn on light",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.foyer",
        "data": "{\"brightness_pct\":100}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 910,
        "y": 520,
        "wires": [
            [
                "4160fc3e.761454"
            ]
        ]
    },
    {
        "id": "d2caa878.c990f8",
        "type": "change",
        "z": "1d296556.09592b",
        "name": "Stop timer msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "stop",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 620,
        "wires": [
            [
                "c6f41175.b52d8"
            ]
        ]
    },
    {
        "id": "c6f41175.b52d8",
        "type": "stoptimer",
        "z": "1d296556.09592b",
        "duration": "4",
        "units": "Minute",
        "payloadtype": "num",
        "payloadval": "0",
        "name": "",
        "x": 680,
        "y": 700,
        "wires": [
            [
                "c4018f.d5e0ee7",
                "9ffcaf57.a5da"
            ],
            []
        ]
    },
    {
        "id": "c4018f.d5e0ee7",
        "type": "api-call-service",
        "z": "1d296556.09592b",
        "name": "Turn off light",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_off",
        "entityId": "light.foyer",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 910,
        "y": 700,
        "wires": [
            [
                "4160fc3e.761454"
            ]
        ]
    },
    {
        "id": "442100ee.26b29",
        "type": "change",
        "z": "1d296556.09592b",
        "name": "Mark light on by motion",
        "rules": [
            {
                "t": "set",
                "p": "did_turn_light_on",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "af9ec202.685c7",
        "type": "switch",
        "z": "1d296556.09592b",
        "name": "Is on from motion?",
        "property": "did_turn_light_on",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 390,
        "y": 700,
        "wires": [
            [
                "c6f41175.b52d8"
            ]
        ]
    },
    {
        "id": "881f2136.3abd6",
        "type": "api-current-state",
        "z": "1d296556.09592b",
        "name": "Is dark?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "below_horizon",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "sun.sun",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 360,
        "y": 540,
        "wires": [
            [
                "7c5a2e5c.bd53",
                "d2caa878.c990f8"
            ],
            []
        ]
    },
    {
        "id": "9ffcaf57.a5da",
        "type": "change",
        "z": "1d296556.09592b",
        "name": "Clear light on by motion or user",
        "rules": [
            {
                "t": "set",
                "p": "did_turn_light_on",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "4160fc3e.761454",
        "type": "api-call-service",
        "z": "1d296556.09592b",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Foyer Motion flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1180,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "802a930e.b1d55",
        "type": "server-state-changed",
        "z": "1d296556.09592b",
        "name": "Was light turned off by this or user?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "light.foyer",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "off",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "x": 640,
        "y": 820,
        "wires": [
            [
                "9ffcaf57.a5da"
            ],
            []
        ]
    },
    {
        "id": "fb3e86e1.e68a28",
        "type": "switch",
        "z": "62ce34cf.a7671c",
        "name": "Motion On or Off?",
        "property": "payload.occupancy",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 130,
        "y": 680,
        "wires": [
            [
                "ad0c1937.a3d408",
                "e2377e7b.8d444",
                "8ca5b256.32671"
            ],
            []
        ]
    },
    {
        "id": "7a861800.e44a98",
        "type": "api-current-state",
        "z": "62ce34cf.a7671c",
        "name": "Light not on yet?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is_not",
        "override_topic": false,
        "entity_id": "light.upstairs_hallway",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 770,
        "y": 600,
        "wires": [
            [
                "dd8ba79c.bea668",
                "55c8cbae.a6c8e4"
            ],
            []
        ]
    },
    {
        "id": "7f74d9fe.189ad8",
        "type": "api-call-service",
        "z": "62ce34cf.a7671c",
        "name": "Turn on light (max)",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.upstairs_hallway",
        "data": "{\"brightness_pct\":100}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1230,
        "y": 700,
        "wires": [
            [
                "d9ab294f.c1d178"
            ]
        ]
    },
    {
        "id": "ba91b17f.0c531",
        "type": "change",
        "z": "62ce34cf.a7671c",
        "name": "Stop timer msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "stop",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 720,
        "wires": [
            [
                "cfe91e14.483f7"
            ]
        ]
    },
    {
        "id": "cfe91e14.483f7",
        "type": "stoptimer",
        "z": "62ce34cf.a7671c",
        "duration": "2",
        "units": "Minute",
        "payloadtype": "num",
        "payloadval": "0",
        "name": "",
        "x": 860,
        "y": 800,
        "wires": [
            [
                "dc2ca952.cc4cb8",
                "d36ab12a.bf533"
            ],
            []
        ]
    },
    {
        "id": "dc2ca952.cc4cb8",
        "type": "api-call-service",
        "z": "62ce34cf.a7671c",
        "name": "Turn off light",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_off",
        "entityId": "light.upstairs_hallway",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1190,
        "y": 820,
        "wires": [
            [
                "d9ab294f.c1d178"
            ]
        ]
    },
    {
        "id": "dd8ba79c.bea668",
        "type": "change",
        "z": "62ce34cf.a7671c",
        "name": "Mark light on by sensor",
        "rules": [
            {
                "t": "set",
                "p": "did_turn_light_on",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1090,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "eb2fd5d5.268818",
        "type": "switch",
        "z": "62ce34cf.a7671c",
        "name": "Is on from sensor?",
        "property": "did_turn_light_on",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 800,
        "wires": [
            [
                "cfe91e14.483f7"
            ]
        ]
    },
    {
        "id": "ad0c1937.a3d408",
        "type": "api-current-state",
        "z": "62ce34cf.a7671c",
        "name": "Is dark?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "below_horizon",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "sun.sun",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 380,
        "y": 640,
        "wires": [
            [
                "7a861800.e44a98",
                "ba91b17f.0c531"
            ],
            []
        ]
    },
    {
        "id": "d36ab12a.bf533",
        "type": "change",
        "z": "62ce34cf.a7671c",
        "name": "Clear light on by sensor or user",
        "rules": [
            {
                "t": "set",
                "p": "did_turn_light_on",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "d9ab294f.c1d178",
        "type": "api-call-service",
        "z": "62ce34cf.a7671c",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Upstairs Hallway Sensors flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1540,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "218b1457.7387ac",
        "type": "server-state-changed",
        "z": "62ce34cf.a7671c",
        "name": "Was light turned off by this or user?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "light.upstairs_hallway",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "off",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "x": 800,
        "y": 920,
        "wires": [
            [
                "d36ab12a.bf533"
            ],
            []
        ]
    },
    {
        "id": "55c8cbae.a6c8e4",
        "type": "time-range-switch",
        "z": "62ce34cf.a7671c",
        "name": "Is night-light time?",
        "lat": "",
        "lon": "",
        "startTime": "21:00",
        "endTime": "05:00",
        "startOffset": 0,
        "endOffset": 0,
        "x": 1010,
        "y": 660,
        "wires": [
            [
                "100c1cb7.820a43"
            ],
            [
                "7f74d9fe.189ad8"
            ]
        ]
    },
    {
        "id": "100c1cb7.820a43",
        "type": "api-call-service",
        "z": "62ce34cf.a7671c",
        "name": "Turn on light (dim)",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.upstairs_hallway",
        "data": "{\"brightness\":1}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1230,
        "y": 620,
        "wires": [
            [
                "d9ab294f.c1d178"
            ]
        ]
    },
    {
        "id": "bacb1514.190848",
        "type": "comment",
        "z": "bf163cd5.f84c",
        "name": "Samsung button event codes / MQTT payloads",
        "info": "### Samsung button events / MQTT payloads\n - 1001 / hold:   Long press\n - 1002 / single: Single press\n - 1004 / double: Double press",
        "x": 220,
        "y": 340,
        "wires": []
    },
    {
        "id": "685a42b7.cb068c",
        "type": "comment",
        "z": "4c3e78a1.ebb138",
        "name": "Samsung button event codes / MQTT payloads",
        "info": "### Samsung button events / MQTT payloads\n - 1001 / hold:   Long press\n - 1002 / single: Single press\n - 1004 / double: Double press",
        "x": 220,
        "y": 480,
        "wires": []
    },
    {
        "id": "f42dda3.af91b28",
        "type": "comment",
        "z": "7b5378f9.154968",
        "name": "Samsung button event codes / MQTT payloads",
        "info": "### Samsung button events / MQTT payloads\n - 1001 / hold:   Long press\n - 1002 / single: Single press\n - 1004 / double: Double press",
        "x": 220,
        "y": 460,
        "wires": []
    },
    {
        "id": "ed05a9af.2d13e8",
        "type": "switch",
        "z": "e9868773.797078",
        "name": "Open or close?",
        "property": "payload.contact",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 120,
        "y": 740,
        "wires": [
            [
                "a9c95ae4.58e688",
                "173f58f.68101a7"
            ],
            [
                "564a61f6.d4c24",
                "330b6021.6dbe9"
            ]
        ]
    },
    {
        "id": "9bbf440e.7b9318",
        "type": "api-current-state",
        "z": "e9868773.797078",
        "name": "Light not on yet?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is_not",
        "override_topic": false,
        "entity_id": "light.outside_front",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 610,
        "y": 660,
        "wires": [
            [
                "8d820114.af30f",
                "f5496d07.f22e4"
            ],
            []
        ]
    },
    {
        "id": "f5496d07.f22e4",
        "type": "api-call-service",
        "z": "e9868773.797078",
        "name": "Turn on light",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.outside_front",
        "data": "{\"brightness_pct\":100}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 890,
        "y": 680,
        "wires": [
            [
                "e259cd14.39ed5"
            ]
        ]
    },
    {
        "id": "188eb2ed.d8ca8d",
        "type": "change",
        "z": "e9868773.797078",
        "name": "Stop timer msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "stop",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 780,
        "wires": [
            [
                "2741eb95.e54344"
            ]
        ]
    },
    {
        "id": "2741eb95.e54344",
        "type": "stoptimer",
        "z": "e9868773.797078",
        "duration": "5",
        "units": "Minute",
        "payloadtype": "num",
        "payloadval": "0",
        "name": "",
        "x": 660,
        "y": 860,
        "wires": [
            [
                "20ddb03f.050fa",
                "c19e807c.79ea8"
            ],
            []
        ]
    },
    {
        "id": "20ddb03f.050fa",
        "type": "api-call-service",
        "z": "e9868773.797078",
        "name": "Turn off light",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_off",
        "entityId": "light.outside_front",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 890,
        "y": 860,
        "wires": [
            [
                "e259cd14.39ed5"
            ]
        ]
    },
    {
        "id": "8d820114.af30f",
        "type": "change",
        "z": "e9868773.797078",
        "name": "Mark light on by motion",
        "rules": [
            {
                "t": "set",
                "p": "did_turn_light_on",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "564a61f6.d4c24",
        "type": "switch",
        "z": "e9868773.797078",
        "name": "Is on from open/close?",
        "property": "did_turn_light_on",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 380,
        "y": 860,
        "wires": [
            [
                "2741eb95.e54344"
            ]
        ]
    },
    {
        "id": "a9c95ae4.58e688",
        "type": "api-current-state",
        "z": "e9868773.797078",
        "name": "Is dark?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "below_horizon",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "sun.sun",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 340,
        "y": 700,
        "wires": [
            [
                "9bbf440e.7b9318",
                "188eb2ed.d8ca8d",
                "f86bebf4.644dc8"
            ],
            []
        ]
    },
    {
        "id": "c19e807c.79ea8",
        "type": "change",
        "z": "e9868773.797078",
        "name": "Clear light on by motion or user",
        "rules": [
            {
                "t": "set",
                "p": "did_turn_light_on",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "e259cd14.39ed5",
        "type": "api-call-service",
        "z": "e9868773.797078",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Front Door Entry/Exit flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1160,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "41ce2ec4.d116b",
        "type": "server-state-changed",
        "z": "e9868773.797078",
        "name": "Was light turned off by this or user?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "light.outside_front",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "off",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "x": 620,
        "y": 980,
        "wires": [
            [
                "c19e807c.79ea8"
            ],
            []
        ]
    },
    {
        "id": "210c5d3b.b91672",
        "type": "switch",
        "z": "884319a9.e92148",
        "name": "Motion On or Off?",
        "property": "payload.contact",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 130,
        "y": 780,
        "wires": [
            [
                "b49bc2c6.fad6d",
                "596d5487.fcaf4c"
            ],
            [
                "16446335.cbdf7d"
            ]
        ]
    },
    {
        "id": "70032b8c.d97914",
        "type": "api-current-state",
        "z": "884319a9.e92148",
        "name": "Light not on yet?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is_not",
        "override_topic": false,
        "entity_id": "light.outside_kitchen",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 610,
        "y": 700,
        "wires": [
            [
                "a9086fd2.b11ff",
                "fd751f58.f70dc"
            ],
            []
        ]
    },
    {
        "id": "fd751f58.f70dc",
        "type": "api-call-service",
        "z": "884319a9.e92148",
        "name": "Turn on light",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.outside_kitchen",
        "data": "{\"brightness_pct\":100}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 890,
        "y": 720,
        "wires": [
            [
                "9dcd21d6.76638"
            ]
        ]
    },
    {
        "id": "e3887ade.188898",
        "type": "change",
        "z": "884319a9.e92148",
        "name": "Stop timer msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "stop",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 820,
        "wires": [
            [
                "45061cb8.b1e6c4"
            ]
        ]
    },
    {
        "id": "45061cb8.b1e6c4",
        "type": "stoptimer",
        "z": "884319a9.e92148",
        "duration": "5",
        "units": "Minute",
        "payloadtype": "num",
        "payloadval": "0",
        "name": "",
        "x": 660,
        "y": 900,
        "wires": [
            [
                "5234748.55c1a8c",
                "c25cc010.43d42"
            ],
            []
        ]
    },
    {
        "id": "5234748.55c1a8c",
        "type": "api-call-service",
        "z": "884319a9.e92148",
        "name": "Turn off light",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_off",
        "entityId": "light.outside_kitchen",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 890,
        "y": 900,
        "wires": [
            [
                "9dcd21d6.76638"
            ]
        ]
    },
    {
        "id": "a9086fd2.b11ff",
        "type": "change",
        "z": "884319a9.e92148",
        "name": "Mark light on by motion",
        "rules": [
            {
                "t": "set",
                "p": "did_turn_light_on",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "7ec47fa6.5f3d9",
        "type": "switch",
        "z": "884319a9.e92148",
        "name": "Is on from open/close?",
        "property": "did_turn_light_on",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 900,
        "wires": [
            [
                "45061cb8.b1e6c4"
            ]
        ]
    },
    {
        "id": "b49bc2c6.fad6d",
        "type": "api-current-state",
        "z": "884319a9.e92148",
        "name": "Is dark?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "below_horizon",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "sun.sun",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 340,
        "y": 740,
        "wires": [
            [
                "70032b8c.d97914",
                "e3887ade.188898"
            ],
            []
        ]
    },
    {
        "id": "c25cc010.43d42",
        "type": "change",
        "z": "884319a9.e92148",
        "name": "Clear light on by motion or user",
        "rules": [
            {
                "t": "set",
                "p": "did_turn_light_on",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "9dcd21d6.76638",
        "type": "api-call-service",
        "z": "884319a9.e92148",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Kitchen Door Entry/Exit flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1160,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "77fda051.60df5",
        "type": "server-state-changed",
        "z": "884319a9.e92148",
        "name": "Was light turned off by this or user?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "light.outside_kitchen",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "off",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "x": 620,
        "y": 1060,
        "wires": [
            [
                "c25cc010.43d42"
            ],
            []
        ]
    },
    {
        "id": "f86bebf4.644dc8",
        "type": "link out",
        "z": "e9868773.797078",
        "name": "Out: Front Door Open After Dark Triggered",
        "links": [
            "efb9ed8a.2ea77"
        ],
        "x": 555,
        "y": 580,
        "wires": []
    },
    {
        "id": "efb9ed8a.2ea77",
        "type": "link in",
        "z": "884319a9.e92148",
        "name": "In: Front Door Open After Dark Triggered",
        "links": [
            "f86bebf4.644dc8"
        ],
        "x": 435,
        "y": 620,
        "wires": [
            [
                "70032b8c.d97914",
                "e3887ade.188898"
            ]
        ]
    },
    {
        "id": "16446335.cbdf7d",
        "type": "api-current-state",
        "z": "884319a9.e92148",
        "name": "Is front door closed?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "off",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "binary_sensor.doorwin_st_front_door_contact",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 180,
        "y": 840,
        "wires": [
            [
                "7ec47fa6.5f3d9"
            ],
            []
        ]
    },
    {
        "id": "db2d66d0.bc1d68",
        "type": "api-current-state",
        "z": "884319a9.e92148",
        "name": "Is kitchen door closed?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "off",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "binary_sensor.doorwin_st_kitchen_door_contact",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 180,
        "y": 900,
        "wires": [
            [
                "7ec47fa6.5f3d9"
            ],
            []
        ]
    },
    {
        "id": "330b6021.6dbe9",
        "type": "link out",
        "z": "e9868773.797078",
        "name": "Out: Front Door Closed Triggered",
        "links": [
            "944af35a.97916"
        ],
        "x": 295,
        "y": 940,
        "wires": []
    },
    {
        "id": "944af35a.97916",
        "type": "link in",
        "z": "884319a9.e92148",
        "name": "In: Front Door Closed Triggered",
        "links": [
            "330b6021.6dbe9"
        ],
        "x": 135,
        "y": 980,
        "wires": [
            [
                "db2d66d0.bc1d68"
            ]
        ]
    },
    {
        "id": "19a3e8f6.8fed97",
        "type": "switch",
        "z": "35ab222c.a6eb9e",
        "name": "Motion On or Off?",
        "property": "payload.occupancy",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 130,
        "y": 740,
        "wires": [
            [
                "4afa2ec9.d218",
                "6108431a.4459bc"
            ],
            [
                "1ae52074.bfe95"
            ]
        ]
    },
    {
        "id": "ec7a30c8.1f8a8",
        "type": "api-current-state",
        "z": "35ab222c.a6eb9e",
        "name": "Light not on yet?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is_not",
        "override_topic": false,
        "entity_id": "light.downstairs_hallway",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 610,
        "y": 660,
        "wires": [
            [
                "349190a0.746a8",
                "c5646bb.48f7798"
            ],
            []
        ]
    },
    {
        "id": "8e2ed4f8.60bd58",
        "type": "api-call-service",
        "z": "35ab222c.a6eb9e",
        "name": "Turn on light (max)",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.downstairs_hallway",
        "data": "{\"brightness_pct\":100}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1070,
        "y": 760,
        "wires": [
            [
                "6f413a4d.18e804"
            ]
        ]
    },
    {
        "id": "54f9b66e.05ccf8",
        "type": "change",
        "z": "35ab222c.a6eb9e",
        "name": "Stop timer msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "stop",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 780,
        "wires": [
            [
                "6cdc156c.a958fc"
            ]
        ]
    },
    {
        "id": "6cdc156c.a958fc",
        "type": "stoptimer",
        "z": "35ab222c.a6eb9e",
        "duration": "2",
        "units": "Minute",
        "payloadtype": "num",
        "payloadval": "0",
        "name": "",
        "x": 660,
        "y": 860,
        "wires": [
            [
                "1799c660.6158da",
                "3ff24a8.bc04db6"
            ],
            []
        ]
    },
    {
        "id": "1799c660.6158da",
        "type": "api-call-service",
        "z": "35ab222c.a6eb9e",
        "name": "Turn off light",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_off",
        "entityId": "light.downstairs_hallway",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1030,
        "y": 880,
        "wires": [
            [
                "6f413a4d.18e804"
            ]
        ]
    },
    {
        "id": "349190a0.746a8",
        "type": "change",
        "z": "35ab222c.a6eb9e",
        "name": "Mark light on by motion",
        "rules": [
            {
                "t": "set",
                "p": "did_turn_light_on",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "1ae52074.bfe95",
        "type": "switch",
        "z": "35ab222c.a6eb9e",
        "name": "Is on from motion?",
        "property": "did_turn_light_on",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 860,
        "wires": [
            [
                "6cdc156c.a958fc"
            ]
        ]
    },
    {
        "id": "4afa2ec9.d218",
        "type": "api-current-state",
        "z": "35ab222c.a6eb9e",
        "name": "Is dark?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "below_horizon",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "sun.sun",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 340,
        "y": 700,
        "wires": [
            [
                "ec7a30c8.1f8a8",
                "54f9b66e.05ccf8"
            ],
            []
        ]
    },
    {
        "id": "3ff24a8.bc04db6",
        "type": "change",
        "z": "35ab222c.a6eb9e",
        "name": "Clear light on by motion or user",
        "rules": [
            {
                "t": "set",
                "p": "did_turn_light_on",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "6f413a4d.18e804",
        "type": "api-call-service",
        "z": "35ab222c.a6eb9e",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Downstairs Hallway Motion flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1380,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "3e3df2a5.c9761e",
        "type": "server-state-changed",
        "z": "35ab222c.a6eb9e",
        "name": "Was light turned off by this or user?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "light.downstairs_hallway",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "off",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "x": 620,
        "y": 980,
        "wires": [
            [
                "3ff24a8.bc04db6"
            ],
            []
        ]
    },
    {
        "id": "c5646bb.48f7798",
        "type": "time-range-switch",
        "z": "35ab222c.a6eb9e",
        "name": "Is night-light time?",
        "lat": "",
        "lon": "",
        "startTime": "21:00",
        "endTime": "05:00",
        "startOffset": 0,
        "endOffset": 0,
        "x": 850,
        "y": 720,
        "wires": [
            [
                "8b6e9372.7f0e2"
            ],
            [
                "8e2ed4f8.60bd58"
            ]
        ]
    },
    {
        "id": "8b6e9372.7f0e2",
        "type": "api-call-service",
        "z": "35ab222c.a6eb9e",
        "name": "Turn on light (dim)",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.downstairs_hallway",
        "data": "{\"brightness\":1}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1070,
        "y": 680,
        "wires": [
            [
                "6f413a4d.18e804"
            ]
        ]
    },
    {
        "id": "b6d92969.1e42f8",
        "type": "server-state-changed",
        "z": "390fc521.dffd0a",
        "name": "JC's Plex on Shield (MrMC) changed",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "media_player.plex_jc_shield_mrmc",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": true,
        "x": 240,
        "y": 340,
        "wires": [
            [
                "86d81007.82813"
            ]
        ]
    },
    {
        "id": "95214922.2b0cf8",
        "type": "server-state-changed",
        "z": "390fc521.dffd0a",
        "name": "JC's Plex on Shield (Plex) changed",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "media_player.plex_jc_shield_plex",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": true,
        "x": 240,
        "y": 420,
        "wires": [
            [
                "86d81007.82813"
            ]
        ]
    },
    {
        "id": "86d81007.82813",
        "type": "switch",
        "z": "390fc521.dffd0a",
        "name": "New play/pause state?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "playing",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "paused",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 520,
        "y": 380,
        "wires": [
            [
                "7d8308dc.e52bb8",
                "946a044.bc3e4f8"
            ],
            [
                "bca4e90.5a43f18"
            ]
        ]
    },
    {
        "id": "82112456.ef2958",
        "type": "api-call-service",
        "z": "390fc521.dffd0a",
        "name": "Turn off non-living room lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_off",
        "entityId": "light.all_lights_except_living_room_and_bathrooms",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1050,
        "y": 400,
        "wires": [
            [
                "adc3ea04.4a0798"
            ]
        ]
    },
    {
        "id": "adc3ea04.4a0798",
        "type": "api-call-service",
        "z": "390fc521.dffd0a",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Living Room Media flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1400,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "904c234f.3223e",
        "type": "api-current-state",
        "z": "390fc521.dffd0a",
        "name": "Light not on yet?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is_not",
        "override_topic": false,
        "entity_id": "light.living_room",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 770,
        "y": 580,
        "wires": [
            [
                "8807a907.455148",
                "35b24348.f405bc"
            ],
            []
        ]
    },
    {
        "id": "8807a907.455148",
        "type": "change",
        "z": "390fc521.dffd0a",
        "name": "Mark light on by pause",
        "rules": [
            {
                "t": "set",
                "p": "did_turn_light_on",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "bca4e90.5a43f18",
        "type": "api-current-state",
        "z": "390fc521.dffd0a",
        "name": "Is dark?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "below_horizon",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "sun.sun",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 720,
        "y": 480,
        "wires": [
            [
                "904c234f.3223e"
            ],
            []
        ]
    },
    {
        "id": "1ada85ab.c1fa2a",
        "type": "change",
        "z": "390fc521.dffd0a",
        "name": "Clear light on by pause or user",
        "rules": [
            {
                "t": "set",
                "p": "did_turn_light_on",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1290,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "4f29d4bd.23044c",
        "type": "server-state-changed",
        "z": "390fc521.dffd0a",
        "name": "Was light turned off by this or user?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "light.living_room",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "off",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "x": 980,
        "y": 160,
        "wires": [
            [
                "1ada85ab.c1fa2a"
            ],
            []
        ]
    },
    {
        "id": "35b24348.f405bc",
        "type": "api-call-service",
        "z": "390fc521.dffd0a",
        "name": "Turn on light (dim)",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.living_room",
        "data": "{\"brightness\":1}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1030,
        "y": 520,
        "wires": [
            [
                "adc3ea04.4a0798"
            ]
        ]
    },
    {
        "id": "7d8308dc.e52bb8",
        "type": "switch",
        "z": "390fc521.dffd0a",
        "name": "Is on from pause?",
        "property": "did_turn_light_on",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 770,
        "y": 260,
        "wires": [
            [
                "5a0ce2de.6ff3cc"
            ]
        ]
    },
    {
        "id": "5a0ce2de.6ff3cc",
        "type": "api-call-service",
        "z": "390fc521.dffd0a",
        "name": "Turn off living room lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_off",
        "entityId": "light.living_room",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1010,
        "y": 260,
        "wires": [
            [
                "1ada85ab.c1fa2a",
                "adc3ea04.4a0798"
            ]
        ]
    },
    {
        "id": "ecaf9e39.a1c89",
        "type": "api-current-state",
        "z": "390fc521.dffd0a",
        "name": "Single occupant?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "true",
        "halt_if_type": "bool",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "input_boolean.single_occupant",
        "state_type": "habool",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 790,
        "y": 420,
        "wires": [
            [
                "82112456.ef2958"
            ],
            []
        ]
    },
    {
        "id": "d8b81ae0.0bc7a8",
        "type": "server-state-changed",
        "z": "3aefc8fa.f61958",
        "name": "Flagged to relinquish to motion?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_boolean.pending_relinquish_to_motion",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "habool",
        "haltifstate": "true",
        "halt_if_type": "bool",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "x": 250,
        "y": 340,
        "wires": [
            [
                "a61fab4f.a57358",
                "2d335beb.472f24"
            ],
            []
        ]
    },
    {
        "id": "a61fab4f.a57358",
        "type": "api-call-service",
        "z": "3aefc8fa.f61958",
        "name": "Cleared relinquish to motion flag",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "input_boolean",
        "service": "turn_off",
        "entityId": "input_boolean.pending_relinquish_to_motion",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 570,
        "y": 340,
        "wires": [
            [
                "4b58f2c7.24c89c"
            ]
        ]
    },
    {
        "id": "4b58f2c7.24c89c",
        "type": "api-call-service",
        "z": "3aefc8fa.f61958",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Relinquish to Motion flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 880,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "2d335beb.472f24",
        "type": "link out",
        "z": "3aefc8fa.f61958",
        "name": "Out: Relinquish to Motion Triggered",
        "links": [
            "7f8b4961.f338b8",
            "353a3d0e.03da72",
            "973aca54.e38288",
            "864ed584.5c4428",
            "f09dd37f.d3265",
            "7fa5d1aa.2548"
        ],
        "x": 475,
        "y": 220,
        "wires": []
    },
    {
        "id": "7f8b4961.f338b8",
        "type": "link in",
        "z": "1d296556.09592b",
        "name": "In: Relinquish to Motion Triggered",
        "links": [
            "2d335beb.472f24"
        ],
        "x": 475,
        "y": 420,
        "wires": [
            [
                "a73637f4.3f6a78"
            ]
        ]
    },
    {
        "id": "a73637f4.3f6a78",
        "type": "api-current-state",
        "z": "1d296556.09592b",
        "name": "Light already on?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "light.foyer",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 630,
        "y": 420,
        "wires": [
            [
                "442100ee.26b29"
            ],
            []
        ]
    },
    {
        "id": "353a3d0e.03da72",
        "type": "link in",
        "z": "62ce34cf.a7671c",
        "name": "In: Relinquish to Motion Triggered",
        "links": [
            "2d335beb.472f24"
        ],
        "x": 615,
        "y": 520,
        "wires": [
            [
                "d8c66ca7.f0a49"
            ]
        ]
    },
    {
        "id": "d8c66ca7.f0a49",
        "type": "api-current-state",
        "z": "62ce34cf.a7671c",
        "name": "Light already on?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "light.upstairs_hallway",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 770,
        "y": 520,
        "wires": [
            [
                "dd8ba79c.bea668"
            ],
            []
        ]
    },
    {
        "id": "973aca54.e38288",
        "type": "link in",
        "z": "35ab222c.a6eb9e",
        "name": "In: Relinquish to Motion Triggered",
        "links": [
            "2d335beb.472f24"
        ],
        "x": 455,
        "y": 580,
        "wires": [
            [
                "fdc477b1.2f4c28"
            ]
        ]
    },
    {
        "id": "fdc477b1.2f4c28",
        "type": "api-current-state",
        "z": "35ab222c.a6eb9e",
        "name": "Light already on?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "light.downstairs_hallway",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 610,
        "y": 580,
        "wires": [
            [
                "349190a0.746a8"
            ],
            []
        ]
    },
    {
        "id": "864ed584.5c4428",
        "type": "link in",
        "z": "e9868773.797078",
        "name": "In: Relinquish to Motion Triggered",
        "links": [
            "2d335beb.472f24"
        ],
        "x": 455,
        "y": 520,
        "wires": [
            [
                "d060b09f.a0a13"
            ]
        ]
    },
    {
        "id": "d060b09f.a0a13",
        "type": "api-current-state",
        "z": "e9868773.797078",
        "name": "Light already on?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "light.outside_front",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 610,
        "y": 520,
        "wires": [
            [
                "8d820114.af30f"
            ],
            []
        ]
    },
    {
        "id": "f09dd37f.d3265",
        "type": "link in",
        "z": "884319a9.e92148",
        "name": "In: Relinquish to Motion Triggered",
        "links": [
            "2d335beb.472f24"
        ],
        "x": 435,
        "y": 560,
        "wires": [
            [
                "26c8be2e.7537e2"
            ]
        ]
    },
    {
        "id": "26c8be2e.7537e2",
        "type": "api-current-state",
        "z": "884319a9.e92148",
        "name": "Light already on?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "light.outside_kitchen",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 610,
        "y": 560,
        "wires": [
            [
                "a9086fd2.b11ff"
            ],
            []
        ]
    },
    {
        "id": "1e3cfe7.c8f8702",
        "type": "switch",
        "z": "1d296556.09592b",
        "name": "Is on from motion?",
        "property": "did_turn_light_on",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 480,
        "wires": [
            [
                "d2caa878.c990f8",
                "7c5a2e5c.bd53"
            ]
        ]
    },
    {
        "id": "e2377e7b.8d444",
        "type": "switch",
        "z": "62ce34cf.a7671c",
        "name": "Is on from sensor?",
        "property": "did_turn_light_on",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 350,
        "y": 580,
        "wires": [
            [
                "ba91b17f.0c531",
                "7a861800.e44a98"
            ]
        ]
    },
    {
        "id": "6108431a.4459bc",
        "type": "switch",
        "z": "35ab222c.a6eb9e",
        "name": "Is on from motion?",
        "property": "did_turn_light_on",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 350,
        "y": 640,
        "wires": [
            [
                "54f9b66e.05ccf8",
                "ec7a30c8.1f8a8"
            ]
        ]
    },
    {
        "id": "173f58f.68101a7",
        "type": "switch",
        "z": "e9868773.797078",
        "name": "Is on from open/close?",
        "property": "did_turn_light_on",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 640,
        "wires": [
            [
                "f86bebf4.644dc8",
                "9bbf440e.7b9318",
                "188eb2ed.d8ca8d"
            ]
        ]
    },
    {
        "id": "596d5487.fcaf4c",
        "type": "switch",
        "z": "884319a9.e92148",
        "name": "Is on from open/close?",
        "property": "did_turn_light_on",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 680,
        "wires": [
            [
                "70032b8c.d97914",
                "e3887ade.188898"
            ]
        ]
    },
    {
        "id": "d513b5b1.6f0e18",
        "type": "server-state-changed",
        "z": "c35af4f2.4cd108",
        "name": "Phone arrived home",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "device_tracker.sm_n970u",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "home",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "x": 350,
        "y": 520,
        "wires": [
            [
                "229f2e70.a0b3a2",
                "17d225c7.3c968a"
            ],
            []
        ]
    },
    {
        "id": "229f2e70.a0b3a2",
        "type": "api-call-service",
        "z": "c35af4f2.4cd108",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Phone Location flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 640,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "17d225c7.3c968a",
        "type": "link out",
        "z": "c35af4f2.4cd108",
        "name": "Out: Phone Arrived Home",
        "links": [
            "c578334b.d5d9d"
        ],
        "x": 535,
        "y": 460,
        "wires": []
    },
    {
        "id": "c578334b.d5d9d",
        "type": "link in",
        "z": "e9868773.797078",
        "name": "In: Phone Arrived Home",
        "links": [
            "17d225c7.3c968a"
        ],
        "x": 295,
        "y": 780,
        "wires": [
            [
                "a9c95ae4.58e688"
            ]
        ]
    },
    {
        "id": "b1738366.76173",
        "type": "server-state-changed",
        "z": "66eaa4d8.773f4c",
        "name": "Flagged to skip next on yamaha?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_boolean.pending_yamaha_skip_next",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "habool",
        "haltifstate": "true",
        "halt_if_type": "bool",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "x": 130,
        "y": 440,
        "wires": [
            [
                "d9200866.dead68",
                "fe35a553.2f2e68"
            ],
            []
        ]
    },
    {
        "id": "d9200866.dead68",
        "type": "api-current-state",
        "z": "66eaa4d8.773f4c",
        "name": "Is yamaha on?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "off",
        "halt_if_type": "str",
        "halt_if_compare": "is_not",
        "override_topic": false,
        "entity_id": "media_player.yamaha_receiver",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 400,
        "y": 400,
        "wires": [
            [
                "15ab89b5.405906"
            ],
            []
        ]
    },
    {
        "id": "15ab89b5.405906",
        "type": "api-call-service",
        "z": "66eaa4d8.773f4c",
        "name": "Skip to next",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "media_player",
        "service": "media_next_track",
        "entityId": "media_player.yamaha_receiver",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 620,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "fe35a553.2f2e68",
        "type": "api-call-service",
        "z": "66eaa4d8.773f4c",
        "name": "Clear skip next on yamaha flag",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "input_boolean",
        "service": "turn_off",
        "entityId": "input_boolean.pending_yamaha_skip_next",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 450,
        "y": 460,
        "wires": [
            [
                "2033d86b.f74768"
            ]
        ]
    },
    {
        "id": "2033d86b.f74768",
        "type": "api-call-service",
        "z": "66eaa4d8.773f4c",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Skip Next on Yamaha flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 760,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "d0eb5b.db1924a8",
        "type": "server-state-changed",
        "z": "bec3a76b.4b57e8",
        "name": "Car/House alarm triggered or cleared?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "group.triggered_alarms",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "4f8f2463.0a2c5c"
            ],
            [
                "5688115f.ef31e"
            ]
        ]
    },
    {
        "id": "5737f738.e691a8",
        "type": "api-call-service",
        "z": "bec3a76b.4b57e8",
        "name": "Flash all lights red",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.house_lights",
        "data": "{\"brightness_pct\":100,\"color_name\":\"red\",\"flash\":\"long\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 490,
        "y": 660,
        "wires": [
            [
                "f37025ee.c53498"
            ]
        ]
    },
    {
        "id": "f37025ee.c53498",
        "type": "delay",
        "z": "bec3a76b.4b57e8",
        "name": "Wait to retrigger flash",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 720,
        "y": 660,
        "wires": [
            [
                "85279ec5.18371"
            ]
        ],
        "info": "Hue flash sometimes times out it seems, so need to keep sending..."
    },
    {
        "id": "85279ec5.18371",
        "type": "api-current-state",
        "z": "bec3a76b.4b57e8",
        "name": "Is still triggered?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "Alert active",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "input_select.alarm_alert",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 940,
        "y": 660,
        "wires": [
            [
                "5737f738.e691a8"
            ],
            []
        ]
    },
    {
        "id": "86b2e7e1.bb7a38",
        "type": "ha-get-entities",
        "z": "bec3a76b.4b57e8",
        "server": "2f5bd1e0.67e40e",
        "name": "Get individual light states",
        "rules": [
            {
                "property": "",
                "logic": "jsonata",
                "value": "($exists($entity().attributes.is_hue_group)\t    = false)\t  and\t($exists($entity().attributes.entity_id)\t    = false)",
                "valueType": "jsonata"
            },
            {
                "property": "entity_id",
                "logic": "starts_with",
                "value": "light.",
                "valueType": "str"
            }
        ],
        "output_type": "array",
        "output_empty_results": false,
        "output_location_type": "msg",
        "output_location": "payload",
        "output_results_count": 1,
        "x": 710,
        "y": 540,
        "wires": [
            [
                "5046f986.924c18"
            ]
        ],
        "info": "This filters out hue groups since lights within a group may have different settings (which it looks like Hue just \"averages\" the settings to report a single number set for all of the lights)."
    },
    {
        "id": "5046f986.924c18",
        "type": "function",
        "z": "bec3a76b.4b57e8",
        "name": "Org data and save",
        "func": "const entities = msg.payload.map((e) => {\n    const domain = e.entity_id.split('.')[0];\n    const payload = {};\n\n    switch(domain) {\n        case 'switch':\n            payload.domain = domain;\n            payload.service = `turn_${e.state}`;\n            payload.data = {\n                entity_id: e.entity_id,\n            }\n            break;\n         case 'light':\n            payload.domain = domain;\n            payload.service = `turn_${e.state}`;\n            payload.data = {\n                entity_id: e.entity_id,\n                brightness: e.attributes.brightness,\n                color_temp: e.attributes.color_temp,\n                xy_color: e.attributes.xy_color,\n            };    \n            break;\n        case 'climate':\n            payload.domain = 'climate';\n            payload.service = `set_temperature`;\n            payload.data = {\n                entity_id: e.entity_id,\n                temperature: e.attributes.temperature,\n                target_temp_low: e.attributes.min_temp,\n                target_temp_high: e.attributes.max_temp,\n                operation_mode: e.attributes.operation_mode\n            };\n            break;\n    }\n    return payload;\n});\n// Save the states\nflow.set(msg.state_name, entities);\n\n// create a blank message object with out new payload\nmsg = { payload: entities, state_name: msg.state_name };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 950,
        "y": 540,
        "wires": [
            [
                "5fdc398f.08c0b8"
            ]
        ]
    },
    {
        "id": "268d5ae.006fda6",
        "type": "change",
        "z": "bec3a76b.4b57e8",
        "name": "Set to save original state",
        "rules": [
            {
                "t": "set",
                "p": "state_name",
                "pt": "msg",
                "to": "original_state",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 540,
        "wires": [
            [
                "86b2e7e1.bb7a38"
            ]
        ]
    },
    {
        "id": "5fdc398f.08c0b8",
        "type": "switch",
        "z": "bec3a76b.4b57e8",
        "name": "Which state?",
        "property": "state_name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "original_state",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "on_state",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1140,
        "y": 540,
        "wires": [
            [
                "543dfd4c.5c5054"
            ],
            [
                "5737f738.e691a8",
                "765963cc.b06e2c"
            ]
        ]
    },
    {
        "id": "543dfd4c.5c5054",
        "type": "change",
        "z": "bec3a76b.4b57e8",
        "name": "Set to save on state",
        "rules": [
            {
                "t": "set",
                "p": "state_name",
                "pt": "msg",
                "to": "on_state",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 460,
        "wires": [
            [
                "9c70ed3d.f0259"
            ]
        ]
    },
    {
        "id": "8b6bbbd7.94b878",
        "type": "delay",
        "z": "bec3a76b.4b57e8",
        "name": "Let lights turn on",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 970,
        "y": 460,
        "wires": [
            [
                "86b2e7e1.bb7a38"
            ]
        ]
    },
    {
        "id": "9c70ed3d.f0259",
        "type": "api-call-service",
        "z": "bec3a76b.4b57e8",
        "name": "Turn on all lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.house_lights",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "payload",
        "output_location_type": "msg",
        "mustacheAltTags": false,
        "x": 700,
        "y": 460,
        "wires": [
            [
                "8b6bbbd7.94b878"
            ]
        ]
    },
    {
        "id": "7bb9f94f.580cc8",
        "type": "split",
        "z": "bec3a76b.4b57e8",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 510,
        "y": 1160,
        "wires": [
            [
                "4c3d14bf.8b079c"
            ]
        ]
    },
    {
        "id": "65b9ef9e.e10f5",
        "type": "api-call-service",
        "z": "bec3a76b.4b57e8",
        "name": "Restore States",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "",
        "service": "",
        "entityId": "",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "payload",
        "output_location_type": "msg",
        "mustacheAltTags": false,
        "x": 880,
        "y": 1080,
        "wires": [
            [
                "81abfff4.40e7c"
            ]
        ]
    },
    {
        "id": "4c3d14bf.8b079c",
        "type": "delay",
        "z": "bec3a76b.4b57e8",
        "name": "Limit msg rate to not overload Hue",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "5",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 760,
        "y": 1160,
        "wires": [
            [
                "65b9ef9e.e10f5"
            ]
        ]
    },
    {
        "id": "81abfff4.40e7c",
        "type": "join",
        "z": "bec3a76b.4b57e8",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 1070,
        "y": 1080,
        "wires": [
            [
                "57d08dcc.be1d54"
            ]
        ]
    },
    {
        "id": "12c97065.d235b",
        "type": "function",
        "z": "bec3a76b.4b57e8",
        "name": "Get saved data",
        "func": "// Save the states\nentities = flow.get(msg.state_name);\n\n// create a blank message object with out new payload\nmsg = { payload: entities, state_name: msg.state_name };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 620,
        "y": 1080,
        "wires": [
            [
                "7bb9f94f.580cc8"
            ]
        ]
    },
    {
        "id": "57d08dcc.be1d54",
        "type": "switch",
        "z": "bec3a76b.4b57e8",
        "name": "Which state?",
        "property": "state_name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "on_state",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "original_state",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1250,
        "y": 1080,
        "wires": [
            [
                "b2304da.00036b"
            ],
            [
                "c2e4c267.ce43"
            ]
        ]
    },
    {
        "id": "b2304da.00036b",
        "type": "delay",
        "z": "bec3a76b.4b57e8",
        "name": "Let lights turn on",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 610,
        "y": 1000,
        "wires": [
            [
                "bdb774a9.fc7cb8"
            ]
        ]
    },
    {
        "id": "a22027dd.a3a988",
        "type": "change",
        "z": "bec3a76b.4b57e8",
        "name": "Set to restore on state",
        "rules": [
            {
                "t": "set",
                "p": "state_name",
                "pt": "msg",
                "to": "on_state",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 1080,
        "wires": [
            [
                "12c97065.d235b"
            ]
        ]
    },
    {
        "id": "bdb774a9.fc7cb8",
        "type": "change",
        "z": "bec3a76b.4b57e8",
        "name": "Set to restore original state",
        "rules": [
            {
                "t": "set",
                "p": "state_name",
                "pt": "msg",
                "to": "original_state",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 1000,
        "wires": [
            [
                "12c97065.d235b"
            ]
        ]
    },
    {
        "id": "4f8f2463.0a2c5c",
        "type": "api-call-service",
        "z": "bec3a76b.4b57e8",
        "name": "Ensure alert active",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "input_select",
        "service": "select_option",
        "entityId": "input_select.alarm_alert",
        "data": "{\"option\":\"Alert active\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 510,
        "y": 40,
        "wires": [
            [
                "a9af11c6.9dba1"
            ]
        ]
    },
    {
        "id": "bb6bce71.d2c1b",
        "type": "server-state-changed",
        "z": "bec3a76b.4b57e8",
        "name": "Alert just activated?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_select.alarm_alert",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "Alert active",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "x": 150,
        "y": 460,
        "wires": [
            [
                "268d5ae.006fda6",
                "8496950d.2f6188"
            ],
            []
        ]
    },
    {
        "id": "73cd822f.2b7ffc",
        "type": "api-call-service",
        "z": "bec3a76b.4b57e8",
        "name": "Set to acknowledged",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "input_select",
        "service": "select_option",
        "entityId": "input_select.alarm_alert",
        "data": "{\"option\":\"Acknowledged\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 760,
        "y": 100,
        "wires": [
            [
                "a9af11c6.9dba1"
            ]
        ]
    },
    {
        "id": "5688115f.ef31e",
        "type": "api-current-state",
        "z": "bec3a76b.4b57e8",
        "name": "Is alert active now?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "Alert active",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "input_select.alarm_alert",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 510,
        "y": 100,
        "wires": [
            [
                "73cd822f.2b7ffc"
            ],
            []
        ]
    },
    {
        "id": "972f1eaf.95c4a",
        "type": "server-state-changed",
        "z": "bec3a76b.4b57e8",
        "name": "Alert acknowledged?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_select.alarm_alert",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "Acknowledged",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "x": 190,
        "y": 800,
        "wires": [
            [
                "3689482c.522928"
            ],
            []
        ]
    },
    {
        "id": "3689482c.522928",
        "type": "api-call-service",
        "z": "bec3a76b.4b57e8",
        "name": "Turn on all lights solid max alertness",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.house_lights",
        "data": "{\"brightness_pct\":100,\"color_temp\":1}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 510,
        "y": 800,
        "wires": [
            [
                "61c0d9aa.dc7c48"
            ]
        ]
    },
    {
        "id": "c71ea66a.e69218",
        "type": "server-state-changed",
        "z": "bec3a76b.4b57e8",
        "name": "Alert reset confirmed?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_select.alarm_alert",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "Cleared",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "x": 180,
        "y": 1000,
        "wires": [
            [
                "a22027dd.a3a988",
                "b551893d.2876e8"
            ],
            []
        ]
    },
    {
        "id": "b857ee27.83511",
        "type": "server-events",
        "z": "bec3a76b.4b57e8",
        "name": "Mobile notification action",
        "server": "2f5bd1e0.67e40e",
        "event_type": "mobile_app_notification_action",
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "x": 210,
        "y": 1380,
        "wires": [
            [
                "8b647146.2f88e"
            ]
        ]
    },
    {
        "id": "8b647146.2f88e",
        "type": "switch",
        "z": "bec3a76b.4b57e8",
        "name": "Which button?",
        "property": "payload.event.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "acknowledge_alarm",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "clear_alarm",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 440,
        "y": 1380,
        "wires": [
            [
                "7b8b357d.9c49cc"
            ],
            [
                "50d870e1.a1f82"
            ]
        ]
    },
    {
        "id": "b551893d.2876e8",
        "type": "api-call-service",
        "z": "bec3a76b.4b57e8",
        "name": "Clear reset prompt notificaiton",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "notify",
        "service": "mobile_app_sm_n970u",
        "entityId": "",
        "data": "{\"message\":\"clear_notification\",\"data\":{\"tag\":\"alarm_alert_acknowledge_clear_prompt\"}}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 450,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "d02fc76c.8f0538",
        "type": "api-call-service",
        "z": "bec3a76b.4b57e8",
        "name": "Set to cleared",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "input_select",
        "service": "select_option",
        "entityId": "input_select.alarm_alert",
        "data": "{\"option\":\"Cleared\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 880,
        "y": 1420,
        "wires": [
            [
                "1696f942.925c47"
            ]
        ]
    },
    {
        "id": "7b8b357d.9c49cc",
        "type": "api-current-state",
        "z": "bec3a76b.4b57e8",
        "name": "Is triggered?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "Alert active",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "input_select.alarm_alert",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 650,
        "y": 1360,
        "wires": [
            [
                "d09da2ee.578aa"
            ],
            []
        ]
    },
    {
        "id": "d09da2ee.578aa",
        "type": "api-call-service",
        "z": "bec3a76b.4b57e8",
        "name": "Set to acknowledged",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "input_select",
        "service": "select_option",
        "entityId": "input_select.alarm_alert",
        "data": "{\"option\":\"Acknowledged\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 880,
        "y": 1360,
        "wires": [
            [
                "1696f942.925c47"
            ]
        ]
    },
    {
        "id": "61d8dd61.452804",
        "type": "api-call-service",
        "z": "bec3a76b.4b57e8",
        "name": "Prompt ack or clear on phone",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "notify",
        "service": "mobile_app_sm_n970u",
        "entityId": "",
        "data": "{\"title\":\"{{alarms_triggered_name}} Alarm Triggered\",\"message\":\"Acknowledge to stop flashing, clear to return lights to previous state.\",\"data\":{\"tag\":\"alarm_alert_acknowledge_clear_prompt\",\"actions\":[{\"action\":\"acknowledge_alarm\",\"title\":\"Acknowledge\"},{\"action\":\"clear_alarm\",\"title\":\"Clear and Reset\"}]}}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1110,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "50d870e1.a1f82",
        "type": "api-current-state",
        "z": "bec3a76b.4b57e8",
        "name": "Is acknowledged?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "Acknowledged",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "input_select.alarm_alert",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 670,
        "y": 1420,
        "wires": [
            [
                "d02fc76c.8f0538"
            ],
            []
        ]
    },
    {
        "id": "61c0d9aa.dc7c48",
        "type": "api-call-service",
        "z": "bec3a76b.4b57e8",
        "name": "Ensure alarm not triggered",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "input_boolean",
        "service": "turn_off",
        "entityId": "group.triggered_alarms",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 840,
        "y": 800,
        "wires": [
            [
                "3d4179a2.a2a396"
            ]
        ]
    },
    {
        "id": "c2e4c267.ce43",
        "type": "api-call-service",
        "z": "bec3a76b.4b57e8",
        "name": "Flag to relinquish to motion",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "input_boolean",
        "service": "turn_on",
        "entityId": "input_boolean.pending_relinquish_to_motion",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1040,
        "y": 1240,
        "wires": [
            [
                "aee571f7.a9f67"
            ]
        ],
        "info": "Could do this direct on node-red, but for now going through HA to get the logging."
    },
    {
        "id": "765963cc.b06e2c",
        "type": "api-call-service",
        "z": "bec3a76b.4b57e8",
        "name": "Log alert lights to HA",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Alarm alert lights triggered. [Alarm Triggered flow]\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1180,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "3d4179a2.a2a396",
        "type": "api-call-service",
        "z": "bec3a76b.4b57e8",
        "name": "Log acknowledge to HA",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Acknowledgement of alarm triggered. [Alarm Triggered flow]\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1130,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "aee571f7.a9f67",
        "type": "api-call-service",
        "z": "bec3a76b.4b57e8",
        "name": "Log clear to HA",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Clear of alarm triggered. [Alarm Triggered flow]\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1280,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "1696f942.925c47",
        "type": "api-call-service",
        "z": "bec3a76b.4b57e8",
        "name": "Log phone action to HA",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Updated alarm state from phone notificaiton. [Alarm Triggered flow]\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1190,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "a9af11c6.9dba1",
        "type": "api-call-service",
        "z": "bec3a76b.4b57e8",
        "name": "Log alarm trigger to HA",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Responded to alarm trigger flag change. [Alarm Triggered flow]\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1070,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8496950d.2f6188",
        "type": "api-current-state",
        "z": "bec3a76b.4b57e8",
        "name": "Is car triggered?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "input_boolean.car_alarm_triggered",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 340,
        "y": 320,
        "wires": [
            [
                "bac31854.c98ae8"
            ],
            [
                "ee6d3554.429c48"
            ]
        ]
    },
    {
        "id": "bac31854.c98ae8",
        "type": "api-current-state",
        "z": "bec3a76b.4b57e8",
        "name": "Is house triggered?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "input_boolean.house_alarm_triggered",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 550,
        "y": 260,
        "wires": [
            [
                "e6b6648f.b62c58"
            ],
            [
                "ca1f5fef.0d014"
            ]
        ]
    },
    {
        "id": "ee6d3554.429c48",
        "type": "api-current-state",
        "z": "bec3a76b.4b57e8",
        "name": "Is house triggered?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "input_boolean.house_alarm_triggered",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 550,
        "y": 360,
        "wires": [
            [
                "d66aa569.2fe258"
            ],
            [
                "fbdd1f2d.f9d39"
            ]
        ]
    },
    {
        "id": "ca1f5fef.0d014",
        "type": "change",
        "z": "bec3a76b.4b57e8",
        "name": "Set name for car triggered",
        "rules": [
            {
                "t": "set",
                "p": "alarms_triggered_name",
                "pt": "msg",
                "to": "Car",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 280,
        "wires": [
            [
                "61d8dd61.452804"
            ]
        ]
    },
    {
        "id": "e6b6648f.b62c58",
        "type": "change",
        "z": "bec3a76b.4b57e8",
        "name": "Set name for both triggered",
        "rules": [
            {
                "t": "set",
                "p": "alarms_triggered_name",
                "pt": "msg",
                "to": "Car/House",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 220,
        "wires": [
            [
                "61d8dd61.452804"
            ]
        ]
    },
    {
        "id": "d66aa569.2fe258",
        "type": "change",
        "z": "bec3a76b.4b57e8",
        "name": "Set name for house triggered",
        "rules": [
            {
                "t": "set",
                "p": "alarms_triggered_name",
                "pt": "msg",
                "to": "House",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 340,
        "wires": [
            [
                "61d8dd61.452804"
            ]
        ]
    },
    {
        "id": "fbdd1f2d.f9d39",
        "type": "change",
        "z": "bec3a76b.4b57e8",
        "name": "Set name for none triggered",
        "rules": [
            {
                "t": "set",
                "p": "alarms_triggered_name",
                "pt": "msg",
                "to": "None?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 400,
        "wires": [
            [
                "61d8dd61.452804"
            ]
        ]
    },
    {
        "id": "a14400a6.04e44",
        "type": "api-call-service",
        "z": "e393795c.3d6e88",
        "name": "Send Start to Tasker",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "rest_command",
        "service": "autoremote_mercedes_start",
        "entityId": "",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 460,
        "y": 300,
        "wires": [
            [
                "557ae43.ca7501c"
            ]
        ]
    },
    {
        "id": "d4d1253e.82c2b8",
        "type": "server-state-changed",
        "z": "e393795c.3d6e88",
        "name": "Flagged to start?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_boolean.pending_mercedes_start",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "habool",
        "haltifstate": "true",
        "halt_if_type": "bool",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "x": 220,
        "y": 300,
        "wires": [
            [
                "a14400a6.04e44"
            ],
            []
        ]
    },
    {
        "id": "557ae43.ca7501c",
        "type": "api-call-service",
        "z": "e393795c.3d6e88",
        "name": "Clear start flag",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "input_boolean",
        "service": "turn_off",
        "entityId": "input_boolean.pending_mercedes_start",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 700,
        "y": 300,
        "wires": [
            [
                "e2b7ecee.0930c"
            ]
        ]
    },
    {
        "id": "e2b7ecee.0930c",
        "type": "api-call-service",
        "z": "e393795c.3d6e88",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Start Mercedes flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 960,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "e643fd72.bbf38",
        "type": "api-call-service",
        "z": "e6c80f9f.2d85a",
        "name": "Turn on washer/fridge lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.washer_and_fridge",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 900,
        "y": 780,
        "wires": [
            [
                "3963d4b.c8f6a2c"
            ]
        ]
    },
    {
        "id": "40b3d527.341c6c",
        "type": "switch",
        "z": "e6c80f9f.2d85a",
        "name": "Is press?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "single",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 420,
        "y": 700,
        "wires": [
            [
                "68b5974a.f10e78"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "3963d4b.c8f6a2c",
        "type": "api-call-service",
        "z": "e6c80f9f.2d85a",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Laundry Room Light Button flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1220,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "971adfa8.e711c",
        "type": "comment",
        "z": "e6c80f9f.2d85a",
        "name": "Samsung button event codes / MQTT payloads",
        "info": "### Samsung button events / MQTT payloads\n - 1001 / hold:   Long press\n - 1002 / single: Single press\n - 1004 / double: Double press",
        "x": 220,
        "y": 600,
        "wires": []
    },
    {
        "id": "68b5974a.f10e78",
        "type": "api-current-state",
        "z": "e6c80f9f.2d85a",
        "name": "Is washer/fridge on?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "light.washer_and_fridge",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 620,
        "y": 700,
        "wires": [
            [
                "39f1b9bd.8e7816"
            ],
            [
                "e643fd72.bbf38"
            ]
        ]
    },
    {
        "id": "9e3194ff.7878b8",
        "type": "switch",
        "z": "e6c80f9f.2d85a",
        "name": "Is double press?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "double",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 860,
        "wires": [
            [
                "fa969d60.fa40c"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "fa969d60.fa40c",
        "type": "api-current-state",
        "z": "e6c80f9f.2d85a",
        "name": "Is e-box on?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "light.laundry_electrical_box",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 630,
        "y": 860,
        "wires": [
            [
                "39f1b9bd.8e7816"
            ],
            [
                "22bf1bde.9d54f4"
            ]
        ]
    },
    {
        "id": "39f1b9bd.8e7816",
        "type": "api-call-service",
        "z": "e6c80f9f.2d85a",
        "name": "Turn off laundry room lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_off",
        "entityId": "light.laundry_room",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 900,
        "y": 660,
        "wires": [
            [
                "3963d4b.c8f6a2c"
            ]
        ]
    },
    {
        "id": "22bf1bde.9d54f4",
        "type": "api-call-service",
        "z": "e6c80f9f.2d85a",
        "name": "Turn on laundry room lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.laundry_room",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 900,
        "y": 920,
        "wires": [
            [
                "3963d4b.c8f6a2c"
            ]
        ]
    },
    {
        "id": "e019762.dd47f88",
        "type": "switch",
        "z": "7a29c613.b063d8",
        "name": "Is on button?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^on-[a-zA-Z\\-]+$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 450,
        "y": 500,
        "wires": [
            [
                "b13a67ab.b5e0e8",
                "576f5102.3fbda"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "790012f9.dd246c",
        "type": "api-call-service",
        "z": "7a29c613.b063d8",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Living Room Switch flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 2020,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "dae74b5b.f30368",
        "type": "comment",
        "z": "7a29c613.b063d8",
        "name": "Philips Hue dimmer event codes / MQTT payloads",
        "info": "## Samsung switch events\n\n### Which button\n - 1xxx / on-<event>: On\n - 2xxx / up-<event>: Brighter\n - 3xxx / down/<event>: Darker\n - 4xxx / off-<event>: Off\n\n### Which event (deconz)\n - xxx0: Button down-press\n - xxx1: Periodic hold report (1 per sec)\n - xxx2: Button up-release (not held)\n - xxx3: Button up-release (after held)\n\n### Which event (zigbee2mqtt)\n - <btn>-press: Button single press and release\n - <btn>-hold: Button hold (1 per sec)\n - <btn>-hold-release: Button up-release (after held)",
        "x": 270,
        "y": 420,
        "wires": []
    },
    {
        "id": "cbd66a92.d0b1c8",
        "type": "switch",
        "z": "7a29c613.b063d8",
        "name": "Is brighter button?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^up-[a-zA-Z\\-]+$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 470,
        "y": 700,
        "wires": [
            [
                "c7fcab94.a760b8",
                "85c57ffb.e1d62"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "8692e443.9a2b48",
        "type": "switch",
        "z": "7a29c613.b063d8",
        "name": "Is darker button?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^down-[a-zA-Z\\-]+$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 470,
        "y": 900,
        "wires": [
            [
                "70b2e202.5bde1c",
                "69e579da.2282f8"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "f75dd00c.e4817",
        "type": "switch",
        "z": "7a29c613.b063d8",
        "name": "Is off button?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^off-[a-zA-Z\\-]+$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 450,
        "y": 1100,
        "wires": [
            [
                "394451d5.cbd38e",
                "ca0286e5.eec9b8"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "b13a67ab.b5e0e8",
        "type": "switch",
        "z": "7a29c613.b063d8",
        "name": "Is held?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-hold$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 680,
        "y": 460,
        "wires": [
            [
                "5b3655d3.8ed6dc"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "576f5102.3fbda",
        "type": "switch",
        "z": "7a29c613.b063d8",
        "name": "Was tapped?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-press$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 690,
        "y": 540,
        "wires": [
            [
                "f1e72c7f.e0852"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "c7fcab94.a760b8",
        "type": "switch",
        "z": "7a29c613.b063d8",
        "name": "Is held?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-hold$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 680,
        "y": 660,
        "wires": [
            [
                "badabe74.349a6"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "85c57ffb.e1d62",
        "type": "switch",
        "z": "7a29c613.b063d8",
        "name": "Was tapped?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-press$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 690,
        "y": 740,
        "wires": [
            [
                "badabe74.349a6"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "70b2e202.5bde1c",
        "type": "switch",
        "z": "7a29c613.b063d8",
        "name": "Is held?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-hold$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 680,
        "y": 860,
        "wires": [
            [
                "9f63c710.604598"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "69e579da.2282f8",
        "type": "switch",
        "z": "7a29c613.b063d8",
        "name": "Was tapped?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-press$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 690,
        "y": 940,
        "wires": [
            [
                "9f63c710.604598"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "394451d5.cbd38e",
        "type": "switch",
        "z": "7a29c613.b063d8",
        "name": "Is held?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-hold$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 680,
        "y": 1060,
        "wires": [
            [
                "3db19aa6.18b336"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "ca0286e5.eec9b8",
        "type": "switch",
        "z": "7a29c613.b063d8",
        "name": "Was tapped?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-press$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 690,
        "y": 1140,
        "wires": [
            [
                "8d86f0c5.255d1"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "df9fc1d3.af523",
        "type": "api-call-service",
        "z": "7a29c613.b063d8",
        "name": "Turn on living room lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.living_room",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1470,
        "y": 540,
        "wires": [
            [
                "feabc652.6780b8"
            ]
        ]
    },
    {
        "id": "3bc1c346.3473ec",
        "type": "api-call-service",
        "z": "7a29c613.b063d8",
        "name": "Turn off living room lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_off",
        "entityId": "light.living_room",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1470,
        "y": 1140,
        "wires": [
            [
                "feabc652.6780b8"
            ]
        ]
    },
    {
        "id": "f9323302.f0f7f",
        "type": "ha-get-entities",
        "z": "7a29c613.b063d8",
        "server": "2f5bd1e0.67e40e",
        "name": "Get individual light states",
        "rules": [
            {
                "property": "",
                "logic": "jsonata",
                "value": "$exists($entity().attributes.is_hue_group) = false",
                "valueType": "jsonata"
            },
            {
                "property": "entity_id",
                "logic": "starts_with",
                "value": "light.",
                "valueType": "str"
            },
            {
                "property": "entity_id",
                "logic": "in_group",
                "value": "light.living_room_individual",
                "valueType": "str"
            }
        ],
        "output_type": "array",
        "output_empty_results": false,
        "output_location_type": "msg",
        "output_location": "payload",
        "output_results_count": 1,
        "x": 1130,
        "y": 720,
        "wires": [
            [
                "2ca2926f.d8e0ce"
            ]
        ],
        "info": "This filters out hue groups since lights within a group may have different settings (which it looks like Hue just \"averages\" the settings to report a single number set for all of the lights)."
    },
    {
        "id": "3af7ac4e.e1f074",
        "type": "function",
        "z": "7a29c613.b063d8",
        "name": "Inc or dec brightness by 10%",
        "func": "var min_bright = null;\nvar max_bright = null;\nvar new_bright = null;\n\nvar inc_dec_pct = 0.1;\n\nconst src_payload = msg.payloads_merged;\n\n\nfunction inc_bright(old_bright) {\n    if (!old_bright) {\n        return null;\n    }\n    \n    // Add 1 in case off from last conversion\n    var old_bright_pct = (old_bright+1)/255;\n    var new_bright_pct = old_bright_pct + inc_dec_pct;\n    // Want to round to nearest 10%\n    new_bright_pct = Math.round(new_bright_pct*10)/10;\n    \n    var new_inc_bright = Math.round(new_bright_pct * 255);\n    new_inc_bright = Math.min(new_inc_bright, 255);\n    return new_inc_bright;\n}\n\n\nfunction dec_bright(old_bright) {\n    if (!old_bright) {\n        return null;\n    }\n    \n    // Subtract 1 in case off from last conversion\n    var old_bright_pct = (old_bright-1)/255;\n    var new_bright_pct = old_bright_pct - inc_dec_pct;\n    // Want to round to nearest 10%\n    new_bright_pct = Math.round(new_bright_pct*10)/10;\n    \n    var new_dec_bright = Math.round(new_bright_pct * 255);\n    new_dec_bright = Math.max(new_dec_bright, 1);\n    return new_dec_bright;\n}\n\n\nsrc_payload.forEach(function(value, index) {\n    if (!(value.attributes.brightness)) {\n        return;\n    }\n    \n    if (min_bright===null ||\n            value.attributes.brightness < min_bright) {\n        min_bright = value.attributes.brightness;\n    }\n    \n    if (max_bright===null ||\n            value.attributes.brightness > max_bright) {\n        max_bright = value.attributes.brightness;\n    }\n})\n\n\nif (msg.config.inc_or_dec == \"increase\") {\n    new_bright = inc_bright(min_bright)\n} else if (msg.config.inc_or_dec == \"decrease\") {\n    new_bright = dec_bright(max_bright)\n}\n// Else leave new_bright as null\n\nif (new_bright===null) {\n    return null;\n}\n\nmsg.config.new_brightness = new_bright;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1180,
        "y": 800,
        "wires": [
            [
                "4eaf6593.624d7c"
            ]
        ]
    },
    {
        "id": "badabe74.349a6",
        "type": "change",
        "z": "7a29c613.b063d8",
        "name": "Flag to increase",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "config.inc_or_dec",
                "pt": "msg",
                "to": "increase",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 660,
        "wires": [
            [
                "f9323302.f0f7f"
            ]
        ]
    },
    {
        "id": "9f63c710.604598",
        "type": "change",
        "z": "7a29c613.b063d8",
        "name": "Flag to decrease",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "config.inc_or_dec",
                "pt": "msg",
                "to": "decrease",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 860,
        "wires": [
            [
                "f9323302.f0f7f"
            ]
        ]
    },
    {
        "id": "4eaf6593.624d7c",
        "type": "function",
        "z": "7a29c613.b063d8",
        "name": "All or individual lights?",
        "func": "var new_payloads = [];\nvar new_cache_data = {};\n\nconst src_payload = msg.payloads_merged;\n\n\nsrc_payload.forEach((e) => {\n    var change_brightness = true;\n    if (e.state == \"off\") {\n        change_brightness = false;\n    } else if (msg.config.inc_or_dec == \"increase\") {\n        if (e.attributes.brightness >=\n                msg.config.new_brightness) {\n            change_brightness = false;\n        }\n    } else if (msg.config.inc_or_dec == \"decrease\") {\n        if (e.attributes.brightness <=\n                msg.config.new_brightness) {\n            change_brightness = false;\n        }\n    } else {\n        change_brightness = false;\n    }\n    \n    var cache_data;\n    if (change_brightness) {\n        const payload = {};\n        payload.domain = \"light\";\n        payload.service = \"turn_on\";\n        payload.data = {\n            entity_id: e.entity_id,\n            brightness: msg.config.new_brightness,\n        }\n        \n        cache_data = {\n            entity_id: e.entity_id,\n            state: \"on\",\n            brightness: msg.config.new_brightness\n        };\n        \n        new_payloads.push(payload);\n    } else {\n        if (e.state == \"off\") {\n            cache_data = {\n                entity_id: e.entity_id,\n                state: \"off\"\n            };\n        } else {\n            cache_data = {\n                entity_id: e.entity_id,\n                state: \"on\",\n                brightness: e.attributes.brightness\n            };\n        }\n    }\n    \n    new_cache_data[e.entity_id] = cache_data;\n});\n\nif (src_payload.length == new_payloads.length) {\n    msg.cache_data_new = {\n        all: {\n            state: \"on\",\n            brightness: msg.config.new_brightness\n        }\n    };\n    return [msg, null];\n}\n\nnew_msg = {\n    payload: new_payloads,\n    cache_data_new: {\n        individual: new_cache_data\n    }\n};\n\nreturn [null, new_msg];",
        "outputs": 2,
        "noerr": 0,
        "x": 1200,
        "y": 860,
        "wires": [
            [
                "96ddfb05.491268"
            ],
            [
                "47751839.0e3ee8"
            ]
        ]
    },
    {
        "id": "96ddfb05.491268",
        "type": "api-call-service",
        "z": "7a29c613.b063d8",
        "name": "Set brightness for all lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.living_room",
        "data": "{\t    \"brightness\": msg.config.new_brightness\t}",
        "dataType": "jsonata",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1480,
        "y": 820,
        "wires": [
            [
                "feabc652.6780b8"
            ]
        ]
    },
    {
        "id": "fa1fd5a5.cc0d48",
        "type": "api-call-service",
        "z": "7a29c613.b063d8",
        "name": "Set brightness for some lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "",
        "service": "",
        "entityId": "",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "payload",
        "output_location_type": "msg",
        "mustacheAltTags": false,
        "x": 1490,
        "y": 900,
        "wires": [
            [
                "4ef1ac4a.fd3614"
            ]
        ]
    },
    {
        "id": "820c4df9.ca0ea",
        "type": "switch",
        "z": "bc4cdd27.07d12",
        "name": "Is on button?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^on-[a-zA-Z\\-]+$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 400,
        "wires": [
            [
                "e5555214.29cd9",
                "cf0baee8.45f42"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "bdfc83d4.9d004",
        "type": "api-call-service",
        "z": "bc4cdd27.07d12",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Upstairs Bathroom Switch flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 2080,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "31098c1e.c1b234",
        "type": "comment",
        "z": "bc4cdd27.07d12",
        "name": "Philips Hue dimmer event codes / MQTT payloads",
        "info": "## Samsung switch events\n\n### Which button\n - 1xxx / on-<event>: On\n - 2xxx / up-<event>: Brighter\n - 3xxx / down/<event>: Darker\n - 4xxx / off-<event>: Off\n\n### Which event (deconz)\n - xxx0: Button down-press\n - xxx1: Periodic hold report (1 per sec)\n - xxx2: Button up-release (not held)\n - xxx3: Button up-release (after held)\n\n### Which event (zigbee2mqtt)\n - <btn>-press: Button single press and release\n - <btn>-hold: Button hold (1 per sec)\n - <btn>-hold-release: Button up-release (after held)",
        "x": 330,
        "y": 320,
        "wires": []
    },
    {
        "id": "ba7c746d.57ff28",
        "type": "switch",
        "z": "bc4cdd27.07d12",
        "name": "Is brighter button?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^up-[a-zA-Z\\-]+$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 530,
        "y": 600,
        "wires": [
            [
                "6cec8a8d.f7da44",
                "32eb1b22.e5f234"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "b1066a75.36a8b8",
        "type": "switch",
        "z": "bc4cdd27.07d12",
        "name": "Is darker button?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^down-[a-zA-Z\\-]+$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 530,
        "y": 800,
        "wires": [
            [
                "5e0b7800.bb81c8",
                "fce44320.0b488"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "5e54deaa.ff356",
        "type": "switch",
        "z": "bc4cdd27.07d12",
        "name": "Is off button?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^off-[a-zA-Z\\-]+$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 1000,
        "wires": [
            [
                "d5c128ee.86c3d8",
                "51d7d4f2.937f5c"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "e5555214.29cd9",
        "type": "switch",
        "z": "bc4cdd27.07d12",
        "name": "Is held?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-hold$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 740,
        "y": 360,
        "wires": [
            [
                "d90cb327.7605d"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "cf0baee8.45f42",
        "type": "switch",
        "z": "bc4cdd27.07d12",
        "name": "Was tapped?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-press$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 750,
        "y": 440,
        "wires": [
            [
                "d90cb327.7605d"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "6cec8a8d.f7da44",
        "type": "switch",
        "z": "bc4cdd27.07d12",
        "name": "Is held?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-hold$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 740,
        "y": 560,
        "wires": [
            [
                "92891f4.88410e"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "32eb1b22.e5f234",
        "type": "switch",
        "z": "bc4cdd27.07d12",
        "name": "Was tapped?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-press$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 750,
        "y": 640,
        "wires": [
            [
                "92891f4.88410e"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "5e0b7800.bb81c8",
        "type": "switch",
        "z": "bc4cdd27.07d12",
        "name": "Is held?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-hold$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 740,
        "y": 760,
        "wires": [
            [
                "eca1d1.f2a16e3"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "fce44320.0b488",
        "type": "switch",
        "z": "bc4cdd27.07d12",
        "name": "Was tapped?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-press$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 750,
        "y": 840,
        "wires": [
            [
                "eca1d1.f2a16e3"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "d5c128ee.86c3d8",
        "type": "switch",
        "z": "bc4cdd27.07d12",
        "name": "Is held?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-hold$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 740,
        "y": 960,
        "wires": [
            [
                "3d4f1b64.d3fdb4"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "51d7d4f2.937f5c",
        "type": "switch",
        "z": "bc4cdd27.07d12",
        "name": "Was tapped?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-press$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 750,
        "y": 1040,
        "wires": [
            [
                "fcba3ca1.0b313"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "567a2da5.82ad14",
        "type": "api-call-service",
        "z": "bc4cdd27.07d12",
        "name": "Turn on all upstairs bathroom lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.upstairs_bathroom",
        "data": "$flowContext('pending_brightness') ? {\t  'brightness': $flowContext('pending_brightness.brightness')\t} : {}",
        "dataType": "jsonata",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1580,
        "y": 400,
        "wires": [
            [
                "8c232c56.e74bc"
            ]
        ]
    },
    {
        "id": "4323a289.d98c8c",
        "type": "api-call-service",
        "z": "bc4cdd27.07d12",
        "name": "Turn off all upstairs bathroom lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_off",
        "entityId": "light.upstairs_bathroom",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1560,
        "y": 1040,
        "wires": [
            [
                "49c40833.49f1c8"
            ]
        ]
    },
    {
        "id": "115dde08.f75952",
        "type": "ha-get-entities",
        "z": "bc4cdd27.07d12",
        "server": "2f5bd1e0.67e40e",
        "name": "Get individual light states",
        "rules": [
            {
                "property": "",
                "logic": "jsonata",
                "value": "$exists($entity().attributes.is_hue_group) = false",
                "valueType": "jsonata"
            },
            {
                "property": "entity_id",
                "logic": "starts_with",
                "value": "light.",
                "valueType": "str"
            },
            {
                "property": "entity_id",
                "logic": "in_group",
                "value": "light.upstairs_bathroom_individual",
                "valueType": "str"
            }
        ],
        "output_type": "array",
        "output_empty_results": false,
        "output_location_type": "msg",
        "output_location": "payload",
        "output_results_count": 1,
        "x": 1190,
        "y": 620,
        "wires": [
            [
                "d300391.76a4fc8"
            ]
        ],
        "info": "This filters out hue groups since lights within a group may have different settings (which it looks like Hue just \"averages\" the settings to report a single number set for all of the lights)."
    },
    {
        "id": "e1bd8367.a5f03",
        "type": "function",
        "z": "bc4cdd27.07d12",
        "name": "Inc or dec brightness by 10%",
        "func": "var min_bright = null;\nvar max_bright = null;\nvar new_bright = null;\n\nvar inc_dec_pct = 0.1;\n\nconst src_payload = msg.payloads_merged;\n\n\nfunction inc_bright(old_bright) {\n    if (!old_bright) {\n        return null;\n    }\n    \n    // Add 1 in case off from last conversion\n    var old_bright_pct = (old_bright+1)/255;\n    var new_bright_pct = old_bright_pct + inc_dec_pct;\n    // Want to round to nearest 10%\n    new_bright_pct = Math.round(new_bright_pct*10)/10;\n    \n    var new_inc_bright = Math.round(new_bright_pct * 255);\n    new_inc_bright = Math.min(new_inc_bright, 255);\n    return new_inc_bright;\n}\n\n\nfunction dec_bright(old_bright) {\n    if (!old_bright) {\n        return null;\n    }\n    \n    // Subtract 1 in case off from last conversion\n    var old_bright_pct = (old_bright-1)/255;\n    var new_bright_pct = old_bright_pct - inc_dec_pct;\n    // Want to round to nearest 10%\n    new_bright_pct = Math.round(new_bright_pct*10)/10;\n    \n    var new_dec_bright = Math.round(new_bright_pct * 255);\n    new_dec_bright = Math.max(new_dec_bright, 1);\n    return new_dec_bright;\n}\n\n\nsrc_payload.forEach(function(value, index) {\n    if (!(value.attributes.brightness)) {\n        return;\n    }\n    \n    if (min_bright===null ||\n            value.attributes.brightness < min_bright) {\n        min_bright = value.attributes.brightness;\n    }\n    \n    if (max_bright===null ||\n            value.attributes.brightness > max_bright) {\n        max_bright = value.attributes.brightness;\n    }\n})\n\n\nif (msg.config.inc_or_dec == \"increase\") {\n    new_bright = inc_bright(min_bright)\n} else if (msg.config.inc_or_dec == \"decrease\") {\n    new_bright = dec_bright(max_bright)\n}\n// Else leave new_bright as null\n\nif (new_bright===null) {\n    return null;\n}\n\nmsg.config.new_brightness = new_bright;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1240,
        "y": 700,
        "wires": [
            [
                "b020e374.198e8"
            ]
        ]
    },
    {
        "id": "92891f4.88410e",
        "type": "change",
        "z": "bc4cdd27.07d12",
        "name": "Flag to increase",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "config.inc_or_dec",
                "pt": "msg",
                "to": "increase",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 560,
        "wires": [
            [
                "115dde08.f75952"
            ]
        ]
    },
    {
        "id": "eca1d1.f2a16e3",
        "type": "change",
        "z": "bc4cdd27.07d12",
        "name": "Flag to decrease",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "config.inc_or_dec",
                "pt": "msg",
                "to": "decrease",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 760,
        "wires": [
            [
                "115dde08.f75952"
            ]
        ]
    },
    {
        "id": "b020e374.198e8",
        "type": "function",
        "z": "bc4cdd27.07d12",
        "name": "All or individual lights?",
        "func": "var new_payloads = [];\nvar new_cache_data = {};\n\nconst src_payload = msg.payloads_merged;\n\n\nsrc_payload.forEach((e) => {\n    var change_brightness = true;\n    if (e.state == \"off\") {\n        change_brightness = false;\n    } else if (msg.config.inc_or_dec == \"increase\") {\n        if (e.attributes.brightness >=\n                msg.config.new_brightness) {\n            change_brightness = false;\n        }\n    } else if (msg.config.inc_or_dec == \"decrease\") {\n        if (e.attributes.brightness <=\n                msg.config.new_brightness) {\n            change_brightness = false;\n        }\n    } else {\n        change_brightness = false;\n    }\n    \n    var cache_data;\n    if (change_brightness) {\n        const payload = {};\n        payload.domain = \"light\";\n        payload.service = \"turn_on\";\n        payload.data = {\n            entity_id: e.entity_id,\n            brightness: msg.config.new_brightness,\n        }\n        \n        cache_data = {\n            entity_id: e.entity_id,\n            state: \"on\",\n            brightness: msg.config.new_brightness\n        };\n        \n        new_payloads.push(payload);\n    } else {\n        if (e.state == \"off\") {\n            cache_data = {\n                entity_id: e.entity_id,\n                state: \"off\"\n            };\n        } else {\n            cache_data = {\n                entity_id: e.entity_id,\n                state: \"on\",\n                brightness: e.attributes.brightness\n            };\n        }\n    }\n    \n    new_cache_data[e.entity_id] = cache_data;\n});\n\nif (src_payload.length == new_payloads.length) {\n    msg.cache_data_new = {\n        all: {\n            state: \"on\",\n            brightness: msg.config.new_brightness\n        }\n    };\n    return [msg, null];\n}\n\nnew_msg = {\n    payload: new_payloads,\n    cache_data_new: {\n        individual: new_cache_data\n    }\n};\n\nreturn [null, new_msg];",
        "outputs": 2,
        "noerr": 0,
        "x": 1260,
        "y": 760,
        "wires": [
            [
                "8bc9ac76.7fa38"
            ],
            [
                "4748e2a6.99145c"
            ]
        ]
    },
    {
        "id": "8bc9ac76.7fa38",
        "type": "api-call-service",
        "z": "bc4cdd27.07d12",
        "name": "Set brightness for all lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.upstairs_bathroom",
        "data": "{\t    \"brightness\": msg.config.new_brightness\t}",
        "dataType": "jsonata",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1540,
        "y": 720,
        "wires": [
            [
                "49c40833.49f1c8"
            ]
        ]
    },
    {
        "id": "70a23297.261e4c",
        "type": "api-call-service",
        "z": "bc4cdd27.07d12",
        "name": "Set brightness for some lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "",
        "service": "",
        "entityId": "",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "payload",
        "output_location_type": "msg",
        "mustacheAltTags": false,
        "x": 1550,
        "y": 800,
        "wires": [
            [
                "b11361dd.f5c02"
            ]
        ]
    },
    {
        "id": "c8fcfd1e.3c3f9",
        "type": "ha-get-entities",
        "z": "bc4cdd27.07d12",
        "server": "2f5bd1e0.67e40e",
        "name": "Get individual light states",
        "rules": [
            {
                "property": "",
                "logic": "jsonata",
                "value": "$exists($entity().attributes.is_hue_group) = false",
                "valueType": "jsonata"
            },
            {
                "property": "entity_id",
                "logic": "starts_with",
                "value": "light.",
                "valueType": "str"
            },
            {
                "property": "entity_id",
                "logic": "in_group",
                "value": "light.upstairs_bathroom_individual",
                "valueType": "str"
            }
        ],
        "output_type": "array",
        "output_empty_results": false,
        "output_location_type": "msg",
        "output_location": "payload",
        "output_results_count": 1,
        "x": 1190,
        "y": 220,
        "wires": [
            [
                "80893134.dc2fb"
            ]
        ],
        "info": "This filters out hue groups since lights within a group may have different settings (which it looks like Hue just \"averages\" the settings to report a single number set for all of the lights)."
    },
    {
        "id": "78e7e8a1.515548",
        "type": "function",
        "z": "bc4cdd27.07d12",
        "name": "Which lights / brightness (or all)?",
        "func": "// 0, 3 not expected to be used\nconst light_on_config = {\n    0: [],\n    1: ['light.upstairs_bathroom_middle'],\n    2: ['light.upstairs_bathroom_left',\n            'light.upstairs_bathroom_right'],\n    3: ['light.upstairs_bathroom_left',\n            'light.upstairs_bathroom_middle',\n            'light.upstairs_bathroom_right'],\n};\n\nvar new_payloads = [];\nvar new_cache_data = {};\n\nconst num_lights_max = 3;\nvar num_lights_total = 0;\nvar num_lights_on = 0;\n\n\nconst src_payload = msg.payloads_merged;\n\n\nsrc_payload.forEach((e) => {\n    num_lights_total += 1;\n    if (e.state == 'on') {\n        num_lights_on +=1 ;\n    }\n});\n\n\nif (num_lights_on + 1 >= num_lights_total ||\n        num_lights_on < 0 ||\n        num_lights_total > num_lights_max) {\n    // Store individual cache -- have it, easier\n    src_payload.forEach((e) => {\n        var e_cache = {};\n        Object.assign(e_cache, e);\n        e_cache.state = \"on\";\n        new_cache_data[e.entity_id] = e_cache;\n    });\n    msg.cache_data_new = {\n        individual: new_cache_data\n    };\n    \n    // Route to turn on all lights\n    return [null, msg];\n}\n\n\nfunction add_brightness(entity, payload) {\n    if (!flow.get('pending_brightness')) {\n        return;\n    }\n    \n    var pending_lights = flow.get('pending_brightness.pending_lights');\n    var pending_index = pending_lights.indexOf(entity.entity_id);\n    if (pending_index == -1) {\n        return;\n    }\n    \n    payload.data.brightness = flow.get('pending_brightness.brightness');\n    // Delete pending light from list\n    pending_lights.splice(pending_index, 1);\n    \n    if (pending_lights.length === 0) {\n        flow.set('pending_brightness', undefined);\n    }\n}\n\n\nfunction build_payload(entity, turn_on) {\n    const payload = {};\n    payload.domain = 'light';\n    \n    if (turn_on) {\n        payload.service = 'turn_on';\n    } else {\n        payload.service = 'turn_off';\n    }\n    \n    payload.data = {\n        entity_id: entity.entity_id\n    };\n    \n    if (turn_on) {\n        add_brightness(entity, payload);\n    }\n    \n    return payload;\n}\n\n\nfunction build_new_cache(src_entity, payload) {\n    const e_cache = {};\n    e_cache.entity_id = payload.data.entity_id;\n    e_cache.state = payload.service.substring(5);\n    \n    if (e_cache.state == \"on\") {\n        if (\"brightness\" in payload.data) {\n            e_cache.brightness =\n                    payload.data.brightness;\n        } else if (\"brightness\" in\n                src_entity.attributes) {\n            e_cache.brightness =\n                    src_entity.attributes.brightness;\n        }\n    }\n    return e_cache;\n}\n\n\nconst desired_lights_on = light_on_config[num_lights_on+1];\n\nfunction add_light_msgs(turn_on) {\n    src_payload.forEach((e) => {\n        if ((desired_lights_on.includes(e.entity_id) &&\n                turn_on) || (!turn_on &&\n                !desired_lights_on.includes(e.entity_id))) {\n            const payload = build_payload(e, turn_on);\n            new_payloads.push(payload);\n            const e_cache = build_new_cache(e,\n                    payload);\n            new_cache_data[e.entity_id] = e_cache;\n        }\n    });\n}\n\n// Want on first in case overload hub\nadd_light_msgs(true);\nadd_light_msgs(false);\nnew_msg = {\n    payload: new_payloads,\n    cache_data_new: new_cache_data\n};\nreturn [new_msg, null];\n",
        "outputs": 2,
        "noerr": 0,
        "x": 1270,
        "y": 340,
        "wires": [
            [
                "35e40288.ede27e"
            ],
            [
                "fdc8e3dd.02692"
            ]
        ]
    },
    {
        "id": "65edb766.1b0748",
        "type": "api-call-service",
        "z": "bc4cdd27.07d12",
        "name": "Set brightness for some lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "",
        "service": "",
        "entityId": "",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "payload",
        "output_location_type": "msg",
        "mustacheAltTags": false,
        "x": 1610,
        "y": 280,
        "wires": [
            [
                "a6d2f398.8e406"
            ]
        ]
    },
    {
        "id": "d90cb327.7605d",
        "type": "time-range-switch",
        "z": "bc4cdd27.07d12",
        "name": "Is night-light time?",
        "lat": "",
        "lon": "",
        "startTime": "21:00",
        "endTime": "04:30",
        "startOffset": 0,
        "endOffset": 0,
        "x": 970,
        "y": 360,
        "wires": [
            [
                "c8fcfd1e.3c3f9"
            ],
            [
                "cc34ce75.e30b8"
            ]
        ]
    },
    {
        "id": "b57bcf8f.84fe4",
        "type": "inject",
        "z": "bc4cdd27.07d12",
        "name": "Day ended, Night started",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "00 21 * * *",
        "once": false,
        "onceDelay": 0.1,
        "x": 310,
        "y": 140,
        "wires": [
            [
                "bc8c9712.d4dcb8"
            ]
        ]
    },
    {
        "id": "145d75d.9914d8a",
        "type": "inject",
        "z": "bc4cdd27.07d12",
        "name": "Day started, Night ended",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "30 04 * * *",
        "once": false,
        "onceDelay": 0.1,
        "x": 310,
        "y": 200,
        "wires": [
            [
                "2a862f25.f1b53"
            ]
        ]
    },
    {
        "id": "bc8c9712.d4dcb8",
        "type": "function",
        "z": "bc4cdd27.07d12",
        "name": "Queue night brightness",
        "func": "var data = {}\n\ndata.brightness = 20;\ndata.pending_lights = [\n        'light.upstairs_bathroom_left',\n        'light.upstairs_bathroom_middle',\n        'light.upstairs_bathroom_right',\n];\ndata.pending_clear = false;\n\nflow.set('pending_brightness', data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 610,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "2a862f25.f1b53",
        "type": "function",
        "z": "bc4cdd27.07d12",
        "name": "Queue day brightness",
        "func": "var data = {}\n\ndata.brightness = Math.round(255*0.8);\ndata.pending_lights = [\n        'light.upstairs_bathroom_left',\n        'light.upstairs_bathroom_middle',\n        'light.upstairs_bathroom_right',\n];\ndata.pending_clear = false;\n\nflow.set('pending_brightness', data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "8c232c56.e74bc",
        "type": "function",
        "z": "bc4cdd27.07d12",
        "name": "Clear executed pending brightness",
        "func": "if (flow.get('pending_brightness.pending_clear') === true) {\n    flow.set('pending_brightness', undefined);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1640,
        "y": 480,
        "wires": [
            [
                "49c40833.49f1c8"
            ]
        ]
    },
    {
        "id": "fdc8e3dd.02692",
        "type": "function",
        "z": "bc4cdd27.07d12",
        "name": "Flag to clear pending brightness",
        "func": "if (flow.get('pending_brightness')) {\n    flow.set('pending_brightness.pending_clear', true);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1270,
        "y": 400,
        "wires": [
            [
                "567a2da5.82ad14"
            ]
        ]
    },
    {
        "id": "7a632496.3b0ccc",
        "type": "server-events",
        "z": "b9e6e1b8.4fd",
        "name": "Alexa Actionable Notification",
        "server": "2f5bd1e0.67e40e",
        "event_type": "alexa_actionable_notification",
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "x": 300,
        "y": 520,
        "wires": [
            [
                "8bb05090.e0387",
                "270460c5.90df7"
            ]
        ]
    },
    {
        "id": "8bb05090.e0387",
        "type": "switch",
        "z": "b9e6e1b8.4fd",
        "name": "Event IDs",
        "property": "payload.event.event_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "actionable_notification_event_name",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "actionable_notification_another_name",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "actionable_notification_event_cascade1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "actionable_notification_event_cascade2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "more",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "even more",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 500,
        "y": 520,
        "wires": [
            [
                "ca61ef8b.773a7"
            ],
            [
                "99f6f0d4.49a1b"
            ],
            [
                "79eb093d.bd9c38"
            ],
            [
                "d00fa421.51d158"
            ],
            [],
            []
        ]
    },
    {
        "id": "847176eb.c082c8",
        "type": "link in",
        "z": "b9e6e1b8.4fd",
        "name": "1",
        "links": [
            "ca61ef8b.773a7"
        ],
        "x": 1155,
        "y": 400,
        "wires": [
            [
                "7e686526.2a917c"
            ]
        ]
    },
    {
        "id": "ca61ef8b.773a7",
        "type": "link out",
        "z": "b9e6e1b8.4fd",
        "name": "1",
        "links": [
            "847176eb.c082c8"
        ],
        "x": 615,
        "y": 480,
        "wires": []
    },
    {
        "id": "c98b610f.6e334",
        "type": "bigtimer",
        "z": "b9e6e1b8.4fd",
        "outtopic": "",
        "outpayload1": "On",
        "outpayload2": "",
        "name": "Timer Based",
        "comment": "",
        "starttime": "720",
        "endtime": "0",
        "starttime2": 0,
        "endtime2": 0,
        "startoff": 0,
        "endoff": 0,
        "startoff2": 0,
        "endoff2": 0,
        "offs": 0,
        "outtext1": "",
        "outtext2": "",
        "timeout": 1440,
        "sun": true,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "jan": true,
        "feb": true,
        "mar": true,
        "apr": true,
        "may": true,
        "jun": true,
        "jul": true,
        "aug": true,
        "sep": true,
        "oct": true,
        "nov": true,
        "dec": true,
        "day1": 0,
        "month1": 0,
        "day2": 0,
        "month2": 0,
        "day3": 0,
        "month3": 0,
        "day4": 0,
        "month4": 0,
        "day5": 0,
        "month5": 0,
        "day6": 0,
        "month6": 0,
        "day7": "",
        "month7": "",
        "day8": "",
        "month8": "",
        "day9": "",
        "month9": "",
        "day10": "",
        "month10": "",
        "day11": "",
        "month11": "",
        "day12": "",
        "month12": "",
        "d1": 0,
        "w1": 0,
        "d2": 0,
        "w2": 0,
        "d3": 0,
        "w3": 0,
        "d4": 0,
        "w4": 0,
        "d5": 0,
        "w5": 0,
        "d6": 0,
        "w6": 0,
        "xday1": 0,
        "xmonth1": 0,
        "xday2": 0,
        "xmonth2": 0,
        "xday3": 0,
        "xmonth3": 0,
        "xday4": 0,
        "xmonth4": 0,
        "xday5": 0,
        "xmonth5": 0,
        "xday6": 0,
        "xmonth6": 0,
        "xd1": 0,
        "xw1": 0,
        "xd2": 0,
        "xw2": 0,
        "xd3": 0,
        "xw3": 0,
        "xd4": 0,
        "xw4": 0,
        "xd5": 0,
        "xw5": 0,
        "xd6": 0,
        "xw6": 0,
        "suspend": false,
        "random": false,
        "repeat": false,
        "atstart": false,
        "odd": false,
        "even": false,
        "x": 610,
        "y": 760,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "6ad0e2d3.0a0a3c",
        "type": "api-call-service",
        "z": "b9e6e1b8.4fd",
        "name": "Ask",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "script",
        "service": "activate_alexa_actionable_notification",
        "entityId": "",
        "data": "{\"text\":\"Place a Question Here 2\",\"event_id\":\"actionable_notification_another_name\",\"alexa_device\":\"media_player.jonathan_s_master_bedroom_echo_dot\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 790,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "9ad7a673.7e1088",
        "type": "switch",
        "z": "b9e6e1b8.4fd",
        "name": "Responses",
        "property": "payload.event.event_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ResponseYes",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ResponseNo",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ResponseNone",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1310,
        "y": 740,
        "wires": [
            [
                "6e57e326.6ef15c"
            ],
            [
                "18d225c0.03d73a"
            ],
            [
                "a90bf19c.3a913"
            ]
        ]
    },
    {
        "id": "99f6f0d4.49a1b",
        "type": "link out",
        "z": "b9e6e1b8.4fd",
        "name": "2",
        "links": [
            "67f074ca.3a573c"
        ],
        "x": 715,
        "y": 500,
        "wires": []
    },
    {
        "id": "67f074ca.3a573c",
        "type": "link in",
        "z": "b9e6e1b8.4fd",
        "name": "2",
        "links": [
            "99f6f0d4.49a1b"
        ],
        "x": 895,
        "y": 920,
        "wires": [
            [
                "dd2d3bd6.12ea18"
            ]
        ]
    },
    {
        "id": "eee11a21.e0e128",
        "type": "api-call-service",
        "z": "b9e6e1b8.4fd",
        "name": "Ask",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "script",
        "service": "activate_alexa_actionable_notification",
        "entityId": "",
        "data": "{\"text\":\"Place a Question Here\",\"event_id\":\"actionable_notification_event_name\",\"alexa_device\":\"media_player.jonathan_s_master_bedroom_echo_dot\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1390,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "11f01d32.b07eb3",
        "type": "server-state-changed",
        "z": "b9e6e1b8.4fd",
        "d": true,
        "name": "What do you want to be the trigger",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "light.office",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "na",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "x": 1040,
        "y": 220,
        "wires": [
            [
                "eee11a21.e0e128"
            ],
            []
        ]
    },
    {
        "id": "de118a42.23d428",
        "type": "comment",
        "z": "b9e6e1b8.4fd",
        "name": "Copy these response portions as many times as needed, for as many automations that you want",
        "info": "",
        "x": 1290,
        "y": 340,
        "wires": []
    },
    {
        "id": "7c4f2967.e16478",
        "type": "comment",
        "z": "b9e6e1b8.4fd",
        "name": "Change what happens for each response based on what you want to happen (call service, for example)",
        "info": "",
        "x": 1570,
        "y": 620,
        "wires": []
    },
    {
        "id": "1ef5b97a.37a117",
        "type": "comment",
        "z": "b9e6e1b8.4fd",
        "name": "Just add the specific EVENT_ID here that matches what is in the \"Ask\" node then pipe it out to its corrisponding \"Responses\" node",
        "info": "",
        "x": 510,
        "y": 420,
        "wires": []
    },
    {
        "id": "944095ee.6028b8",
        "type": "comment",
        "z": "b9e6e1b8.4fd",
        "name": "In the \"Ask\" node it gives directions on how to fill it out",
        "info": "",
        "x": 1360,
        "y": 140,
        "wires": []
    },
    {
        "id": "a395be52.9e19b",
        "type": "comment",
        "z": "b9e6e1b8.4fd",
        "name": "Another example with a timer",
        "info": "",
        "x": 700,
        "y": 700,
        "wires": []
    },
    {
        "id": "dd2d3bd6.12ea18",
        "type": "switch",
        "z": "b9e6e1b8.4fd",
        "name": "Person IDs",
        "property": "payload.event.event_person_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "person1",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "person2",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1010,
        "y": 920,
        "wires": [
            [
                "9ad7a673.7e1088"
            ],
            [
                "96f3fff.7a8e6"
            ],
            [
                "24910205.cb504e"
            ]
        ]
    },
    {
        "id": "29fbfaaf.5c8486",
        "type": "comment",
        "z": "b9e6e1b8.4fd",
        "name": "Place the unique Person IDs here",
        "info": "",
        "x": 990,
        "y": 860,
        "wires": []
    },
    {
        "id": "6ca44931.794008",
        "type": "comment",
        "z": "b9e6e1b8.4fd",
        "name": "A blank Person ID will allow a response from anyone",
        "info": "",
        "x": 990,
        "y": 1000,
        "wires": []
    },
    {
        "id": "270460c5.90df7",
        "type": "debug",
        "z": "b9e6e1b8.4fd",
        "name": "Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 250,
        "y": 600,
        "wires": []
    },
    {
        "id": "1c24895.c2c7277",
        "type": "comment",
        "z": "b9e6e1b8.4fd",
        "name": "Debug node is only needed to get the exact Person ID",
        "info": "",
        "x": 260,
        "y": 660,
        "wires": []
    },
    {
        "id": "fe7b0bb1.7be5f8",
        "type": "comment",
        "z": "b9e6e1b8.4fd",
        "name": "Once IDs are obtained for each person this node can be deleted",
        "info": "",
        "x": 290,
        "y": 700,
        "wires": []
    },
    {
        "id": "7e686526.2a917c",
        "type": "switch",
        "z": "b9e6e1b8.4fd",
        "name": "Responses",
        "property": "payload.event.event_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ResponseYes",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ResponseNo",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ResponseNone",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1270,
        "y": 400,
        "wires": [
            [
                "e56e7788.c12e18"
            ],
            [
                "3148c510.60797a"
            ],
            [
                "6efb91ce.3e7dd"
            ]
        ]
    },
    {
        "id": "6efb91ce.3e7dd",
        "type": "api-call-service",
        "z": "b9e6e1b8.4fd",
        "name": "What you want when NOTHING is said",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "toggle",
        "entityId": "light.office_window",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1600,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "96f3fff.7a8e6",
        "type": "switch",
        "z": "b9e6e1b8.4fd",
        "name": "Responses",
        "property": "payload.event.event_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ResponseYes",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ResponseNo",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ResponseNone",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1310,
        "y": 880,
        "wires": [
            [
                "911c99bf.6630f8"
            ],
            [
                "3ddaf1d1.faed8e"
            ],
            [
                "445a66ae.260ec8"
            ]
        ]
    },
    {
        "id": "24910205.cb504e",
        "type": "switch",
        "z": "b9e6e1b8.4fd",
        "name": "Responses",
        "property": "payload.event.event_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ResponseYes",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ResponseNo",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ResponseNone",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1310,
        "y": 1040,
        "wires": [
            [
                "e83f04af.9cd2e8"
            ],
            [
                "1b4b96e3.8bbea9"
            ],
            [
                "8227225e.40119"
            ]
        ]
    },
    {
        "id": "3b01d7a2.3b6758",
        "type": "comment",
        "z": "b9e6e1b8.4fd",
        "name": "Cascade example",
        "info": "",
        "x": 410,
        "y": 1120,
        "wires": []
    },
    {
        "id": "31316ea9.c8b9a2",
        "type": "api-call-service",
        "z": "b9e6e1b8.4fd",
        "name": "Ask",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "script",
        "service": "activate_alexa_actionable_notification",
        "entityId": "",
        "data": "{\"text\":\"Place a Question Here 3\",\"event_id\":\"actionable_notification_event_cascade1\",\"alexa_device\":\"media_player.jonathan_s_master_bedroom_echo_dot\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 470,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "d641d7b9.0c9568",
        "type": "server-state-changed",
        "z": "b9e6e1b8.4fd",
        "d": true,
        "name": "What do you want to be the trigger",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "light.office",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "na",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "x": 240,
        "y": 1200,
        "wires": [
            [
                "31316ea9.c8b9a2"
            ],
            []
        ]
    },
    {
        "id": "79eb093d.bd9c38",
        "type": "link out",
        "z": "b9e6e1b8.4fd",
        "name": "3",
        "links": [
            "44b993d6.e17b9c"
        ],
        "x": 735,
        "y": 560,
        "wires": []
    },
    {
        "id": "44b993d6.e17b9c",
        "type": "link in",
        "z": "b9e6e1b8.4fd",
        "name": "3",
        "links": [
            "79eb093d.bd9c38"
        ],
        "x": 155,
        "y": 1320,
        "wires": [
            [
                "da3bbbce.f84378"
            ]
        ]
    },
    {
        "id": "da3bbbce.f84378",
        "type": "switch",
        "z": "b9e6e1b8.4fd",
        "name": "Responses",
        "property": "payload.event.event_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ResponseYes",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ResponseNo",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ResponseNone",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 265,
        "y": 1320,
        "wires": [
            [
                "fe58eec1.b6ba6"
            ],
            [
                "bbbd587d.d373e8"
            ],
            [
                "7b226cbf.073504"
            ]
        ]
    },
    {
        "id": "fe58eec1.b6ba6",
        "type": "api-call-service",
        "z": "b9e6e1b8.4fd",
        "name": "What you want when YES is said",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "toggle",
        "entityId": "light.office_closet_switch",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 560,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "7b226cbf.073504",
        "type": "api-call-service",
        "z": "b9e6e1b8.4fd",
        "name": "What you want when NO is said",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "toggle",
        "entityId": "light.office_entry",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 535,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "bbbd587d.d373e8",
        "type": "api-call-service",
        "z": "b9e6e1b8.4fd",
        "name": "Ask",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "script",
        "service": "activate_alexa_actionable_notification",
        "entityId": "",
        "data": "{\"text\":\"Place a Question Here 5\",\"event_id\":\"actionable_notification_event_cascade2\",\"alexa_device\":\"media_player.jonathan_s_master_bedroom_echo_dot\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 465,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "d00fa421.51d158",
        "type": "link out",
        "z": "b9e6e1b8.4fd",
        "name": "4",
        "links": [
            "d944b966.139ce8"
        ],
        "x": 620,
        "y": 620,
        "wires": []
    },
    {
        "id": "d944b966.139ce8",
        "type": "link in",
        "z": "b9e6e1b8.4fd",
        "name": "4",
        "links": [
            "d00fa421.51d158"
        ],
        "x": 155,
        "y": 1520,
        "wires": [
            [
                "bd237b69.13a1f8"
            ]
        ]
    },
    {
        "id": "bd237b69.13a1f8",
        "type": "switch",
        "z": "b9e6e1b8.4fd",
        "name": "Responses",
        "property": "payload.event.event_response",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ResponseYes",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ResponseNo",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ResponseNone",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 270,
        "y": 1520,
        "wires": [
            [
                "de404974.713278"
            ],
            [
                "85ac37ce.18bc68"
            ],
            [
                "a39de1cc.55749"
            ]
        ]
    },
    {
        "id": "de404974.713278",
        "type": "api-call-service",
        "z": "b9e6e1b8.4fd",
        "name": "What you want when YES is said",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "toggle",
        "entityId": "light.office_window",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 555,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "85ac37ce.18bc68",
        "type": "api-call-service",
        "z": "b9e6e1b8.4fd",
        "name": "What you want when NO is said",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "toggle",
        "entityId": "light.office_window",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 550,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "db618301.403f5",
        "type": "comment",
        "z": "b9e6e1b8.4fd",
        "name": "Cascade first device",
        "info": "",
        "x": 250,
        "y": 1260,
        "wires": []
    },
    {
        "id": "2ed4e8e1.041208",
        "type": "comment",
        "z": "b9e6e1b8.4fd",
        "name": "Cascade second device",
        "info": "",
        "x": 260,
        "y": 1460,
        "wires": []
    },
    {
        "id": "68b5a33a.98ae6c",
        "type": "comment",
        "z": "b9e6e1b8.4fd",
        "name": "This example loops between two devices forever until it gets a response from one of them",
        "info": "",
        "x": 370,
        "y": 1620,
        "wires": []
    },
    {
        "id": "a39de1cc.55749",
        "type": "api-call-service",
        "z": "b9e6e1b8.4fd",
        "name": "Ask",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "script",
        "service": "activate_alexa_actionable_notification",
        "entityId": "",
        "data": "{\"text\":\"Place a Question Here 6\",\"event_id\":\"actionable_notification_event_cascade1\",\"alexa_device\":\"media_player.jonathan_s_master_bedroom_echo_dot\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 470,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "4827f306.d7809c",
        "type": "comment",
        "z": "b9e6e1b8.4fd",
        "name": "Add more to extend loop",
        "info": "",
        "x": 350,
        "y": 1660,
        "wires": []
    },
    {
        "id": "e56e7788.c12e18",
        "type": "api-call-service",
        "z": "b9e6e1b8.4fd",
        "name": "What you want when YES is said",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "toggle",
        "entityId": "light.office_closet_switch",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1580,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "3148c510.60797a",
        "type": "api-call-service",
        "z": "b9e6e1b8.4fd",
        "name": "What you want when NO is said",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "toggle",
        "entityId": "light.office_entry",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1570,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "a90bf19c.3a913",
        "type": "api-call-service",
        "z": "b9e6e1b8.4fd",
        "name": "What you want when NOTHING is said",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "toggle",
        "entityId": "light.office_window",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1610,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "6e57e326.6ef15c",
        "type": "api-call-service",
        "z": "b9e6e1b8.4fd",
        "name": "What you want when YES is said",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "toggle",
        "entityId": "light.office_closet_switch",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1590,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "18d225c0.03d73a",
        "type": "api-call-service",
        "z": "b9e6e1b8.4fd",
        "name": "What you want when NO is said",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "toggle",
        "entityId": "light.office_entry",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1580,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "445a66ae.260ec8",
        "type": "api-call-service",
        "z": "b9e6e1b8.4fd",
        "name": "What you want when NOTHING is said",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "toggle",
        "entityId": "light.office_window",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1670,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "911c99bf.6630f8",
        "type": "api-call-service",
        "z": "b9e6e1b8.4fd",
        "name": "What you want when YES is said",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "toggle",
        "entityId": "light.office_closet_switch",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1650,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "3ddaf1d1.faed8e",
        "type": "api-call-service",
        "z": "b9e6e1b8.4fd",
        "name": "What you want when NO is said",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "toggle",
        "entityId": "light.office_entry",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1640,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "8227225e.40119",
        "type": "api-call-service",
        "z": "b9e6e1b8.4fd",
        "name": "What you want when NOTHING is said",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "toggle",
        "entityId": "light.office_window",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1710,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "e83f04af.9cd2e8",
        "type": "api-call-service",
        "z": "b9e6e1b8.4fd",
        "name": "What you want when YES is said",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "toggle",
        "entityId": "light.office_closet_switch",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1690,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "1b4b96e3.8bbea9",
        "type": "api-call-service",
        "z": "b9e6e1b8.4fd",
        "name": "What you want when NO is said",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "toggle",
        "entityId": "light.office_entry",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1680,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "cc81c4ae.d77aa8",
        "type": "inject",
        "z": "b9e6e1b8.4fd",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 180,
        "y": 1140,
        "wires": [
            [
                "31316ea9.c8b9a2"
            ]
        ]
    },
    {
        "id": "59ff173a.a41758",
        "type": "inject",
        "z": "b9e6e1b8.4fd",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 1060,
        "y": 180,
        "wires": [
            [
                "eee11a21.e0e128"
            ]
        ]
    },
    {
        "id": "c2c748e2.645f88",
        "type": "server-state-changed",
        "z": "392db80.c724a48",
        "name": "Requested?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_boolean.request_alexa_wheres_the_beer",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "x": 170,
        "y": 220,
        "wires": [
            [
                "e9183cf0.bcf87",
                "5bb24db4.6a76a4"
            ],
            []
        ]
    },
    {
        "id": "e9183cf0.bcf87",
        "type": "api-call-service",
        "z": "392db80.c724a48",
        "name": "Cleared request flag",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "input_boolean",
        "service": "turn_off",
        "entityId": "input_boolean.request_alexa_wheres_the_beer",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 420,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "e41ac9ce.5953e8",
        "type": "api-call-service",
        "z": "392db80.c724a48",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Alexa, Where's the Beer flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 840,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "5bb24db4.6a76a4",
        "type": "api-call-service",
        "z": "392db80.c724a48",
        "name": "Update last called Alexa",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "alexa_media",
        "service": "update_last_called",
        "entityId": "",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 420,
        "y": 220,
        "wires": [
            [
                "a303f65c.3c3028"
            ]
        ]
    },
    {
        "id": "84412271.2da62",
        "type": "api-call-service",
        "z": "392db80.c724a48",
        "name": "Give directions from upstairs",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": true,
        "service_domain": "notify",
        "service": "alexa_media",
        "entityId": "",
        "data": "{\"target\":[\"{{ payload }}\"],\"message\":\"Go downstairs and take a right at the bottom.  It is the last door on the right, past the bathroom.\",\"data\":{\"type\":\"announce\",\"method\":\"all\"}}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 500,
        "y": 340,
        "wires": [
            [
                "e41ac9ce.5953e8"
            ]
        ]
    },
    {
        "id": "123351a6.947bae",
        "type": "switch",
        "z": "392db80.c724a48",
        "name": "Which Alexa device?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "media_player.alexa_master_bedroom",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "media_player.alexa_dining_room",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "media_player.alexa_office",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "media_player.alexa_living_room",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "media_player.alexa_alexa_apps_jc",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "media_player.alexa_note_10_jc",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 200,
        "y": 400,
        "wires": [
            [
                "84412271.2da62"
            ],
            [
                "84412271.2da62"
            ],
            [
                "84412271.2da62"
            ],
            [
                "6bd63b6e.190684"
            ],
            [
                "3c5232b6.6bf90e"
            ],
            [
                "3c5232b6.6bf90e"
            ],
            [
                "3c5232b6.6bf90e"
            ]
        ]
    },
    {
        "id": "a303f65c.3c3028",
        "type": "api-current-state",
        "z": "392db80.c724a48",
        "name": "Get last called Alexa device",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "sensor.last_alexa",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 740,
        "y": 220,
        "wires": [
            [
                "123351a6.947bae"
            ]
        ]
    },
    {
        "id": "6bd63b6e.190684",
        "type": "api-call-service",
        "z": "392db80.c724a48",
        "name": "Give directions from downstairs",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": true,
        "service_domain": "notify",
        "service": "alexa_media",
        "entityId": "",
        "data": "{\"target\":[\"{{ payload }}\"],\"message\":\"Walk from the living room down the hallway.  It is the last door on the right, past the bathroom.\",\"data\":{\"type\":\"announce\",\"method\":\"all\"}}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 510,
        "y": 400,
        "wires": [
            [
                "e41ac9ce.5953e8"
            ]
        ]
    },
    {
        "id": "3c5232b6.6bf90e",
        "type": "api-call-service",
        "z": "392db80.c724a48",
        "name": "Report unknown location",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": true,
        "service_domain": "notify",
        "service": "alexa_media",
        "entityId": "",
        "data": "{\"target\":[\"{{ payload }}\"],\"message\":\"Sorry, I do not know where you are, but I hope you find your beer, and yourself.\",\"data\":{\"type\":\"announce\",\"method\":\"all\"}}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 490,
        "y": 460,
        "wires": [
            [
                "e41ac9ce.5953e8"
            ]
        ]
    },
    {
        "id": "6ff9a31.ea1615c",
        "type": "server-state-changed",
        "z": "a28e9600.dc1528",
        "name": "Flagged to finish workout?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "input_boolean.pending_workout_finish",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "habool",
        "haltifstate": "true",
        "halt_if_type": "bool",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "x": 150,
        "y": 460,
        "wires": [
            [
                "eb7e7599.5b5708",
                "fc9e38e0.a3b1e8",
                "3f3a9430.ebfdcc"
            ],
            []
        ]
    },
    {
        "id": "eb7e7599.5b5708",
        "type": "api-current-state",
        "z": "a28e9600.dc1528",
        "name": "Is yamaha on?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "off",
        "halt_if_type": "str",
        "halt_if_compare": "is_not",
        "override_topic": false,
        "entity_id": "media_player.yamaha_receiver",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 420,
        "y": 500,
        "wires": [
            [
                "67b02314.fbc45c"
            ],
            []
        ]
    },
    {
        "id": "67b02314.fbc45c",
        "type": "api-call-service",
        "z": "a28e9600.dc1528",
        "name": "Pause Airplay",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "media_player",
        "service": "media_pause",
        "entityId": "media_player.yamaha_receiver",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 640,
        "y": 500,
        "wires": [
            [
                "9d5ebc30.eec99"
            ]
        ]
    },
    {
        "id": "fc9e38e0.a3b1e8",
        "type": "api-call-service",
        "z": "a28e9600.dc1528",
        "name": "Clear finish workout flag",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "input_boolean",
        "service": "turn_off",
        "entityId": "input_boolean.pending_workout_finish",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 450,
        "y": 300,
        "wires": [
            [
                "88e01428.13a4d8"
            ]
        ]
    },
    {
        "id": "88e01428.13a4d8",
        "type": "api-call-service",
        "z": "a28e9600.dc1528",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Finish Workout flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 780,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "9d5ebc30.eec99",
        "type": "delay",
        "z": "a28e9600.dc1528",
        "name": "Allow 1s to pause",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 850,
        "y": 500,
        "wires": [
            [
                "e4df0ccb.23ae9"
            ]
        ]
    },
    {
        "id": "3f3a9430.ebfdcc",
        "type": "delay",
        "z": "a28e9600.dc1528",
        "name": "Allow 1m to leave room",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 450,
        "y": 420,
        "wires": [
            [
                "d4393221.77afa"
            ]
        ]
    },
    {
        "id": "d4393221.77afa",
        "type": "api-call-service",
        "z": "a28e9600.dc1528",
        "name": "Turn off living room lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_off",
        "entityId": "light.living_room",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 750,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "e4df0ccb.23ae9",
        "type": "api-call-service",
        "z": "a28e9600.dc1528",
        "name": "Turn off Yamaha",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "media_player",
        "service": "turn_off",
        "entityId": "media_player.yamaha_receiver",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 640,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "f1fbb6c7.bc4808",
        "type": "api-call-service",
        "z": "ae1f782f.839ce8",
        "name": "Toggle kitchen sink lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "toggle",
        "entityId": "light.kitchen_sink",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 610,
        "y": 580,
        "wires": [
            [
                "cc86cc74.d2ddf"
            ]
        ]
    },
    {
        "id": "732b3b8.714e7c4",
        "type": "switch",
        "z": "ae1f782f.839ce8",
        "name": "Is press?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "single",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 400,
        "y": 580,
        "wires": [
            [
                "f1fbb6c7.bc4808"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "cc86cc74.d2ddf",
        "type": "api-call-service",
        "z": "ae1f782f.839ce8",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Kitchen Sink Light Button flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 880,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "3d5a7bee.9f6904",
        "type": "comment",
        "z": "ae1f782f.839ce8",
        "name": "Samsung button event codes / MQTT payloads",
        "info": "### Samsung button events / MQTT payloads\n - 1001 / hold:   Long press\n - 1002 / single: Single press\n - 1004 / double: Double press",
        "x": 220,
        "y": 480,
        "wires": []
    },
    {
        "id": "485d32a8.8ab04c",
        "type": "function",
        "z": "888dfbf1.eaaba8",
        "name": "Process sensor transition",
        "func": "var did_trigger_sensor = false;\nif (msg.payload == \"on\") {\n    did_trigger_sensor = true;\n}\n\nvar rooms_confirmed_possibly = [];\nvar rooms_readying = [];\nvar rooms_vacant = [];\n\nvar room_configs = global.get(\n            \"room_configs\", \"file\");\n\nvar sensor_configs = global.get(\n            \"sensor_configs\", \"file\");\nvar sensor_config = sensor_configs[\n            msg.data.entity_id];\nvar this_sensor_rooms = sensor_config.rooms_for_this;\n\n\nif (did_trigger_sensor) {\n    rooms_readying.push(...this_sensor_rooms);\n}\nelse {\n    var other_sensor_on = false;\n    var other_sensors_on_adj_rooms = [];\n    var on_sensors_rooms_and_without_sensors = [];\n    var lowest_time_since_changed_ms = -1;\n    var this_time_since_changed_ms = -1;\n    \n    msg.sensors_snapshot.forEach((e) => {\n        if (e.state == \"on\" &&\n                e.entity_id !=\n                    msg.data.entity_id) {\n            other_sensor_on = true;\n            \n            for (var rn of sensor_configs[\n                    e.entity_id].rooms_for_this) {\n                other_sensors_on_adj_rooms.\n                        push(...room_configs[rn].\n                        rooms_adjacent_with_sensors);\n                other_sensors_on_adj_rooms.\n                        push(...room_configs[rn].\n                        rooms_adjacent_without_sensors);\n                on_sensors_rooms_and_without_sensors.\n                        push(rn);\n                on_sensors_rooms_and_without_sensors.\n                        push(...room_configs[rn].\n                        rooms_adjacent_without_sensors);\n            }\n        }\n        if (lowest_time_since_changed_ms === -1 ||\n                e.timeSinceChangedMs <\n                    lowest_time_since_changed_ms) {\n            lowest_time_since_changed_ms =\n                    e.timeSinceChangedMs;\n        }\n        if (e.entity_id == msg.data.entity_id) {\n            this_time_since_changed_ms =\n                    e.timeSinceChangedMs;\n        }\n    });\n    \n    if (other_sensor_on) {\n        for (var tsr of this_sensor_rooms) {\n            if (on_sensors_rooms_and_without_sensors.\n                    includes(tsr)) {\n                continue;\n            }\n            \n            if (other_sensors_on_adj_rooms.\n                    includes(tsr)) {\n                rooms_readying.push(tsr);\n            }\n            else {\n                rooms_vacant.push(tsr);\n            }\n        }\n    }\n    else if (this_time_since_changed_ms ==\n            lowest_time_since_changed_ms) {\n        rooms_confirmed_possibly.push(\n                ...this_sensor_rooms);    \n    }\n    // Else, not that latest -- skip\n}\n\n\nfunction build_msg_from_rooms(rooms) {\n    if (rooms === undefined || rooms.length === 0) {\n        return null;\n    }\n    return {rooms_to_update: rooms};\n}\n\nvar msg_confirmed_possibly =\n        build_msg_from_rooms(\n            rooms_confirmed_possibly);\nvar msg_readying =\n        build_msg_from_rooms(rooms_readying);\nvar msg_vacant =\n        build_msg_from_rooms(rooms_vacant);\n\nmsgs = [msg_confirmed_possibly,\n        msg_readying,\n        msg_vacant];\n\nreturn msgs;",
        "outputs": 3,
        "noerr": 0,
        "x": 890,
        "y": 420,
        "wires": [
            [
                "c314b77b.445748",
                "7817662f.e52ba8"
            ],
            [
                "360ba06c.9da9e",
                "c2b93d55.8081"
            ],
            [
                "71f6b747.9beb88",
                "2ca14235.3908de"
            ]
        ],
        "outputLabels": [
            "confirmed_possibly",
            "readying",
            "vacant"
        ]
    },
    {
        "id": "e0beee1.e9e121",
        "type": "inject",
        "z": "888dfbf1.eaaba8",
        "name": "Mock on",
        "topic": "",
        "payload": "on",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 120,
        "y": 520,
        "wires": [
            [
                "f7138491.80a0e8"
            ]
        ]
    },
    {
        "id": "f7138491.80a0e8",
        "type": "change",
        "z": "888dfbf1.eaaba8",
        "name": "Add mock ID sensors (office)",
        "rules": [
            {
                "t": "set",
                "p": "data",
                "pt": "msg",
                "to": "{\"entity_id\":\"binary_sensor.motion_sensor_eco_office\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 540,
        "wires": [
            [
                "8282401f.cff1d"
            ]
        ]
    },
    {
        "id": "139547b7.e9b6d8",
        "type": "inject",
        "z": "888dfbf1.eaaba8",
        "name": "Mock off",
        "topic": "",
        "payload": "off",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 120,
        "y": 560,
        "wires": [
            [
                "f7138491.80a0e8"
            ]
        ]
    },
    {
        "id": "8282401f.cff1d",
        "type": "ha-get-entities",
        "z": "888dfbf1.eaaba8",
        "server": "2f5bd1e0.67e40e",
        "name": "Get sensor states",
        "rules": [
            {
                "property": "entity_id",
                "logic": "starts_with",
                "value": "binary_sensor.motion_sensor_eco",
                "valueType": "str"
            }
        ],
        "output_type": "array",
        "output_empty_results": false,
        "output_location_type": "msg",
        "output_location": "sensors_snapshot",
        "output_results_count": 1,
        "x": 590,
        "y": 380,
        "wires": [
            [
                "485d32a8.8ab04c",
                "ac27a21f.0663f"
            ]
        ]
    },
    {
        "id": "c314b77b.445748",
        "type": "debug",
        "z": "888dfbf1.eaaba8",
        "name": "Confirmed_possibly",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1170,
        "y": 300,
        "wires": []
    },
    {
        "id": "360ba06c.9da9e",
        "type": "debug",
        "z": "888dfbf1.eaaba8",
        "name": "Readying",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1140,
        "y": 380,
        "wires": []
    },
    {
        "id": "71f6b747.9beb88",
        "type": "debug",
        "z": "888dfbf1.eaaba8",
        "name": "Vacant",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1130,
        "y": 460,
        "wires": []
    },
    {
        "id": "ac27a21f.0663f",
        "type": "debug",
        "z": "888dfbf1.eaaba8",
        "name": "Sensors input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 860,
        "y": 360,
        "wires": []
    },
    {
        "id": "57284b45.1b0204",
        "type": "function",
        "z": "888dfbf1.eaaba8",
        "name": "Process rooms confirmed possibly",
        "func": "\nvar room_configs = global.get(\n            \"room_configs\", \"file\");\nvar all_room_names = Object.keys(room_configs);\n\nvar room_states = global.get(\"room_states\");\nif (room_states === undefined) {\n    room_states = {};\n}\n\nvar rooms_make_confirmed = [];\nvar rooms_make_possibly = [];\nvar rooms_make_vacant = [];\n\nmsg.rooms_to_update.forEach((e) => {\n    rooms_make_possibly.push(\n            ...room_configs[e].rooms_adjacent_without_sensors);\n});\n\nif (rooms_make_possibly.length === 0) {\n    rooms_make_confirmed.push(...msg.rooms_to_update);\n}\nelse {\n    rooms_make_possibly.push(\n            ...msg.rooms_to_update);\n}\n\nall_room_names.forEach((rn) => {\n    if (room_states[rn] === undefined) {\n        room_states[rn] = {};\n        room_states[rn].is_occupied = \"no init\";\n    }\n    \n    if (rooms_make_confirmed.includes(rn)) {\n        room_states[rn].is_occupied = \"confirmed\";\n    }\n    else if (rooms_make_possibly.includes(rn)) {\n        room_states[rn].is_occupied = \"possibly\";\n    }\n    else {\n        rooms_make_vacant.push(rn);\n        room_states[rn].is_occupied = \"vacant\";\n    }\n});\n\nglobal.set(\"room_states\", room_states);\n\n//node.warn(rooms_make_confirmed);\n//node.warn(rooms_make_possibly);\n//node.warn(rooms_make_vacant);\n//node.warn(room_states);\n\nmsg = {};\n//msg.rooms_make_max = rooms_make_possibly;\nmsg.rooms_make_off = rooms_make_vacant;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1440,
        "y": 340,
        "wires": [
            [
                "b9985d6f.041a2"
            ]
        ]
    },
    {
        "id": "373f464d.3907da",
        "type": "function",
        "z": "888dfbf1.eaaba8",
        "name": "Process rooms vacant",
        "func": "\nvar room_configs = global.get(\n            \"room_configs\", \"file\");\nvar all_room_names = Object.keys(room_configs);\n\nvar room_states = global.get(\"room_states\");\nif (room_states === undefined) {\n    room_states = {};\n}\n\nvar rooms_make_vacant = [];\n\nmsg.rooms_to_update.forEach((e) => {\n    rooms_make_vacant.push(e);    \n    rooms_make_vacant.push(\n            ...room_configs[e].rooms_adjacent_without_sensors);\n});\n\nall_room_names.forEach((rn) => {\n    if (room_states[rn] === undefined) {\n        room_states[rn] = {};\n        room_states[rn].is_occupied = \"no init\";\n    }\n    \n    if (rooms_make_vacant.includes(rn)) {\n        room_states[rn].is_occupied = \"vacant\";\n    }\n});\n\nglobal.set(\"room_states\", room_states);\n\n//node.warn(rooms_make_vacant);\n//node.warn(room_states);\n\nmsg = {};\nmsg.rooms_make_off = rooms_make_vacant;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1400,
        "y": 500,
        "wires": [
            [
                "b9985d6f.041a2"
            ]
        ]
    },
    {
        "id": "ed718cc7.9b98c",
        "type": "change",
        "z": "888dfbf1.eaaba8",
        "name": "Override sensor state (mock op)",
        "rules": [
            {
                "t": "set",
                "p": "sensors_snapshot[4].state",
                "pt": "msg",
                "to": "on",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "fd3296c5.91fc98",
        "type": "function",
        "z": "888dfbf1.eaaba8",
        "name": "Process rooms readying",
        "func": "\nvar room_configs = global.get(\n            \"room_configs\", \"file\");\nvar all_room_names = Object.keys(room_configs);\n\nvar room_states = global.get(\"room_states\");\nif (room_states === undefined) {\n    room_states = {};\n}\n\nvar rooms_make_readying_max = [];\nvar rooms_make_readying_min = [];\nvar is_only_occupied_endpoint = true;\n\nmsg.rooms_to_update.forEach((e) => {\n    if (room_states[e] === undefined ||\n            room_states[e].is_occupied == \"vacant\" ||\n            room_states[e].is_occupied == \"readying\" ||\n            !room_configs[e].is_endpoint) {\n        is_only_occupied_endpoint = false;\n    }\n    \n    rooms_make_readying_max.push(e);\n    rooms_make_readying_max.push(\n            ...room_configs[e].rooms_adjacent_without_sensors);\n    rooms_make_readying_min.push(\n            ...room_configs[e].rooms_adjacent_with_sensors);\n});\n\nif (is_only_occupied_endpoint) {\n    rooms_make_readying_max = [];\n    rooms_make_readying_min = [];\n}\nelse {\n    rooms_make_readying_min = \n            rooms_make_readying_min.filter((e) => {\n        return !(e in rooms_make_readying_max);\n    });\n    \n    all_room_names.forEach((rn) => {\n        if (room_states[rn] === undefined) {\n            room_states[rn] = {};\n            room_states[rn].is_occupied = \"no init\";\n        }\n        \n        if (rooms_make_readying_max.includes(rn) ||\n                rooms_make_readying_min.includes(rn)) {\n            room_states[rn].is_occupied = \"readying\";\n        }\n    });\n    \n    global.set(\"room_states\", room_states);\n}\n\n//node.warn(rooms_make_readying_max);\n//node.warn(rooms_make_readying_min);\n//node.warn(room_states);\n\nmsg = {};\n\nif (!is_only_occupied_endpoint) {\n    msg.rooms_make_max = rooms_make_readying_max;\n    msg.rooms_make_min = rooms_make_readying_min;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1410,
        "y": 420,
        "wires": [
            [
                "b9985d6f.041a2"
            ]
        ]
    },
    {
        "id": "59e14cff.4507b4",
        "type": "server-state-changed",
        "z": "888dfbf1.eaaba8",
        "name": "Foyer Motion Event",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "binary_sensor.motion_sensor_eco",
        "entityidfiltertype": "substring",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "jsonata",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": true,
        "x": 170,
        "y": 380,
        "wires": [
            [
                "6f73bb20.498ab4"
            ]
        ]
    },
    {
        "id": "745cd936.8da718",
        "type": "ha-get-entities",
        "z": "888dfbf1.eaaba8",
        "server": "2f5bd1e0.67e40e",
        "name": "Get light states",
        "rules": [
            {
                "property": "entity_id",
                "logic": "starts_with",
                "value": "light.",
                "valueType": "str"
            }
        ],
        "output_type": "array",
        "output_empty_results": false,
        "output_location_type": "msg",
        "output_location": "lights_snapshot",
        "output_results_count": 1,
        "x": 280,
        "y": 700,
        "wires": [
            [
                "c0524bde.553058"
            ]
        ]
    },
    {
        "id": "90078417.0811f8",
        "type": "debug",
        "z": "888dfbf1.eaaba8",
        "name": "Rooms to change",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 530,
        "y": 680,
        "wires": []
    },
    {
        "id": "c0524bde.553058",
        "type": "ha-get-entities",
        "z": "888dfbf1.eaaba8",
        "server": "2f5bd1e0.67e40e",
        "name": "Get switch states",
        "rules": [
            {
                "property": "entity_id",
                "logic": "starts_with",
                "value": "switch.",
                "valueType": "str"
            }
        ],
        "output_type": "array",
        "output_empty_results": false,
        "output_location_type": "msg",
        "output_location": "switches_snapshot",
        "output_results_count": 1,
        "x": 270,
        "y": 760,
        "wires": [
            [
                "90078417.0811f8",
                "c46eb29.297cb5"
            ]
        ]
    },
    {
        "id": "c46eb29.297cb5",
        "type": "function",
        "z": "888dfbf1.eaaba8",
        "name": "Create HA commands",
        "func": "var room_configs = global.get(\n            \"room_configs\", \"file\");\n\nvar entities_snapshot = {}\nmsg.lights_snapshot.forEach((e) => {\n    entities_snapshot[e.entity_id] = e;\n});\n\nmsg.switches_snapshot.forEach((e) => {\n    entities_snapshot[e.entity_id] = e;\n});\n\n// Just reading -- do not need thread-safe access\n// Only used to ensure anything already in queue\n//   is included if also in new room lists\n// Another node will resolve conflicts\nvar queues = {};\nqueues.max = flow.get(\"ha_cmd_queue_max\");\nif (queues.max === undefined) {\n    queues.max = [];\n}\n\nqueues.min = flow.get(\"ha_cmd_queue_min\");\nif (queues.min === undefined) {\n    queues.min = [];\n}\n\nqueues.off = flow.get(\"ha_cmd_queue_off\");\nif (queues.off === undefined) {\n    queues.off = [];\n}\n\nqueues.skip = flow.get(\"ha_cmd_queue_skip\");\nif (queues.skip === undefined) {\n    queues.skip = [];\n}\n\nqueues.past = flow.get(\"ha_cmd_queue_past\");\nif (queues.past === undefined) {\n    queues.past = [];\n}\n\nvar last_cmds = global.get(\n        \"ha_last_cmd_per_entity\");\n\nvar past_timeout_s = flow.get(\n        \"ha_cmd_past_timeout_s\", \"file\")\n\n\nfunction is_in_pending_queue(queue, entity_id) {\n    var found = queue.find((e) => {\n            return (e.payload.data.entity_id ==\n            entity_id);\n    });\n    \n    if (found) {\n        return true;\n    }\n    return false;\n}\n\n\nfunction is_in_past_queue(queue, entity_id) {\n    var found = queue.find((e) => {\n        // Technically different \"now\" each time,\n        //   but not critical to get exactly right\n        var diff_ms = new Date() - new Date(\n                e.spotlight_metadata.update_time);\n        \n        return (diff_ms <=\n                    past_timeout_s * 1000) &&\n                (e.payload.data.entity_id ==\n                    entity_id);\n    });\n    \n    if (found) {\n        return true;\n    }\n    return false;\n}\n\n\nfunction is_in_any_queue(entity_id) {\n    var is_queued = false;\n    for (var qn in queues) {\n        if (qn == \"past\") {\n            is_queued |= is_in_past_queue(\n                queues[qn], entity_id);\n        }\n        else if (qn != \"skip\") {\n            is_queued |= is_in_pending_queue(\n                    queues[qn], entity_id);\n        }\n    }\n    return is_queued;\n}\n\n\nfunction get_existing_param(existing, param,\n        entity_id) {\n    var e = existing[entity_id];\n    \n    switch (param) {\n        case \"state\":\n            if (existing == entities_snapshot) {\n                return e.state;\n            }\n            else if (existing == last_cmds) {\n                return e.payload.service.\n                        substring(5);\n            }\n            break;\n        \n        case \"brightness\":\n            if (existing == entities_snapshot) {\n                return e.attributes.brightness;\n            }\n            else if (existing == last_cmds) {\n                return e.payload.data.brightness;\n            }\n            break;\n    }\n    \n    return;\n}\n\n\nfunction build_cmd(\n        op_type, entity_id, state, existing,\n        target_bright, is_min_bright) {\n    const domain = entity_id.split('.')[0];\n    var need_cmd = false;\n    var ex_state;\n    var ex_brightness;\n    var new_brightness;\n    \n    ex_state = get_existing_param(\n            existing, \"state\", entity_id);\n    \n    switch(domain) {\n        case 'switch':\n            if (ex_state != state) {\n                need_cmd = true;\n            }\n            break;\n        case 'light':\n            if (state == \"on\") {\n                ex_brightness = get_existing_param(\n                        existing, \"brightness\",\n                        entity_id);\n                \n                if (ex_brightness === undefined ||\n                        (target_bright > ex_brightness &&\n                            is_min_bright) ||\n                        (target_bright < ex_brightness &&\n                            !is_min_bright) ||\n                        is_in_any_queue(entity_id)) {\n                    new_brightness = target_bright;\n                    need_cmd = true;\n                }\n                \n                if (ex_state != \"on\") {\n                    need_cmd = true;\n                }\n            }\n            else {\n                if (ex_state != \"off\") {\n                    need_cmd = true;\n                }\n            }\n            break;\n            \n        default:\n            return [null, null];\n    }\n    \n    if (!need_cmd &&\n            is_in_any_queue(entity_id)) {\n        need_cmd = true;\n    }\n\n    const msg = {\n        payload: {\n            domain: domain,\n            service: `turn_${state}`,\n            data: {\n                entity_id: entity_id,\n            },\n        },\n        spotlight_metadata: {\n            op_type: op_type,\n            create_time: new Date().toISOString(),\n        },\n    };\n    \n    if (new_brightness !== undefined) {\n        msg.payload.data.brightness = new_brightness;\n    }\n    else if (!need_cmd &&\n            ex_brightness !== undefined) {\n        msg.payload.data.brightness =\n                ex_brightness;\n    }\n        \n    return [need_cmd, msg];\n}\n\n\nvar payloads = [];\nvar skip_payloads = [];\nvar need_cmd;\nvar payload;\nvar rn;\n\n\n// TODO: Also check against last_cmds?\n\nif (msg.rooms_make_max !== undefined) {\n    msg.rooms_make_max.forEach((e) => {\n        for (rn in room_configs[e][\"auto-on_devices\"]) {\n            [need_cmd, payload] =\n                    build_cmd(\"make_max\",\n                    rn, \"on\",\n                    entities_snapshot,\n                    255, true);\n            if (need_cmd) {\n                payloads.push(payload);\n            }\n            else if (payload !== null) {\n                skip_payloads.push(payload);\n            }\n        }\n    });\n}\n\nif (msg.rooms_make_min !== undefined) {\n    msg.rooms_make_min.forEach((e) => {\n        for (rn in room_configs[e][\"auto-on_devices\"]) {\n            [need_cmd, payload] = \n                    build_cmd(\"make_min\",\n                    rn, \"on\",\n                    entities_snapshot,\n                    2, true);\n            if (need_cmd) {\n                payloads.push(payload);\n            }\n            else if (payload !== null) {\n                skip_payloads.push(payload);\n            }\n        }\n    });\n}\n\nif (msg.rooms_make_off !== undefined) {\n    msg.rooms_make_off.forEach((e) => {\n        for (rn in room_configs[e][\"auto-on_devices\"]) {\n            [need_cmd, payload] =\n                    build_cmd(\"make_off\",\n                    rn, \"off\",\n                    entities_snapshot);\n            if (need_cmd) {\n                payloads.push(payload);\n            }\n            else if (payload !== null) {\n                skip_payloads.push(payload);\n            }\n        }\n        for (rn in room_configs[e][\"off-only_devices\"]) {\n            [need_cmd, payload] =\n                    build_cmd(\"make_off\",\n                    rn, \"off\",\n                    entities_snapshot);\n            if (need_cmd) {\n                payloads.push(payload);\n            }\n            else if (payload !== null) {\n                skip_payloads.push(payload);\n            }\n        }\n    });\n}\n\n\nmsg = {\n        queue_data: payloads,\n        skip_data: skip_payloads,\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 540,
        "y": 720,
        "wires": [
            [
                "4af0ccc7.87d384",
                "5ab4b215.7b13bc"
            ]
        ]
    },
    {
        "id": "ea3e4690.913c68",
        "type": "delay",
        "z": "888dfbf1.eaaba8",
        "name": "Limit msg rate to not overload Hue",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "5",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 780,
        "y": 980,
        "wires": [
            [
                "5e0bf89c.02daf8"
            ]
        ]
    },
    {
        "id": "5e0bf89c.02daf8",
        "type": "api-call-service",
        "z": "888dfbf1.eaaba8",
        "name": "Send HA cmd",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "",
        "service": "",
        "entityId": "",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "payload",
        "output_location_type": "msg",
        "mustacheAltTags": false,
        "x": 1040,
        "y": 980,
        "wires": [
            [
                "545bc559.c789dc"
            ]
        ]
    },
    {
        "id": "43a268a8.75aab8",
        "type": "debug",
        "z": "888dfbf1.eaaba8",
        "name": "Done",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Done\"",
        "targetType": "jsonata",
        "x": 1610,
        "y": 960,
        "wires": []
    },
    {
        "id": "4af0ccc7.87d384",
        "type": "debug",
        "z": "888dfbf1.eaaba8",
        "name": "HA cmds",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 740,
        "y": 680,
        "wires": []
    },
    {
        "id": "6f73bb20.498ab4",
        "type": "api-current-state",
        "z": "888dfbf1.eaaba8",
        "name": "Is spotlight enabled?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "true",
        "halt_if_type": "bool",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "input_boolean.spotlight_mode",
        "state_type": "habool",
        "state_location": "",
        "override_payload": "none",
        "entity_location": "",
        "override_data": "none",
        "blockInputOverrides": false,
        "x": 260,
        "y": 440,
        "wires": [
            [
                "8282401f.cff1d"
            ],
            []
        ]
    },
    {
        "id": "c6a17f72.67465",
        "type": "api-current-state",
        "z": "1d296556.09592b",
        "name": "Is spotlight disabled?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "false",
        "halt_if_type": "bool",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "input_boolean.spotlight_mode",
        "state_type": "habool",
        "state_location": "",
        "override_payload": "none",
        "entity_location": "",
        "override_data": "none",
        "blockInputOverrides": false,
        "x": 140,
        "y": 440,
        "wires": [
            [
                "cd526cf1.d6312"
            ],
            []
        ]
    },
    {
        "id": "9e728add.a96578",
        "type": "api-current-state",
        "z": "62ce34cf.a7671c",
        "name": "Is spotlight disabled?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "false",
        "halt_if_type": "bool",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "input_boolean.spotlight_mode",
        "state_type": "habool",
        "state_location": "",
        "override_payload": "none",
        "entity_location": "",
        "override_data": "none",
        "blockInputOverrides": false,
        "x": 140,
        "y": 520,
        "wires": [
            [
                "fb3e86e1.e68a28"
            ],
            []
        ]
    },
    {
        "id": "19863ef.06735c1",
        "type": "api-current-state",
        "z": "35ab222c.a6eb9e",
        "name": "Is spotlight disabled?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "false",
        "halt_if_type": "bool",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "input_boolean.spotlight_mode",
        "state_type": "habool",
        "state_location": "",
        "override_payload": "none",
        "entity_location": "",
        "override_data": "none",
        "blockInputOverrides": false,
        "x": 140,
        "y": 580,
        "wires": [
            [
                "19a3e8f6.8fed97"
            ],
            []
        ]
    },
    {
        "id": "a134996.c854468",
        "type": "comment",
        "z": "888dfbf1.eaaba8",
        "name": "Where to insert",
        "info": "To test with this mock option, route from \"Get sensor states\" to this, then this to \"Process sensor transition\" and \"Sensor input\".\n\nTo remove, no connections to this; and instead, \"Get sensor states\" goes direct to \"Process sensor transition\" and \"Sensors input\".",
        "x": 700,
        "y": 540,
        "wires": []
    },
    {
        "id": "1c72eaf.e8d9215",
        "type": "api-call-service",
        "z": "888dfbf1.eaaba8",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Spotlight flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1680,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "f941c435.3be748",
        "type": "link out",
        "z": "390fc521.dffd0a",
        "name": "JC's Plex on Shield played",
        "links": [
            "94595d9.08b6ba"
        ],
        "x": 975,
        "y": 320,
        "wires": []
    },
    {
        "id": "94595d9.08b6ba",
        "type": "link in",
        "z": "888dfbf1.eaaba8",
        "name": "",
        "links": [
            "f941c435.3be748"
        ],
        "x": 235,
        "y": 280,
        "wires": [
            [
                "44bd958.72d456c"
            ]
        ]
    },
    {
        "id": "6d1a97df.d83818",
        "type": "debug",
        "z": "888dfbf1.eaaba8",
        "name": "Instant confirm sensor input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 880,
        "y": 220,
        "wires": []
    },
    {
        "id": "44bd958.72d456c",
        "type": "api-current-state",
        "z": "888dfbf1.eaaba8",
        "name": "Is spotlight enabled?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "true",
        "halt_if_type": "bool",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "input_boolean.spotlight_mode",
        "state_type": "habool",
        "state_location": "",
        "override_payload": "none",
        "entity_location": "",
        "override_data": "none",
        "blockInputOverrides": false,
        "x": 400,
        "y": 240,
        "wires": [
            [
                "6d1a97df.d83818",
                "4f2af63.5adb108"
            ],
            []
        ]
    },
    {
        "id": "c8add23a.45aef",
        "type": "server-state-changed",
        "z": "888dfbf1.eaaba8",
        "name": "Door open/close Event",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "binary_sensor.multi_sensor_st_",
        "entityidfiltertype": "substring",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "",
        "halt_if_type": "jsonata",
        "halt_if_compare": "is",
        "outputs": 1,
        "output_only_on_state_change": true,
        "x": 160,
        "y": 200,
        "wires": [
            [
                "44bd958.72d456c"
            ]
        ]
    },
    {
        "id": "4f2af63.5adb108",
        "type": "function",
        "z": "888dfbf1.eaaba8",
        "name": "Process instant confirm sensors",
        "func": "var rooms_confirmed = [];\n\nvar sensor_configs = global.get(\n            \"sensor_configs\", \"file\");\n            \nif (msg.data.entity_id in sensor_configs) {\n    var sensor_config = sensor_configs[\n            msg.data.entity_id];\n    var this_sensor_rooms =\n            sensor_config.rooms_for_this;\n\n    rooms_confirmed.push(...this_sensor_rooms);\n}\n\n\nfunction build_msg_from_rooms(rooms) {\n    if (rooms === undefined || rooms.length === 0) {\n        return null;\n    }\n    return {rooms_to_update: rooms};\n}\n\n\nvar msg_confirmed =\n        build_msg_from_rooms(\n            rooms_confirmed);\n\n\nreturn msg_confirmed;",
        "outputs": 1,
        "noerr": 0,
        "x": 890,
        "y": 260,
        "wires": [
            [
                "79b024d8.90d69c",
                "7817662f.e52ba8"
            ]
        ]
    },
    {
        "id": "79b024d8.90d69c",
        "type": "debug",
        "z": "888dfbf1.eaaba8",
        "name": "Confirmed_definitely",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1175,
        "y": 258,
        "wires": []
    },
    {
        "id": "946a044.bc3e4f8",
        "type": "api-current-state",
        "z": "390fc521.dffd0a",
        "name": "Is spotlight enabled?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "true",
        "halt_if_type": "bool",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "input_boolean.spotlight_mode",
        "state_type": "habool",
        "state_location": "",
        "override_payload": "none",
        "entity_location": "",
        "override_data": "none",
        "blockInputOverrides": false,
        "x": 780,
        "y": 360,
        "wires": [
            [
                "f941c435.3be748",
                "adc3ea04.4a0798"
            ],
            [
                "ecaf9e39.a1c89"
            ]
        ]
    },
    {
        "id": "3f95a2b3.15b83e",
        "type": "change",
        "z": "888dfbf1.eaaba8",
        "name": "Add mock ID sensors (up hall)",
        "rules": [
            {
                "t": "set",
                "p": "data",
                "pt": "msg",
                "to": "{\"entity_id\":\"binary_sensor.motion_sensor_eco_upstairs_hallway\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 620,
        "wires": [
            [
                "8282401f.cff1d"
            ]
        ]
    },
    {
        "id": "67a9000f.3af86",
        "type": "inject",
        "z": "888dfbf1.eaaba8",
        "name": "Mock on",
        "topic": "",
        "payload": "on",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 120,
        "y": 600,
        "wires": [
            [
                "3f95a2b3.15b83e"
            ]
        ]
    },
    {
        "id": "add780f3.548ee",
        "type": "inject",
        "z": "888dfbf1.eaaba8",
        "name": "Mock off",
        "topic": "",
        "payload": "off",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 120,
        "y": 640,
        "wires": [
            [
                "3f95a2b3.15b83e"
            ]
        ]
    },
    {
        "id": "5ab4b215.7b13bc",
        "type": "semaphore-take",
        "z": "888dfbf1.eaaba8",
        "config": "48ca387f.7f63d8",
        "name": "Get HA queue lock",
        "x": 790,
        "y": 720,
        "wires": [
            [
                "b7b6b82e.1a3d68"
            ]
        ]
    },
    {
        "id": "788671bf.c8b0b",
        "type": "semaphore-leave",
        "z": "888dfbf1.eaaba8",
        "config": "48ca387f.7f63d8",
        "name": "Release HA queue",
        "x": 1250,
        "y": 720,
        "wires": [
            [
                "bd2e1dde.2d1d5"
            ]
        ]
    },
    {
        "id": "b7b6b82e.1a3d68",
        "type": "function",
        "z": "888dfbf1.eaaba8",
        "name": "Queue and prioritize",
        "func": "\nvar queues = {};\nqueues.max = flow.get(\"ha_cmd_queue_max\");\nif (queues.max === undefined) {\n    queues.max = [];\n}\n\nqueues.min = flow.get(\"ha_cmd_queue_min\");\nif (queues.min === undefined) {\n    queues.min = [];\n}\n\nqueues.off = flow.get(\"ha_cmd_queue_off\");\nif (queues.off === undefined) {\n    queues.off = [];\n}\n\nqueues.past = flow.get(\"ha_cmd_queue_past\");\nif (queues.past === undefined) {\n    queues.past = [];\n}\n\nvar past_timeout_s = flow.get(\n        \"ha_cmd_past_timeout_s\", \"file\")\n\n\nfunction search_queue(queue_name, entity_id) {\n    var index = queues[queue_name].\n            findIndex((e) => {\n        return e.payload.data.entity_id ==\n                entity_id;\n    });\n    \n    if (index == -1) {\n        return null;\n    }\n    \n    return {\n        queue_name: queue_name,\n        index: index,\n    };\n}\n\n\nfunction find_existing(entity_id) {\n    var res;\n\n    res = search_queue(\"max\", entity_id);\n    if (res !== null) {\n        return res;\n    }\n    \n    res = search_queue(\"min\", entity_id);\n    if (res !== null) {\n        return res;\n    }\n    \n    res = search_queue(\"off\", entity_id);\n    if (res !== null) {\n        return res;\n    }\n    \n    return null;\n}\n\n\nfunction find_past(entity_id) {\n    var index = queues.past.findIndex((e) => {\n        // Technically different \"now\" each time,\n        //   but not critical to get exactly right\n        var diff_ms = new Date() - new Date(\n                e.spotlight_metadata.update_time);\n        \n        return (diff_ms <=\n                    past_timeout_s * 1000) &&\n                (e.payload.data.entity_id ==\n                    entity_id);\n    });\n    \n    if (index >= 0) {\n        return {\n            queue_name: \"past\",\n            index: index,\n        };\n    }\n    \n    return null;\n}\n\n\nmsg.queue_data.forEach((e) => {\n    existing = find_existing(\n            e.payload.data.entity_id);\n    past = find_past(\n            e.payload.data.entity_id);\n    \n    if (existing !== null) {\n        if (queues[existing.queue_name][\n                existing.index].\n                spotlight_metadata.op_type ==\n                \"make_max\" && e.\n                spotlight_metadata.op_type ==\n                \"make_min\") {\n            // Do not want min to replace max\n            return;        \n        }\n        \n        // New message will be added later\n        queues[existing.queue_name].\n                splice(existing.index, 1);\n    }\n    else if (past !== null) {\n        if (queues[past.queue_name][\n                past.index].\n                spotlight_metadata.op_type ==\n                \"make_max\" && e.\n                spotlight_metadata.op_type ==\n                \"make_min\") {\n            // Do not want min to replace max\n            return;        \n        }\n        \n        // New message otherwise ok\n    }\n    \n    switch (e.spotlight_metadata.op_type) {\n        case \"make_max\":\n            queues.max.push(e);\n            break;\n        \n        case \"make_min\":\n            queues.min.push(e);\n            break;\n        \n        case \"make_off\":\n            queues.off.push(e);\n            break;\n    }\n});\n\n\n// This also cleans up old history\n//   while it has the semaphore\nqueues.past = queues.past.filter((e) => {\n    // Technically different \"now\" each time,\n    //   but not critical to get exactly right.\n    var diff_ms = new Date() - new Date(\n            e.spotlight_metadata.update_time);\n    \n    return diff_ms <= past_timeout_s * 1000;\n});\n\n\nflow.set(\"ha_cmd_queue_max\", queues.max);\nflow.set(\"ha_cmd_queue_min\", queues.min);\nflow.set(\"ha_cmd_queue_off\", queues.off);\nflow.set(\"ha_cmd_queue_past\", queues.past);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1020,
        "y": 720,
        "wires": [
            [
                "788671bf.c8b0b"
            ]
        ]
    },
    {
        "id": "e0bcc2b5.d14fc",
        "type": "catch",
        "z": "888dfbf1.eaaba8",
        "name": "Avoid HA queue lockup",
        "scope": [
            "b7b6b82e.1a3d68",
            "32c5db88.628ce4",
            "bf656429.bdcd08",
            "d6ae9766.77b248"
        ],
        "uncaught": false,
        "x": 160,
        "y": 1160,
        "wires": [
            [
                "9e3eaede.7d4ac",
                "f94a6313.46642"
            ]
        ]
    },
    {
        "id": "9e3eaede.7d4ac",
        "type": "semaphore-leave",
        "z": "888dfbf1.eaaba8",
        "config": "48ca387f.7f63d8",
        "name": "Release HA queue",
        "x": 410,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "f94a6313.46642",
        "type": "debug",
        "z": "888dfbf1.eaaba8",
        "name": "Error msg (HA queue)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "msg.error",
        "targetType": "jsonata",
        "x": 420,
        "y": 1200,
        "wires": []
    },
    {
        "id": "7d6b9274.3873dc",
        "type": "inject",
        "z": "888dfbf1.eaaba8",
        "name": "Clear HA cmd queues",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 180,
        "y": 1280,
        "wires": [
            [
                "a4fbaff.f78305"
            ]
        ]
    },
    {
        "id": "a4fbaff.f78305",
        "type": "semaphore-take",
        "z": "888dfbf1.eaaba8",
        "config": "48ca387f.7f63d8",
        "name": "Get HA queue lock",
        "x": 410,
        "y": 1280,
        "wires": [
            [
                "32c5db88.628ce4"
            ]
        ]
    },
    {
        "id": "61f767fa.32c678",
        "type": "semaphore-leave",
        "z": "888dfbf1.eaaba8",
        "config": "48ca387f.7f63d8",
        "name": "Release HA queue",
        "x": 870,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "32c5db88.628ce4",
        "type": "function",
        "z": "888dfbf1.eaaba8",
        "name": "Clear HA cmd queues",
        "func": "\nflow.set(\"ha_cmd_queue_max\");\nflow.set(\"ha_cmd_queue_min\");\nflow.set(\"ha_cmd_queue_off\");\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 1280,
        "wires": [
            [
                "61f767fa.32c678"
            ]
        ]
    },
    {
        "id": "e8a496e8.e93478",
        "type": "semaphore-take",
        "z": "888dfbf1.eaaba8",
        "config": "48ca387f.7f63d8",
        "name": "Get HA queue lock",
        "x": 850,
        "y": 880,
        "wires": [
            [
                "bf656429.bdcd08"
            ]
        ]
    },
    {
        "id": "bf656429.bdcd08",
        "type": "function",
        "z": "888dfbf1.eaaba8",
        "name": "Pop next HA cmd",
        "func": "\nvar queues = {};\nqueues.max = flow.get(\"ha_cmd_queue_max\");\nif (queues.max === undefined) {\n    queues.max = [];\n}\n\nqueues.min = flow.get(\"ha_cmd_queue_min\");\nif (queues.min === undefined) {\n    queues.min = [];\n}\n\nqueues.off = flow.get(\"ha_cmd_queue_off\");\nif (queues.off === undefined) {\n    queues.off = [];\n}\n\nqueues.past = flow.get(\"ha_cmd_queue_past\");\nif (queues.past === undefined) {\n    queues.past = [];\n}\n\n\nvar cmd;\nif (queues.max.length > 0) {\n    cmd = queues.max.shift();\n}\nelse if (queues.min.length > 0) {\n    cmd = queues.min.shift();\n}\nelse if (queues.off.length > 0) {\n    cmd = queues.off.shift();\n}\n\nif (cmd === undefined) {\n    return {\n        payload: \"skip\",\n    };\n}\nelse {\n    cmd.spotlight_metadata.update_time =\n            new Date().toISOString();\n    cmd.spotlight_metadata.is_time_confirmed = false;\n    queues.past.push(cmd);\n}\n\nflow.set(\"ha_cmd_queue_max\", queues.max);\nflow.set(\"ha_cmd_queue_min\", queues.min);\nflow.set(\"ha_cmd_queue_off\", queues.off);\nflow.set(\"ha_cmd_queue_past\", queues.past);\n\nmsg = {\n    payload: cmd.payload,\n    this_cmd: cmd,\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1070,
        "y": 880,
        "wires": [
            [
                "9bd3c398.88616"
            ]
        ]
    },
    {
        "id": "9bd3c398.88616",
        "type": "semaphore-leave",
        "z": "888dfbf1.eaaba8",
        "config": "48ca387f.7f63d8",
        "name": "Release HA queue",
        "x": 1290,
        "y": 880,
        "wires": [
            [
                "9b201391.b1f01",
                "435bd08f.14ff8"
            ]
        ]
    },
    {
        "id": "b47632e1.ac4d2",
        "type": "semaphore-take",
        "z": "888dfbf1.eaaba8",
        "config": "7df2c2af.096bec",
        "name": "Get HA dequeue loop lock",
        "x": 570,
        "y": 880,
        "wires": [
            [
                "e8a496e8.e93478"
            ]
        ]
    },
    {
        "id": "92ca7059.2634f",
        "type": "semaphore-leave",
        "z": "888dfbf1.eaaba8",
        "config": "7df2c2af.096bec",
        "name": "Release HA dequeue loop",
        "x": 1390,
        "y": 1000,
        "wires": [
            [
                "1c72eaf.e8d9215",
                "43a268a8.75aab8",
                "815d5e59.a75d9"
            ]
        ]
    },
    {
        "id": "7f4d5ece.e73cf",
        "type": "function",
        "z": "888dfbf1.eaaba8",
        "name": "Is HA cmd queue empty?",
        "func": "\nconst msg_reloop = {\n    payload: \"reloop\",\n}\n\nconst msg_done = {\n    payload: \"done\",\n}\n\n\n// Just reading -- do not need thread-safe access\n// If item added in meantime, another flow will\n//   re-enter -- not critical to re-loop\nvar queues = {};\nqueues.max = flow.get(\"ha_cmd_queue_max\");\nif (queues.max === undefined) {\n    queues.max = [];\n}\n\nqueues.min = flow.get(\"ha_cmd_queue_min\");\nif (queues.min === undefined) {\n    queues.min = [];\n}\n\nqueues.off = flow.get(\"ha_cmd_queue_off\");\nif (queues.off === undefined) {\n    queues.off = [];\n}\n\n\nvar is_empty = true;\n\n//Object.keys(queues).forEach((e) => {\n//});\nfor (var qn in queues) {\n    if (queues[qn].length > 0) {\n        is_empty = false;\n    }\n}\n\nif (is_empty) {\n    return [null, msg_done];\n}\n\nreturn [msg_reloop, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 1350,
        "y": 940,
        "wires": [
            [
                "e8a496e8.e93478"
            ],
            [
                "92ca7059.2634f"
            ]
        ],
        "outputLabels": [
            "re-loop",
            "done"
        ]
    },
    {
        "id": "3a05d85d.609108",
        "type": "catch",
        "z": "888dfbf1.eaaba8",
        "name": "Avoid HA dequeue loop lockup",
        "scope": [
            "ea3e4690.913c68",
            "5e0bf89c.02daf8",
            "e8a496e8.e93478",
            "bf656429.bdcd08",
            "9bd3c398.88616",
            "7f4d5ece.e73cf",
            "9b201391.b1f01",
            "545bc559.c789dc",
            "d6ae9766.77b248",
            "383972de.ddc76e",
            "a7c8f2c8.e5215",
            "98d71bb6.3eb908",
            "a834a91f.3dc2f8"
        ],
        "uncaught": false,
        "x": 700,
        "y": 1160,
        "wires": [
            [
                "b73bbe50.2e7c",
                "526506ae.ebf308"
            ]
        ]
    },
    {
        "id": "b73bbe50.2e7c",
        "type": "semaphore-leave",
        "z": "888dfbf1.eaaba8",
        "config": "7df2c2af.096bec",
        "name": "Release HA dequeue loop",
        "x": 990,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "526506ae.ebf308",
        "type": "debug",
        "z": "888dfbf1.eaaba8",
        "name": "Error msg (HA dequeue loop)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "msg.error",
        "targetType": "jsonata",
        "x": 1000,
        "y": 1200,
        "wires": []
    },
    {
        "id": "9b201391.b1f01",
        "type": "switch",
        "z": "888dfbf1.eaaba8",
        "name": "No cmd?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "skip",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "skip",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 540,
        "y": 960,
        "wires": [
            [
                "7f4d5ece.e73cf"
            ],
            [
                "ea3e4690.913c68"
            ]
        ]
    },
    {
        "id": "1436e5c8.e5a32a",
        "type": "comment",
        "z": "888dfbf1.eaaba8",
        "name": "Why loop lock",
        "info": "The loop lock is so that multiple parallel invocations of this flow do not start sending to the HA cmd at the same time.",
        "x": 370,
        "y": 900,
        "wires": []
    },
    {
        "id": "435bd08f.14ff8",
        "type": "debug",
        "z": "888dfbf1.eaaba8",
        "name": "Next HA cmd",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1510,
        "y": 840,
        "wires": []
    },
    {
        "id": "545bc559.c789dc",
        "type": "semaphore-take",
        "z": "888dfbf1.eaaba8",
        "config": "48ca387f.7f63d8",
        "name": "Get HA queue lock",
        "x": 710,
        "y": 1040,
        "wires": [
            [
                "d6ae9766.77b248"
            ]
        ]
    },
    {
        "id": "d6ae9766.77b248",
        "type": "function",
        "z": "888dfbf1.eaaba8",
        "name": "Confirm time",
        "func": "\nvar queues = {};\nqueues.past = flow.get(\"ha_cmd_queue_past\");\nif (queues.past === undefined) {\n    queues.past = [];\n}\n\n\nfunction is_cmd_probably_equal(cmd1, cmd2) {\n    try {\n        var p1 = cmd1.payload;\n        var p2 = cmd2.payload;\n        var sm1 = cmd1.spotlight_metadata;\n        var sm2 = cmd2.spotlight_metadata;\n        \n        if (p1.service != p2.service) {\n            return false;\n        }\n        \n        if (p1.data.entity_id != p2.data.entity_id) {\n            return false;\n        }\n        \n        if (sm1.op_type != sm2.op_type) {\n            return false;\n        }\n        \n        if (sm1.create_time != sm2.create_time) {\n            return false;\n        }\n        \n        if (sm1.update_time != sm2.update_time) {\n            return false;\n        }\n        \n        if (sm1.is_time_confirmed === true ||\n                sm2.is_time_confirmed === true) {\n            return false;\n        }\n        \n        // Presume rest matches -- diff improbable\n        return true;\n    }\n    catch (err) {\n        return false;\n    }\n}\n\nvar q_cmd;\nfor (var i = queues.past.length - 1; i >= 0; i--) {\n    if (is_cmd_probably_equal(\n                queues.past[i], msg.this_cmd)) {\n        q_cmd = queues.past[i];\n        break;\n    }\n}\n\nif (q_cmd !== undefined) {\n    q_cmd.spotlight_metadata.update_time =\n            new Date().toISOString();\n    q_cmd.spotlight_metadata.is_time_confirmed =\n            true;\n    flow.set(\"ha_cmd_queue_past\", queues.past);\n}\n// Else, no match for some reason...\n// Ignore -- there are failsafes\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 910,
        "y": 1040,
        "wires": [
            [
                "383972de.ddc76e"
            ]
        ]
    },
    {
        "id": "383972de.ddc76e",
        "type": "semaphore-leave",
        "z": "888dfbf1.eaaba8",
        "config": "48ca387f.7f63d8",
        "name": "Release HA queue",
        "x": 1110,
        "y": 1040,
        "wires": [
            [
                "a7c8f2c8.e5215"
            ]
        ]
    },
    {
        "id": "8b841822.3226c8",
        "type": "inject",
        "z": "888dfbf1.eaaba8",
        "name": "Set HA cmd past timeout (s)",
        "topic": "ha_cmd_past_timeout_s",
        "payload": "5",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 200,
        "y": 1340,
        "wires": [
            [
                "a7498c74.c6b72"
            ]
        ]
    },
    {
        "id": "a7498c74.c6b72",
        "type": "function",
        "z": "888dfbf1.eaaba8",
        "name": "Save config to file",
        "func": "var key = msg.topic;\nvar new_val = msg.payload;\n\nflow.set(key, new_val, \"file\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 1340,
        "wires": [
            [
                "d9c8e51d.d187d8"
            ]
        ]
    },
    {
        "id": "d9c8e51d.d187d8",
        "type": "debug",
        "z": "888dfbf1.eaaba8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 670,
        "y": 1340,
        "wires": []
    },
    {
        "id": "7817662f.e52ba8",
        "type": "semaphore-take",
        "z": "888dfbf1.eaaba8",
        "config": "977b0e52.0f681",
        "name": "Get room state lock",
        "x": 1170,
        "y": 340,
        "wires": [
            [
                "57284b45.1b0204"
            ]
        ]
    },
    {
        "id": "b9985d6f.041a2",
        "type": "semaphore-leave",
        "z": "888dfbf1.eaaba8",
        "config": "977b0e52.0f681",
        "name": "Release room state",
        "x": 1670,
        "y": 500,
        "wires": [
            [
                "745cd936.8da718"
            ]
        ]
    },
    {
        "id": "c2b93d55.8081",
        "type": "semaphore-take",
        "z": "888dfbf1.eaaba8",
        "config": "977b0e52.0f681",
        "name": "Get room state lock",
        "x": 1170,
        "y": 420,
        "wires": [
            [
                "fd3296c5.91fc98"
            ]
        ]
    },
    {
        "id": "2ca14235.3908de",
        "type": "semaphore-take",
        "z": "888dfbf1.eaaba8",
        "config": "977b0e52.0f681",
        "name": "Get room state lock",
        "x": 1170,
        "y": 500,
        "wires": [
            [
                "373f464d.3907da"
            ]
        ]
    },
    {
        "id": "eee4c1b2.44929",
        "type": "catch",
        "z": "888dfbf1.eaaba8",
        "name": "Avoid room state lockup",
        "scope": [
            "57284b45.1b0204",
            "373f464d.3907da",
            "fd3296c5.91fc98"
        ],
        "uncaught": false,
        "x": 1320,
        "y": 1160,
        "wires": [
            [
                "bcc61231.7b768",
                "ef9bd37d.d02eb"
            ]
        ]
    },
    {
        "id": "bcc61231.7b768",
        "type": "semaphore-leave",
        "z": "888dfbf1.eaaba8",
        "config": "977b0e52.0f681",
        "name": "Release room state",
        "x": 1550,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "ef9bd37d.d02eb",
        "type": "debug",
        "z": "888dfbf1.eaaba8",
        "name": "Error msg (room state)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "msg.error",
        "targetType": "jsonata",
        "x": 1560,
        "y": 1200,
        "wires": []
    },
    {
        "id": "a7c8f2c8.e5215",
        "type": "semaphore-take",
        "z": "888dfbf1.eaaba8",
        "config": "c4f7cda5.2695f",
        "name": "Get reconciliation last cmd lock",
        "x": 650,
        "y": 1100,
        "wires": [
            [
                "98d71bb6.3eb908"
            ]
        ]
    },
    {
        "id": "98d71bb6.3eb908",
        "type": "function",
        "z": "888dfbf1.eaaba8",
        "name": "Update last cmd",
        "func": "\nvar last_cmds;\nlast_cmds = global.get(\"ha_last_cmd_per_entity\");\nif (last_cmds === undefined) {\n    last_cmds = {};\n}\n\n\nmsg.this_cmd.spotlight_metadata.num_retries = 0;\n\nvar should_update = true;\nvar eid = msg.this_cmd.payload.data.entity_id;\nif (eid in last_cmds) {\n    if (new Date(last_cmds[eid].spotlight_metadata.\n            create_time) > new Date(msg.this_cmd.\n            spotlight_metadata.create_time)) {\n        // Existing last is newer -- skip\n        should_update = false;\n    }\n}\n\nif (should_update) {\n    last_cmds[msg.this_cmd.payload.data.entity_id] =\n            msg.this_cmd;\n}\n\nglobal.set(\"ha_last_cmd_per_entity\", last_cmds);\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 900,
        "y": 1100,
        "wires": [
            [
                "a834a91f.3dc2f8"
            ]
        ]
    },
    {
        "id": "a834a91f.3dc2f8",
        "type": "semaphore-leave",
        "z": "888dfbf1.eaaba8",
        "config": "c4f7cda5.2695f",
        "name": "Release reconciliation last cmd",
        "x": 1150,
        "y": 1100,
        "wires": [
            [
                "7f4d5ece.e73cf"
            ]
        ]
    },
    {
        "id": "60fa4abb.8166e4",
        "type": "catch",
        "z": "888dfbf1.eaaba8",
        "name": "Avoid reconciliation last cmd lockup",
        "scope": [
            "98d71bb6.3eb908",
            "b2fec0c4.caa81"
        ],
        "uncaught": false,
        "x": 1280,
        "y": 1280,
        "wires": [
            [
                "fff1501a.f577",
                "398dedd.2d46c12"
            ]
        ]
    },
    {
        "id": "fff1501a.f577",
        "type": "debug",
        "z": "888dfbf1.eaaba8",
        "name": "Error msg (room state)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "msg.error",
        "targetType": "jsonata",
        "x": 1560,
        "y": 1320,
        "wires": []
    },
    {
        "id": "398dedd.2d46c12",
        "type": "semaphore-leave",
        "z": "888dfbf1.eaaba8",
        "config": "c4f7cda5.2695f",
        "name": "Release reconciliation last cmd",
        "x": 1590,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "b93f5b8b.423958",
        "type": "inject",
        "z": "12fa1fa6.22a6e",
        "name": "Set reconciliation quiet/wait (s)",
        "topic": "reconciliation_quiet_wait_s",
        "payload": "10",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 180,
        "y": 620,
        "wires": [
            [
                "19f13516.48e31b"
            ]
        ]
    },
    {
        "id": "19f13516.48e31b",
        "type": "function",
        "z": "12fa1fa6.22a6e",
        "name": "Save config to file",
        "func": "var key = msg.topic;\nvar new_val = msg.payload;\n\nflow.set(key, new_val, \"file\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 580,
        "wires": [
            [
                "69697193.e5356"
            ]
        ]
    },
    {
        "id": "69697193.e5356",
        "type": "debug",
        "z": "12fa1fa6.22a6e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 650,
        "y": 580,
        "wires": []
    },
    {
        "id": "a58f0803.97c148",
        "type": "inject",
        "z": "12fa1fa6.22a6e",
        "name": "Set reconciliation check/retry (s)",
        "topic": "reconciliation_check_retry_s",
        "payload": "2",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 190,
        "y": 580,
        "wires": [
            [
                "19f13516.48e31b"
            ]
        ]
    },
    {
        "id": "815d5e59.a75d9",
        "type": "link out",
        "z": "888dfbf1.eaaba8",
        "name": "Out: Reconiliation start",
        "links": [
            "cd22c1d.c7c294"
        ],
        "x": 1575,
        "y": 1060,
        "wires": []
    },
    {
        "id": "cd22c1d.c7c294",
        "type": "link in",
        "z": "12fa1fa6.22a6e",
        "name": "In: Reconciliation start",
        "links": [
            "815d5e59.a75d9"
        ],
        "x": 215,
        "y": 140,
        "wires": [
            [
                "98d83864.947538"
            ]
        ]
    },
    {
        "id": "736f8859.8fb428",
        "type": "function",
        "z": "12fa1fa6.22a6e",
        "name": "Find unconfirmed cmds",
        "func": "\nvar quiet_wait_ms = flow.get(\n        \"reconciliation_quiet_wait_s\", \"file\") * 1000;\nvar abandon_ms = flow.get(\n        \"reconciliation_abandon_s\", \"file\") * 1000;\nvar max_retries = flow.get(\n        \"reconciliation_max_retries\", \"file\");\nvar brightness_tol = flow.get(\n        \"reconciliation_brightness_tol\", \"file\");\n\nvar last_cmds;\nlast_cmds = global.get(\"ha_last_cmd_per_entity\");\nif (last_cmds === undefined) {\n    last_cmds = {};\n}\n\nvar lights_snapshot = {}\nmsg.lights_snapshot.forEach((e) => {\n    lights_snapshot[e.entity_id] = e;\n});\n\nvar switches_snapshot = {}\nmsg.switches_snapshot.forEach((e) => {\n    switches_snapshot[e.entity_id] = e;\n});\n\n\nfunction is_state_matched(last_cmd) {\n    const entity_id = last_cmd.payload.\n            data.entity_id;\n    const domain = entity_id.split('.')[0];\n    const last_cmd_state = last_cmd.payload.\n            service.substring(5);\n    var snapshot;\n    \n    switch(domain) {\n        case 'switch':\n            snapshot = switches_snapshot[entity_id];\n            if (snapshot.state == last_cmd_state) {\n                return true;\n            }\n            break;\n        \n        case 'light':\n            snapshot = lights_snapshot[entity_id];\n            if (snapshot.state == \"on\" &&\n                    snapshot.state == last_cmd_state) {\n                var existing_brightness;\n                if (snapshot.attributes.brightness !==\n                        undefined &&\n                        Math.abs(snapshot.\n                            attributes.brightness -\n                        last_cmd.payload.data.\n                            brightness) <=\n                        brightness_tol) {\n                    return true;\n                }\n            }\n            else if (snapshot.state == last_cmd_state) {\n                return true;\n            }\n            break;\n    }\n    \n    return false;\n}\n\n\nvar unconf_payloads = [];\nfor (var e in last_cmds) {\n    var sm = last_cmds[e].spotlight_metadata;\n    \n    if (sm.is_confirmed) {\n        continue;\n    }\n    \n    if (sm.num_retries !== undefined &&\n            sm.num_retries >= max_retries) {\n        continue;\n    }\n    \n    var update_time = new Date(sm.update_time);\n    var time_now = new Date();\n    \n    if (time_now < update_time + quiet_wait_ms) {\n        continue;\n    }\n    \n    if (time_now > update_time + abandon_ms) {\n        continue;\n    }\n    \n    if (is_state_matched(last_cmds[e])) {\n        //sm.is_confirmed = true;\n        continue;\n    }\n    \n    last_cmds[e].spotlight_metadata.\n            num_retries += 1;\n    unconf_payloads.push(last_cmds[e].payload); \n}\n\nglobal.set(\"ha_last_cmd_per_entity\", last_cmds);\n\n\nvar msgs;\nif (unconf_payloads.length > 0) {\n    msg = {\n        payload: unconf_payloads,\n    };\n    \n    msgs = [\n        msg,\n        null,\n    ];\n}\nelse {\n    msg = {\n        payload: \"done\",\n    };\n    \n    msgs = [\n        null,\n        msg,\n    ];\n}\n\nreturn msgs;",
        "outputs": 2,
        "noerr": 0,
        "x": 1010,
        "y": 240,
        "wires": [
            [
                "c6a93e9d.4844d"
            ],
            [
                "7bff487f.c21e08"
            ]
        ],
        "outputLabels": [
            "unconf cmds",
            "done"
        ]
    },
    {
        "id": "17b8b3ed.90bd0c",
        "type": "delay",
        "z": "12fa1fa6.22a6e",
        "name": "Delay before check",
        "pauseType": "delayv",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 650,
        "y": 140,
        "wires": [
            [
                "e3dbba5a.e80b58"
            ]
        ]
    },
    {
        "id": "98d83864.947538",
        "type": "function",
        "z": "12fa1fa6.22a6e",
        "name": "Compose check/retry delay",
        "func": "var check_retry_ms = flow.get(\n        \"reconciliation_check_retry_s\", \"file\") * 1000;\n\nmsg = {}\nmsg.delay = check_retry_ms;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 400,
        "y": 140,
        "wires": [
            [
                "17b8b3ed.90bd0c"
            ]
        ]
    },
    {
        "id": "37c002fb.384c6e",
        "type": "inject",
        "z": "12fa1fa6.22a6e",
        "name": "Set reconciliation abandon (s)",
        "topic": "reconciliation_abandon_s",
        "payload": "30",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 180,
        "y": 660,
        "wires": [
            [
                "19f13516.48e31b"
            ]
        ]
    },
    {
        "id": "d693fea0.db2e1",
        "type": "inject",
        "z": "12fa1fa6.22a6e",
        "name": "Set reconciliation max retries (s)",
        "topic": "reconciliation_max_retries",
        "payload": "1",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 190,
        "y": 700,
        "wires": [
            [
                "19f13516.48e31b"
            ]
        ]
    },
    {
        "id": "8ca2829d.b4d16",
        "type": "ha-get-entities",
        "z": "12fa1fa6.22a6e",
        "server": "2f5bd1e0.67e40e",
        "name": "Get light states",
        "rules": [
            {
                "property": "entity_id",
                "logic": "starts_with",
                "value": "light.",
                "valueType": "str"
            }
        ],
        "output_type": "array",
        "output_empty_results": false,
        "output_location_type": "msg",
        "output_location": "lights_snapshot",
        "output_results_count": 1,
        "x": 1080,
        "y": 60,
        "wires": [
            [
                "5b51cf6b.a4cd6"
            ]
        ]
    },
    {
        "id": "5b51cf6b.a4cd6",
        "type": "ha-get-entities",
        "z": "12fa1fa6.22a6e",
        "server": "2f5bd1e0.67e40e",
        "name": "Get switch states",
        "rules": [
            {
                "property": "entity_id",
                "logic": "starts_with",
                "value": "switch.",
                "valueType": "str"
            }
        ],
        "output_type": "array",
        "output_empty_results": false,
        "output_location_type": "msg",
        "output_location": "switches_snapshot",
        "output_results_count": 1,
        "x": 1110,
        "y": 140,
        "wires": [
            [
                "a3f39930.7da5f8"
            ]
        ]
    },
    {
        "id": "f9d4574f.91ffe8",
        "type": "semaphore-take",
        "z": "12fa1fa6.22a6e",
        "config": "c4f7cda5.2695f",
        "name": "Get reconciliation last cmd lock",
        "x": 710,
        "y": 260,
        "wires": [
            [
                "736f8859.8fb428",
                "70967803.8c45b8"
            ]
        ]
    },
    {
        "id": "c6a93e9d.4844d",
        "type": "semaphore-leave",
        "z": "12fa1fa6.22a6e",
        "config": "c4f7cda5.2695f",
        "name": "Release reconciliation last cmd",
        "x": 1290,
        "y": 220,
        "wires": [
            [
                "8177811b.c1848",
                "30e038c.86926c8"
            ]
        ]
    },
    {
        "id": "25b75c78.df3434",
        "type": "catch",
        "z": "12fa1fa6.22a6e",
        "name": "Avoid reconciliation last cmd lockup",
        "scope": [
            "736f8859.8fb428"
        ],
        "uncaught": false,
        "x": 980,
        "y": 580,
        "wires": [
            [
                "e3047033.7b913",
                "98ffb4bd.00f768"
            ]
        ]
    },
    {
        "id": "e3047033.7b913",
        "type": "debug",
        "z": "12fa1fa6.22a6e",
        "name": "Error msg (reconciliation last cmd)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "msg.error",
        "targetType": "jsonata",
        "x": 1300,
        "y": 640,
        "wires": []
    },
    {
        "id": "98ffb4bd.00f768",
        "type": "semaphore-leave",
        "z": "12fa1fa6.22a6e",
        "config": "c4f7cda5.2695f",
        "name": "Release reconciliation last cmd",
        "x": 1290,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "e3dbba5a.e80b58",
        "type": "function",
        "z": "12fa1fa6.22a6e",
        "name": "Time to check any?",
        "func": "\nvar quiet_wait_ms = flow.get(\n        \"reconciliation_quiet_wait_s\", \"file\") * 1000;\nvar abandon_ms = flow.get(\n        \"reconciliation_abandon_s\", \"file\") * 1000;\nvar max_retries = flow.get(\n        \"reconciliation_max_retries\", \"file\");\n\nvar last_cmds;\nlast_cmds = global.get(\"ha_last_cmd_per_entity\");\nif (last_cmds === undefined) {\n    last_cmds = {};\n}\n\n\nvar any_below_quiet_time = false;\nvar any_below_abandon_time = false;\nvar any_retries_remaining = false;\nfor (var e in last_cmds) {\n    var sm = last_cmds[e].spotlight_metadata;\n    \n    var update_time = new Date(sm.update_time);\n    var time_now = new Date();\n    \n    if (time_now < update_time + quiet_wait_ms) {\n        any_below_quiet_time = true;\n        break;\n    }\n    \n    if (time_now < update_time + abandon_ms) {\n        any_below_abandon_time = true;\n        break;\n    }\n    \n    if (sm.num_retries < max_retries) {\n        any_retries_remaining = true;\n        break;\n    }\n}\n\n\nvar msgs;\nif (any_below_quiet_time) {\n    msgs = [\n        null,\n        msg,\n        null\n    ];\n}\nelse if (any_below_abandon_time ||\n        any_retries_remaining) {\n    msgs = [\n        msg,\n        null,\n        null,\n    ];\n}\nelse {\n    msgs = [\n        null,\n        null,\n        msg,\n    ];\n}\n\nreturn msgs;",
        "outputs": 3,
        "noerr": 0,
        "x": 850,
        "y": 80,
        "wires": [
            [
                "8ca2829d.b4d16"
            ],
            [
                "17b8b3ed.90bd0c"
            ],
            [
                "2bd4cbdf.a99304"
            ]
        ],
        "outputLabels": [
            "yes",
            "no",
            "none"
        ]
    },
    {
        "id": "7bff487f.c21e08",
        "type": "semaphore-leave",
        "z": "12fa1fa6.22a6e",
        "config": "c4f7cda5.2695f",
        "name": "Release reconciliation last cmd",
        "x": 1290,
        "y": 300,
        "wires": [
            [
                "5b317c01.058694"
            ]
        ]
    },
    {
        "id": "db53a4df.c0e328",
        "type": "delay",
        "z": "12fa1fa6.22a6e",
        "name": "Limit msg rate to not overload Hue",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 920,
        "y": 340,
        "wires": [
            [
                "a9f288a6.910ed8"
            ]
        ]
    },
    {
        "id": "a9f288a6.910ed8",
        "type": "api-call-service",
        "z": "12fa1fa6.22a6e",
        "name": "Send HA cmd",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "",
        "service": "",
        "entityId": "",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "payload",
        "output_location_type": "msg",
        "mustacheAltTags": false,
        "x": 700,
        "y": 400,
        "wires": [
            [
                "481bce75.0f786"
            ]
        ]
    },
    {
        "id": "a3f39930.7da5f8",
        "type": "semaphore-take",
        "z": "12fa1fa6.22a6e",
        "config": "8f718bb8.e27f08",
        "name": "Get reconciliation HA dequeue loop lock",
        "x": 680,
        "y": 200,
        "wires": [
            [
                "f9d4574f.91ffe8"
            ]
        ]
    },
    {
        "id": "edcd08e6.97bb48",
        "type": "semaphore-leave",
        "z": "12fa1fa6.22a6e",
        "config": "8f718bb8.e27f08",
        "name": "Release reconciliation dequeue loop lock",
        "x": 360,
        "y": 480,
        "wires": [
            [
                "98d83864.947538"
            ]
        ]
    },
    {
        "id": "2bd4cbdf.a99304",
        "type": "api-call-service",
        "z": "12fa1fa6.22a6e",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Reconciliation flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1600,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "d78e4f4a.1ca7b",
        "type": "catch",
        "z": "12fa1fa6.22a6e",
        "name": "Avoid reconciliation HA dequeue loop lockup",
        "scope": [
            "736f8859.8fb428",
            "f9d4574f.91ffe8",
            "c6a93e9d.4844d",
            "7bff487f.c21e08",
            "db53a4df.c0e328",
            "a9f288a6.910ed8"
        ],
        "uncaught": false,
        "x": 950,
        "y": 720,
        "wires": [
            [
                "333edccb.d7a8d4",
                "fb9968d8.2e3ba8"
            ]
        ]
    },
    {
        "id": "333edccb.d7a8d4",
        "type": "debug",
        "z": "12fa1fa6.22a6e",
        "name": "Error msg (reconciliation HA dequeue loop)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "msg.error",
        "targetType": "jsonata",
        "x": 1330,
        "y": 780,
        "wires": []
    },
    {
        "id": "8177811b.c1848",
        "type": "split",
        "z": "12fa1fa6.22a6e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 670,
        "y": 340,
        "wires": [
            [
                "db53a4df.c0e328"
            ]
        ]
    },
    {
        "id": "481bce75.0f786",
        "type": "join",
        "z": "12fa1fa6.22a6e",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 900,
        "y": 400,
        "wires": [
            [
                "edcd08e6.97bb48"
            ]
        ]
    },
    {
        "id": "5b317c01.058694",
        "type": "semaphore-leave",
        "z": "12fa1fa6.22a6e",
        "config": "8f718bb8.e27f08",
        "name": "Release reconciliation dequeue loop lock",
        "x": 1320,
        "y": 360,
        "wires": [
            [
                "2bd4cbdf.a99304"
            ]
        ]
    },
    {
        "id": "fb9968d8.2e3ba8",
        "type": "semaphore-leave",
        "z": "12fa1fa6.22a6e",
        "config": "8f718bb8.e27f08",
        "name": "Release reconciliation dequeue loop lock",
        "x": 1320,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "1367217c.406f1f",
        "type": "inject",
        "z": "12fa1fa6.22a6e",
        "name": "Set reconciliation brightness tolerance (255 scale)",
        "topic": "reconciliation_brightness_tol",
        "payload": "1",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 240,
        "y": 740,
        "wires": [
            [
                "19f13516.48e31b"
            ]
        ]
    },
    {
        "id": "30e038c.86926c8",
        "type": "debug",
        "z": "12fa1fa6.22a6e",
        "name": "Confession",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1580,
        "y": 220,
        "wires": []
    },
    {
        "id": "70967803.8c45b8",
        "type": "debug",
        "z": "12fa1fa6.22a6e",
        "name": "In",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 950,
        "y": 200,
        "wires": []
    },
    {
        "id": "bd2e1dde.2d1d5",
        "type": "semaphore-take",
        "z": "888dfbf1.eaaba8",
        "config": "c4f7cda5.2695f",
        "name": "Get reconciliation last cmd lock",
        "x": 650,
        "y": 800,
        "wires": [
            [
                "b2fec0c4.caa81"
            ]
        ]
    },
    {
        "id": "a647690d.d29958",
        "type": "semaphore-leave",
        "z": "888dfbf1.eaaba8",
        "config": "c4f7cda5.2695f",
        "name": "Release reconciliation last cmd",
        "x": 1230,
        "y": 800,
        "wires": [
            [
                "b47632e1.ac4d2"
            ]
        ]
    },
    {
        "id": "b2fec0c4.caa81",
        "type": "function",
        "z": "888dfbf1.eaaba8",
        "name": "Update last cmds for skips",
        "func": "\nvar last_cmds = {};\nlast_cmds = global.get(\"ha_last_cmd_per_entity\");\nif (last_cmds === undefined) {\n    last_cmds = {};\n}\n\n\nmsg.skip_data.forEach((e) => {\n    var eid = e.payload.data.entity_id;\n    \n    if (eid in last_cmds) {\n        if (new Date(last_cmds[eid].\n                spotlight_metadata.create_time) >\n                new Date(e.spotlight_metadata.\n                create_time)) {\n            // Will not overwrite newer cmd\n            return;\n        }\n    }\n    \n    e.spotlight_metadata.is_time_confirmed =\n            \"skipped\";\n    e.spotlight_metadata.num_retries = 0;\n    last_cmds[eid] = e;\n});\n\n\nglobal.set(\"ha_last_cmd_per_entity\", last_cmds);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 940,
        "y": 800,
        "wires": [
            [
                "a647690d.d29958"
            ]
        ]
    },
    {
        "id": "71655899.33d148",
        "type": "switch",
        "z": "1e7298d6.94a3d7",
        "name": "Is on button?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^on-[a-zA-Z\\-]+$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 380,
        "wires": [
            [
                "7880588.3c5ada8",
                "d72cbb88.c73348"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "22ec9c7a.9d3104",
        "type": "api-call-service",
        "z": "1e7298d6.94a3d7",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Guest Bedroom Switch flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 2060,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "6670e06c.8ba9a",
        "type": "comment",
        "z": "1e7298d6.94a3d7",
        "name": "Philips Hue dimmer event codes / MQTT payloads",
        "info": "## Samsung switch events\n\n### Which button\n - 1xxx / on-<event>: On\n - 2xxx / up-<event>: Brighter\n - 3xxx / down/<event>: Darker\n - 4xxx / off-<event>: Off\n\n### Which event (deconz)\n - xxx0: Button down-press\n - xxx1: Periodic hold report (1 per sec)\n - xxx2: Button up-release (not held)\n - xxx3: Button up-release (after held)\n\n### Which event (zigbee2mqtt)\n - <btn>-press: Button single press and release\n - <btn>-hold: Button hold (1 per sec)\n - <btn>-hold-release: Button up-release (after held)",
        "x": 310,
        "y": 300,
        "wires": []
    },
    {
        "id": "18e1d0b9.e23c1f",
        "type": "switch",
        "z": "1e7298d6.94a3d7",
        "name": "Is brighter button?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^up-[a-zA-Z\\-]+$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 580,
        "wires": [
            [
                "e94f5a73.edc8d8",
                "f376d59a.36dff8"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "d0c2115c.d57b7",
        "type": "switch",
        "z": "1e7298d6.94a3d7",
        "name": "Is darker button?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^down-[a-zA-Z\\-]+$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 780,
        "wires": [
            [
                "a3ea8d74.0234e",
                "4190e622.d79c68"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "14eb87ba.7b5968",
        "type": "switch",
        "z": "1e7298d6.94a3d7",
        "name": "Is off button?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^off-[a-zA-Z\\-]+$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 980,
        "wires": [
            [
                "af7e009a.58b7c",
                "a004a49e.346648"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "7880588.3c5ada8",
        "type": "switch",
        "z": "1e7298d6.94a3d7",
        "name": "Is held?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-hold$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 720,
        "y": 340,
        "wires": [
            [
                "5fca319c.ef0cd"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "d72cbb88.c73348",
        "type": "switch",
        "z": "1e7298d6.94a3d7",
        "name": "Was tapped?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-press$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 730,
        "y": 420,
        "wires": [
            [
                "7be4a30e.657b1c"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "e94f5a73.edc8d8",
        "type": "switch",
        "z": "1e7298d6.94a3d7",
        "name": "Is held?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-hold$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 720,
        "y": 540,
        "wires": [
            [
                "e39a03b4.810ec"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "f376d59a.36dff8",
        "type": "switch",
        "z": "1e7298d6.94a3d7",
        "name": "Was tapped?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-press$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 730,
        "y": 620,
        "wires": [
            [
                "e39a03b4.810ec"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "a3ea8d74.0234e",
        "type": "switch",
        "z": "1e7298d6.94a3d7",
        "name": "Is held?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-hold$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 720,
        "y": 740,
        "wires": [
            [
                "8cccb91f.05d898"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "4190e622.d79c68",
        "type": "switch",
        "z": "1e7298d6.94a3d7",
        "name": "Was tapped?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-press$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 730,
        "y": 820,
        "wires": [
            [
                "8cccb91f.05d898"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "af7e009a.58b7c",
        "type": "switch",
        "z": "1e7298d6.94a3d7",
        "name": "Is held?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-hold$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 720,
        "y": 940,
        "wires": [
            [
                "6d36954b.d913cc"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "a004a49e.346648",
        "type": "switch",
        "z": "1e7298d6.94a3d7",
        "name": "Was tapped?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^[a-zA-Z]+-press$",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 730,
        "y": 1020,
        "wires": [
            [
                "f9afecf4.db4f7"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "11b07c3e.840ed4",
        "type": "api-call-service",
        "z": "1e7298d6.94a3d7",
        "name": "Turn on guest bedroom lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.guest_bedroom",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1520,
        "y": 420,
        "wires": [
            [
                "731eed8c.a3c2b4"
            ]
        ]
    },
    {
        "id": "c5232e23.8cfbf",
        "type": "api-call-service",
        "z": "1e7298d6.94a3d7",
        "name": "Turn off living room lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_off",
        "entityId": "light.guest_bedroom",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1510,
        "y": 1020,
        "wires": [
            [
                "731eed8c.a3c2b4"
            ]
        ]
    },
    {
        "id": "d9b7a2c6.c536",
        "type": "ha-get-entities",
        "z": "1e7298d6.94a3d7",
        "server": "2f5bd1e0.67e40e",
        "name": "Get individual light states",
        "rules": [
            {
                "property": "",
                "logic": "jsonata",
                "value": "$exists($entity().attributes.is_hue_group) = false",
                "valueType": "jsonata"
            },
            {
                "property": "entity_id",
                "logic": "starts_with",
                "value": "light.",
                "valueType": "str"
            },
            {
                "property": "entity_id",
                "logic": "in_group",
                "value": "light.guest_bedroom_individual",
                "valueType": "str"
            }
        ],
        "output_type": "array",
        "output_empty_results": false,
        "output_location_type": "msg",
        "output_location": "payload",
        "output_results_count": 1,
        "x": 1170,
        "y": 600,
        "wires": [
            [
                "69d6e87d.f554a8"
            ]
        ],
        "info": "This filters out hue groups since lights within a group may have different settings (which it looks like Hue just \"averages\" the settings to report a single number set for all of the lights)."
    },
    {
        "id": "e01fe9f9.36b6d8",
        "type": "function",
        "z": "1e7298d6.94a3d7",
        "name": "Inc or dec brightness by 10%",
        "func": "var min_bright = null;\nvar max_bright = null;\nvar new_bright = null;\n\nvar inc_dec_pct = 0.1;\n\nconst src_payload = msg.payloads_merged;\n\n\nfunction inc_bright(old_bright) {\n    if (!old_bright) {\n        return null;\n    }\n    \n    // Add 1 in case off from last conversion\n    var old_bright_pct = (old_bright+1)/255;\n    var new_bright_pct = old_bright_pct + inc_dec_pct;\n    // Want to round to nearest 10%\n    new_bright_pct = Math.round(new_bright_pct*10)/10;\n    \n    var new_inc_bright = Math.round(new_bright_pct * 255);\n    new_inc_bright = Math.min(new_inc_bright, 255);\n    return new_inc_bright;\n}\n\n\nfunction dec_bright(old_bright) {\n    if (!old_bright) {\n        return null;\n    }\n    \n    // Subtract 1 in case off from last conversion\n    var old_bright_pct = (old_bright-1)/255;\n    var new_bright_pct = old_bright_pct - inc_dec_pct;\n    // Want to round to nearest 10%\n    new_bright_pct = Math.round(new_bright_pct*10)/10;\n    \n    var new_dec_bright = Math.round(new_bright_pct * 255);\n    new_dec_bright = Math.max(new_dec_bright, 1);\n    return new_dec_bright;\n}\n\n\nsrc_payload.forEach(function(value, index) {\n    if (!(value.attributes.brightness)) {\n        return;\n    }\n    \n    if (min_bright===null ||\n            value.attributes.brightness < min_bright) {\n        min_bright = value.attributes.brightness;\n    }\n    \n    if (max_bright===null ||\n            value.attributes.brightness > max_bright) {\n        max_bright = value.attributes.brightness;\n    }\n})\n\n\nif (msg.config.inc_or_dec == \"increase\") {\n    new_bright = inc_bright(min_bright)\n} else if (msg.config.inc_or_dec == \"decrease\") {\n    new_bright = dec_bright(max_bright)\n}\n// Else leave new_bright as null\n\nif (new_bright===null) {\n    return null;\n}\n\nmsg.config.new_brightness = new_bright;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1220,
        "y": 680,
        "wires": [
            [
                "58919470.35a0fc"
            ]
        ]
    },
    {
        "id": "e39a03b4.810ec",
        "type": "change",
        "z": "1e7298d6.94a3d7",
        "name": "Flag to increase",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "config.inc_or_dec",
                "pt": "msg",
                "to": "increase",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 540,
        "wires": [
            [
                "d9b7a2c6.c536"
            ]
        ]
    },
    {
        "id": "8cccb91f.05d898",
        "type": "change",
        "z": "1e7298d6.94a3d7",
        "name": "Flag to decrease",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "config.inc_or_dec",
                "pt": "msg",
                "to": "decrease",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 740,
        "wires": [
            [
                "d9b7a2c6.c536"
            ]
        ]
    },
    {
        "id": "58919470.35a0fc",
        "type": "function",
        "z": "1e7298d6.94a3d7",
        "name": "All or individual lights?",
        "func": "var new_payloads = [];\nvar new_cache_data = {};\n\nconst src_payload = msg.payloads_merged;\n\n\nsrc_payload.forEach((e) => {\n    var change_brightness = true;\n    if (e.state == \"off\") {\n        change_brightness = false;\n    } else if (msg.config.inc_or_dec == \"increase\") {\n        if (e.attributes.brightness >=\n                msg.config.new_brightness) {\n            change_brightness = false;\n        }\n    } else if (msg.config.inc_or_dec == \"decrease\") {\n        if (e.attributes.brightness <=\n                msg.config.new_brightness) {\n            change_brightness = false;\n        }\n    } else {\n        change_brightness = false;\n    }\n    \n    var cache_data;\n    if (change_brightness) {\n        const payload = {};\n        payload.domain = \"light\";\n        payload.service = \"turn_on\";\n        payload.data = {\n            entity_id: e.entity_id,\n            brightness: msg.config.new_brightness,\n        }\n        \n        cache_data = {\n            entity_id: e.entity_id,\n            state: \"on\",\n            brightness: msg.config.new_brightness\n        };\n        \n        new_payloads.push(payload);\n    } else {\n        if (e.state == \"off\") {\n            cache_data = {\n                entity_id: e.entity_id,\n                state: \"off\"\n            };\n        } else {\n            cache_data = {\n                entity_id: e.entity_id,\n                state: \"on\",\n                brightness: e.attributes.brightness\n            };\n        }\n    }\n    \n    new_cache_data[e.entity_id] = cache_data;\n});\n\nif (src_payload.length == new_payloads.length) {\n    msg.cache_data_new = {\n        all: {\n            state: \"on\",\n            brightness: msg.config.new_brightness\n        }\n    };\n    return [msg, null];\n}\n\nnew_msg = {\n    payload: new_payloads,\n    cache_data_new: {\n        individual: new_cache_data\n    }\n};\n\nreturn [null, new_msg];",
        "outputs": 2,
        "noerr": 0,
        "x": 1240,
        "y": 740,
        "wires": [
            [
                "f77dec46.49d82"
            ],
            [
                "98944920.ef65b8"
            ]
        ]
    },
    {
        "id": "f77dec46.49d82",
        "type": "api-call-service",
        "z": "1e7298d6.94a3d7",
        "name": "Set brightness for all lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.guest_bedroom",
        "data": "{\t    \"brightness\": msg.config.new_brightness\t}",
        "dataType": "jsonata",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1520,
        "y": 700,
        "wires": [
            [
                "731eed8c.a3c2b4"
            ]
        ]
    },
    {
        "id": "fb1dd8a9.e8d0b8",
        "type": "api-call-service",
        "z": "1e7298d6.94a3d7",
        "name": "Set brightness for some lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "",
        "service": "",
        "entityId": "",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "payload",
        "output_location_type": "msg",
        "mustacheAltTags": false,
        "x": 1530,
        "y": 780,
        "wires": [
            [
                "acbadb2.82e2728"
            ]
        ]
    },
    {
        "id": "5aca8321.59ee4c",
        "type": "api-call-service",
        "z": "1e7298d6.94a3d7",
        "name": "Turn on guest bedroom lights max",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.guest_bedroom",
        "data": "{\"brightness_pct\":100}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1500,
        "y": 340,
        "wires": [
            [
                "731eed8c.a3c2b4"
            ]
        ]
    },
    {
        "id": "731b6df7.dd1c04",
        "type": "api-call-service",
        "z": "1e7298d6.94a3d7",
        "name": "Turn on guest bedroom lights min",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.guest_bedroom",
        "data": "{\"brightness_pct\":1}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1480,
        "y": 940,
        "wires": [
            [
                "731eed8c.a3c2b4"
            ]
        ]
    },
    {
        "id": "8815138d.39ffb",
        "type": "switch",
        "z": "bf163cd5.f84c",
        "name": "Is held?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "hold",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 420,
        "wires": [
            [
                "5ee1e3d2.fa8e1c"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "5ee1e3d2.fa8e1c",
        "type": "api-current-state",
        "z": "bf163cd5.f84c",
        "name": "Light already on?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "light.office",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 650,
        "y": 420,
        "wires": [
            [
                "ea88a210.c4a3c"
            ],
            [
                "96879477.6a6658"
            ]
        ]
    },
    {
        "id": "96879477.6a6658",
        "type": "api-call-service",
        "z": "bf163cd5.f84c",
        "name": "Turn on office lights max",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.office",
        "data": "{\"brightness_pct\":100}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 890,
        "y": 460,
        "wires": [
            [
                "ac86b665.134f48"
            ]
        ]
    },
    {
        "id": "80059bb6.bce928",
        "type": "ha-get-entities",
        "z": "bf163cd5.f84c",
        "server": "2f5bd1e0.67e40e",
        "name": "Get individual light states",
        "rules": [
            {
                "property": "",
                "logic": "jsonata",
                "value": "$exists($entity().attributes.is_hue_group) = false",
                "valueType": "jsonata"
            },
            {
                "property": "entity_id",
                "logic": "starts_with",
                "value": "light.",
                "valueType": "str"
            },
            {
                "property": "entity_id",
                "logic": "in_group",
                "value": "light.office_individual",
                "valueType": "str"
            }
        ],
        "output_type": "array",
        "output_empty_results": false,
        "output_location_type": "msg",
        "output_location": "payload",
        "output_results_count": 1,
        "x": 870,
        "y": 180,
        "wires": [
            [
                "62dadee2.d609a"
            ]
        ],
        "info": "This filters out hue groups since lights within a group may have different settings (which it looks like Hue just \"averages\" the settings to report a single number set for all of the lights)."
    },
    {
        "id": "62dadee2.d609a",
        "type": "function",
        "z": "bf163cd5.f84c",
        "name": "Inc or dec brightness by 10%",
        "func": "var min_bright = null;\nvar max_bright = null;\nvar new_bright = null;\n\nvar inc_dec_pct = 0.1;\n\nfunction inc_bright(old_bright) {\n    if (!old_bright) {\n        return null;\n    }\n    \n    // Add 1 in case off from last conversion\n    var old_bright_pct = (old_bright+1)/255;\n    var new_bright_pct = old_bright_pct + inc_dec_pct;\n    // Want to round to nearest 10%\n    new_bright_pct = Math.round(new_bright_pct*10)/10;\n    \n    var new_inc_bright = Math.round(new_bright_pct * 255);\n    new_inc_bright = Math.min(new_inc_bright, 255);\n    return new_inc_bright;\n}\n\n\nfunction dec_bright(old_bright) {\n    if (!old_bright) {\n        return null;\n    }\n    \n    // Subtract 1 in case off from last conversion\n    var old_bright_pct = (old_bright-1)/255;\n    var new_bright_pct = old_bright_pct - inc_dec_pct;\n    // Want to round to nearest 10%\n    new_bright_pct = Math.round(new_bright_pct*10)/10;\n    \n    var new_dec_bright = Math.round(new_bright_pct * 255);\n    new_dec_bright = Math.max(new_dec_bright, 1);\n    return new_dec_bright;\n}\n\n\nmsg.payload.forEach(function(value, index) {\n    if (!(value.attributes.brightness)) {\n        return;\n    }\n    \n    if (min_bright===null ||\n            value.attributes.brightness < min_bright) {\n        min_bright = value.attributes.brightness;\n    }\n    \n    if (max_bright===null ||\n            value.attributes.brightness > max_bright) {\n        max_bright = value.attributes.brightness;\n    }\n})\n\n\nif (msg.config.inc_or_dec == 'increase') {\n    new_bright = inc_bright(min_bright)\n} else if (msg.config.inc_or_dec == 'decrease') {\n    new_bright = dec_bright(max_bright)\n}\n// Else leave new_bright as null\n\nif (new_bright===null) {\n    return null;\n}\n\nmsg.config.new_brightness = new_bright;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 920,
        "y": 260,
        "wires": [
            [
                "c44db098.7ac34"
            ]
        ]
    },
    {
        "id": "ea88a210.c4a3c",
        "type": "change",
        "z": "bf163cd5.f84c",
        "name": "Flag to decrease",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "config.inc_or_dec",
                "pt": "msg",
                "to": "decrease",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 340,
        "wires": [
            [
                "80059bb6.bce928"
            ]
        ]
    },
    {
        "id": "c44db098.7ac34",
        "type": "function",
        "z": "bf163cd5.f84c",
        "name": "All or individual lights?",
        "func": "var new_msgs = [];\n\nmsg.payload.forEach((e) => {\n    if (e.state == 'off') {\n        return;\n    }\n    \n    if (msg.config.inc_or_dec == 'increase') {\n        if (e.attributes.brightness >=\n                msg.config.new_brightness) {\n            return;\n        }\n    } else if (msg.config.inc_or_dec == 'decrease') {\n        if (e.attributes.brightness <=\n                msg.config.new_brightness) {\n            return;\n        }\n    } else {\n        return;\n    }\n    \n    const payload = {};\n    payload.domain = 'light';\n    payload.service = 'turn_on';\n    payload.data = {\n        entity_id: e.entity_id,\n        brightness: msg.config.new_brightness,\n    }\n    \n    new_msgs.push({ payload: payload });\n});\n\nif (msg.payload.length == new_msgs.length) {\n    return [msg, null];\n}\n\nreturn [null, new_msgs];",
        "outputs": 2,
        "noerr": 0,
        "x": 940,
        "y": 320,
        "wires": [
            [
                "8fb91b43.688418"
            ],
            [
                "e3d6fb50.6113a8"
            ]
        ]
    },
    {
        "id": "8fb91b43.688418",
        "type": "api-call-service",
        "z": "bf163cd5.f84c",
        "name": "Set brightness for all lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.office",
        "data": "{\t    \"brightness\": msg.config.new_brightness\t}",
        "dataType": "jsonata",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1220,
        "y": 280,
        "wires": [
            [
                "ac86b665.134f48"
            ]
        ]
    },
    {
        "id": "e3d6fb50.6113a8",
        "type": "api-call-service",
        "z": "bf163cd5.f84c",
        "name": "Set brightness for some lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "",
        "service": "",
        "entityId": "",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "payload",
        "output_location_type": "msg",
        "mustacheAltTags": false,
        "x": 1230,
        "y": 360,
        "wires": [
            [
                "869fe5d6.59c7a8"
            ]
        ]
    },
    {
        "id": "869fe5d6.59c7a8",
        "type": "change",
        "z": "bf163cd5.f84c",
        "name": "Clear payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 420,
        "wires": [
            [
                "ac86b665.134f48"
            ]
        ]
    },
    {
        "id": "c9cd8efc.d3b35",
        "type": "switch",
        "z": "bf163cd5.f84c",
        "name": "Is double press?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "double",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 460,
        "y": 620,
        "wires": [
            [
                "c455e19b.e7c32"
            ]
        ],
        "info": "### Samsung button event codes\n - 1001: Long press\n - 1002: Single press\n - 1004: Double press"
    },
    {
        "id": "c455e19b.e7c32",
        "type": "api-current-state",
        "z": "bf163cd5.f84c",
        "name": "Light already on?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "light.office",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 690,
        "y": 620,
        "wires": [
            [
                "6e82096a.edb6d8"
            ],
            [
                "ea88a210.c4a3c"
            ]
        ]
    },
    {
        "id": "6e82096a.edb6d8",
        "type": "ha-get-entities",
        "z": "bf163cd5.f84c",
        "server": "2f5bd1e0.67e40e",
        "name": "Get individual light states",
        "rules": [
            {
                "property": "",
                "logic": "jsonata",
                "value": "$exists($entity().attributes.is_hue_group) = false",
                "valueType": "jsonata"
            },
            {
                "property": "entity_id",
                "logic": "starts_with",
                "value": "light.",
                "valueType": "str"
            },
            {
                "property": "entity_id",
                "logic": "in_group",
                "value": "light.office_individual",
                "valueType": "str"
            }
        ],
        "output_type": "array",
        "output_empty_results": false,
        "output_location_type": "msg",
        "output_location": "payload",
        "output_results_count": 1,
        "x": 710,
        "y": 700,
        "wires": [
            [
                "63425e3f.8ce22"
            ]
        ],
        "info": "This filters out hue groups since lights within a group may have different settings (which it looks like Hue just \"averages\" the settings to report a single number set for all of the lights)."
    },
    {
        "id": "63425e3f.8ce22",
        "type": "function",
        "z": "bf163cd5.f84c",
        "name": "Flag for warm or cool",
        "func": "const warm_ct_kelvin = 3200;\nconst cool_ct_kelvin = 6400;\n\nconst threshold_ct_kelvin = (warm_ct_kelvin +\n        cool_ct_kelvin)/2;\n\nvar existing_ct_run_sum_kelvin = 0;\nvar existing_ct_count_kelvin = 0;\n\n\nmsg.payload.forEach(function(value, index) {\n    if (!(value.attributes.color_temp)) {\n        return;\n    }\n    \n    var existing_ct_mirek = value.attributes.color_temp;\n    var existing_ct_kelvin = 1e6 / existing_ct_mirek;\n    \n    existing_ct_run_sum_kelvin += existing_ct_kelvin;\n    existing_ct_count_kelvin++;\n})\n\n\nvar new_ct_kelvin = null;\n\nif (existing_ct_count_kelvin > 0) {\n    const existing_ct_avg_kelvin = existing_ct_run_sum_kelvin /\n            existing_ct_count_kelvin;\n    \n    if (existing_ct_avg_kelvin >= threshold_ct_kelvin) {\n        new_ct_kelvin = warm_ct_kelvin;\n    } else {\n        new_ct_kelvin = cool_ct_kelvin;\n    }\n}\n// Else leave new_ct_kelvin as null\n\nif (new_ct_kelvin===null) {\n    return null;\n}\n\nmsg.config = {};\nmsg.config.new_ct_kelvin = new_ct_kelvin;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 720,
        "y": 760,
        "wires": [
            [
                "bf41deda.320fc"
            ]
        ]
    },
    {
        "id": "bf41deda.320fc",
        "type": "function",
        "z": "bf163cd5.f84c",
        "name": "All or individual lights?",
        "func": "var new_msgs = [];\n\nmsg.payload.forEach((e) => {\n    if (e.state == 'off') {\n        return;\n    }\n    \n    const payload = {};\n    payload.domain = 'light';\n    payload.service = 'turn_on';\n    payload.data = {\n        entity_id: e.entity_id,\n        kelvin: msg.config.new_ct_kelvin,\n    }\n    \n    new_msgs.push({ payload: payload });\n});\n\nif (msg.payload.length == new_msgs.length) {\n    return [msg, null];\n}\n\nreturn [null, new_msgs];",
        "outputs": 2,
        "noerr": 0,
        "x": 760,
        "y": 820,
        "wires": [
            [
                "3802ddc8.ca6322"
            ],
            [
                "24b82f48.d227c"
            ]
        ]
    },
    {
        "id": "3802ddc8.ca6322",
        "type": "api-call-service",
        "z": "bf163cd5.f84c",
        "name": "Set temperature for all lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.office",
        "data": "{\t    \"kelvin\": msg.config.new_ct_kelvin\t}",
        "dataType": "jsonata",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1040,
        "y": 780,
        "wires": [
            [
                "ac86b665.134f48"
            ]
        ]
    },
    {
        "id": "24b82f48.d227c",
        "type": "api-call-service",
        "z": "bf163cd5.f84c",
        "name": "Set temperature for some lights",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "",
        "service": "",
        "entityId": "",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "payload",
        "output_location_type": "msg",
        "mustacheAltTags": false,
        "x": 1050,
        "y": 860,
        "wires": [
            [
                "8dcc9323.5f136"
            ]
        ]
    },
    {
        "id": "8dcc9323.5f136",
        "type": "change",
        "z": "bf163cd5.f84c",
        "name": "Clear payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 920,
        "wires": [
            [
                "ac86b665.134f48"
            ]
        ]
    },
    {
        "id": "bf6ab1c3.ff541",
        "type": "api-call-service",
        "z": "e7792035.7e5bc",
        "name": "Turn on Christmas Trees",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "switch",
        "service": "turn_on",
        "entityId": "group.christmas_trees",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 390,
        "y": 440,
        "wires": [
            [
                "d06fb1d3.d3c97"
            ]
        ]
    },
    {
        "id": "2402d811.edc588",
        "type": "api-call-service",
        "z": "e7792035.7e5bc",
        "name": "Turn off Christmas Trees",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "switch",
        "service": "turn_off",
        "entityId": "group.christmas_trees",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 390,
        "y": 520,
        "wires": [
            [
                "d06fb1d3.d3c97"
            ]
        ]
    },
    {
        "id": "aafe031.99353",
        "type": "inject",
        "z": "e7792035.7e5bc",
        "name": "Enter evening",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "00 16 * * *",
        "once": false,
        "onceDelay": 0.1,
        "x": 160,
        "y": 440,
        "wires": [
            [
                "bf6ab1c3.ff541"
            ]
        ]
    },
    {
        "id": "9066deb4.ad17f",
        "type": "inject",
        "z": "e7792035.7e5bc",
        "name": "Exit evening",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "00 23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "x": 160,
        "y": 520,
        "wires": [
            [
                "2402d811.edc588"
            ]
        ]
    },
    {
        "id": "d06fb1d3.d3c97",
        "type": "api-call-service",
        "z": "e7792035.7e5bc",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Christmas Trees flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 660,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "98944920.ef65b8",
        "type": "split",
        "z": "1e7298d6.94a3d7",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1310,
        "y": 800,
        "wires": [
            [
                "fb1dd8a9.e8d0b8"
            ]
        ]
    },
    {
        "id": "acbadb2.82e2728",
        "type": "join",
        "z": "1e7298d6.94a3d7",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 1730,
        "y": 740,
        "wires": [
            [
                "731eed8c.a3c2b4"
            ]
        ]
    },
    {
        "id": "6d36954b.d913cc",
        "type": "function",
        "z": "1e7298d6.94a3d7",
        "name": "Inject new cache data",
        "func": "\nmsg.cache_data_new = {\n    all: {\n        state: \"on\",\n        brightness_pct: 1\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1200,
        "y": 940,
        "wires": [
            [
                "731b6df7.dd1c04"
            ]
        ]
    },
    {
        "id": "f9afecf4.db4f7",
        "type": "function",
        "z": "1e7298d6.94a3d7",
        "name": "Inject new cache data",
        "func": "\nmsg.cache_data_new = {\n    all: {\n        state: \"off\"\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1200,
        "y": 1020,
        "wires": [
            [
                "c5232e23.8cfbf"
            ]
        ]
    },
    {
        "id": "5fca319c.ef0cd",
        "type": "function",
        "z": "1e7298d6.94a3d7",
        "name": "Inject new cache data",
        "func": "\nmsg.cache_data_new = {\n    all: {\n        state: \"on\",\n        brightness_pct: 100\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1200,
        "y": 340,
        "wires": [
            [
                "5aca8321.59ee4c"
            ]
        ]
    },
    {
        "id": "7be4a30e.657b1c",
        "type": "function",
        "z": "1e7298d6.94a3d7",
        "name": "Inject new cache data",
        "func": "\nvar cache_data_new = {\n    all: {\n        state: \"on\"\n    }\n};\n\ncached_state = flow.get(\"cached_state\")\n// Force on, use cache for brightness if exists\nif (cached_state && (\"all\" in cached_state)) {\n    cache_data_new = cached_state;\n    cache_data_new.all.state = \"on\";\n} else if (cached_state && (\"individual\" in cached_state)) {\n    cache_data_new = cached_state;\n    Object.keys(cache_data_new.individual).forEach((eid) => {\n        cache_data_new.individual[eid].state = \"on\"\n    });\n}\n\nmsg.cache_data_new = cache_data_new\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1200,
        "y": 420,
        "wires": [
            [
                "11b07c3e.840ed4"
            ]
        ]
    },
    {
        "id": "731eed8c.a3c2b4",
        "type": "function",
        "z": "1e7298d6.94a3d7",
        "name": "Store cache data",
        "func": "\nflow.set(\"cached_state\", msg.cache_data_new);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1990,
        "y": 680,
        "wires": [
            [
                "22ec9c7a.9d3104",
                "68081d84.9b4ca4"
            ]
        ]
    },
    {
        "id": "68081d84.9b4ca4",
        "type": "stoptimer",
        "z": "1e7298d6.94a3d7",
        "duration": "5",
        "units": "Second",
        "payloadtype": "num",
        "payloadval": "0",
        "name": "",
        "x": 2020,
        "y": 740,
        "wires": [
            [
                "474f6660.94e3d8"
            ],
            []
        ]
    },
    {
        "id": "474f6660.94e3d8",
        "type": "function",
        "z": "1e7298d6.94a3d7",
        "name": "Invalidate cache",
        "func": "\nflow.set(\"cached_state\", undefined);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2080,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "69d6e87d.f554a8",
        "type": "function",
        "z": "1e7298d6.94a3d7",
        "name": "Merge-in cached state",
        "func": "\nconst merged_payloads = [];\nconst cached_state = flow.get(\"cached_state\");\n\n\nfunction update_from_cache(payload, cache) {\n    payload.state = cache.state;\n        \n    if (\"brightness\" in cache) {\n        payload.attributes.brightness =\n                cache.brightness;\n    } else if (\"brightness_pct\" in cache) {\n        const brightness = Math.round(\n                cache.brightness_pct * 255 / 100);\n        payload.attributes.brightness = brightness;\n    }\n}\n\n\nmsg.payload.forEach((e) => {\n    const payload = {\n        entity_id: e.entity_id,\n        state: e.state,\n        attributes: {\n            brightness: e.attributes.brightness\n        }\n    };\n    \n    if (cached_state && (\"all\" in cached_state)) {\n        const a_cache = cached_state.all;\n        update_from_cache(payload, a_cache);\n        \n    } else if (cached_state && (\"individual\" in cached_state)) {\n        const i_cache = cached_state.individual;\n        if (e.entity_id in i_cache) {\n            const e_cache = i_cache[e.entity_id];\n            update_from_cache(payload, e_cache);\n        }\n    }\n    \n    merged_payloads.push(payload);\n});\n\n\nmsg.payloads_merged = merged_payloads;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1420,
        "y": 600,
        "wires": [
            [
                "e01fe9f9.36b6d8"
            ]
        ]
    },
    {
        "id": "a5ac2476.69a9f8",
        "type": "comment",
        "z": "1e7298d6.94a3d7",
        "name": "Assumes no external activity",
        "info": "This caching works by assuming there is no simultaneous external activity.\n\nIf there is simultaneous external activity between when the cache is stored and the next switch activation (before cache timeout), the cached data will be used, effectively nullifying the external activity effects.\n\nExternal activity can be factored into the caching, but it adds complexity...",
        "x": 2020,
        "y": 860,
        "wires": []
    },
    {
        "id": "f1e72c7f.e0852",
        "type": "function",
        "z": "7a29c613.b063d8",
        "name": "Inject new cache data",
        "func": "\nvar cache_data_new = {\n    all: {\n        state: \"on\"\n    }\n};\n\ncached_state = flow.get(\"cached_state\")\n// Force on, use cache for brightness if exists\nif (cached_state && (\"all\" in cached_state)) {\n    cache_data_new = cached_state;\n    cache_data_new.all.state = \"on\";\n} else if (cached_state && (\"individual\" in cached_state)) {\n    cache_data_new = cached_state;\n    Object.keys(cache_data_new.individual).forEach((eid) => {\n        cache_data_new.individual[eid].state = \"on\"\n    });\n}\n\nmsg.cache_data_new = cache_data_new\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1140,
        "y": 540,
        "wires": [
            [
                "df9fc1d3.af523"
            ]
        ]
    },
    {
        "id": "5b3655d3.8ed6dc",
        "type": "function",
        "z": "7a29c613.b063d8",
        "name": "Inject new cache data",
        "func": "\nmsg.cache_data_new = {\n    all: {\n        state: \"on\",\n        brightness_pct: 100\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1140,
        "y": 460,
        "wires": [
            [
                "a9df6206.72be4"
            ]
        ]
    },
    {
        "id": "a9df6206.72be4",
        "type": "api-call-service",
        "z": "7a29c613.b063d8",
        "name": "Turn on living room lights max",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.living_room",
        "data": "{\"brightness_pct\":100}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1450,
        "y": 460,
        "wires": [
            [
                "feabc652.6780b8"
            ]
        ]
    },
    {
        "id": "feabc652.6780b8",
        "type": "function",
        "z": "7a29c613.b063d8",
        "name": "Store cache data",
        "func": "\nflow.set(\"cached_state\", msg.cache_data_new);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1950,
        "y": 800,
        "wires": [
            [
                "6a2d11f.ee1d4f",
                "790012f9.dd246c"
            ]
        ]
    },
    {
        "id": "6a2d11f.ee1d4f",
        "type": "stoptimer",
        "z": "7a29c613.b063d8",
        "duration": "5",
        "units": "Second",
        "payloadtype": "num",
        "payloadval": "0",
        "name": "",
        "x": 1980,
        "y": 860,
        "wires": [
            [
                "55fbd55c.8f804c"
            ],
            []
        ]
    },
    {
        "id": "55fbd55c.8f804c",
        "type": "function",
        "z": "7a29c613.b063d8",
        "name": "Invalidate cache",
        "func": "\nflow.set(\"cached_state\", undefined);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2040,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "6767b669.15cf68",
        "type": "comment",
        "z": "7a29c613.b063d8",
        "name": "Assumes no external activity",
        "info": "This caching works by assuming there is no simultaneous external activity.\n\nIf there is simultaneous external activity between when the cache is stored and the next switch activation (before cache timeout), the cached data will be used, effectively nullifying the external activity effects.\n\nExternal activity can be factored into the caching, but it adds complexity...",
        "x": 1980,
        "y": 980,
        "wires": []
    },
    {
        "id": "2ca2926f.d8e0ce",
        "type": "function",
        "z": "7a29c613.b063d8",
        "name": "Merge-in cached state",
        "func": "\nconst merged_payloads = [];\nconst cached_state = flow.get(\"cached_state\");\n\n\nfunction update_from_cache(payload, cache) {\n    payload.state = cache.state;\n        \n    if (\"brightness\" in cache) {\n        payload.attributes.brightness =\n                cache.brightness;\n    } else if (\"brightness_pct\" in cache) {\n        const brightness = Math.round(\n                cache.brightness_pct * 255 / 100);\n        payload.attributes.brightness = brightness;\n    }\n}\n\n\nmsg.payload.forEach((e) => {\n    const payload = {\n        entity_id: e.entity_id,\n        state: e.state,\n        attributes: {\n            brightness: e.attributes.brightness\n        }\n    };\n    \n    if (cached_state && (\"all\" in cached_state)) {\n        const a_cache = cached_state.all;\n        update_from_cache(payload, a_cache);\n        \n    } else if (cached_state && (\"individual\" in cached_state)) {\n        const i_cache = cached_state.individual;\n        if (e.entity_id in i_cache) {\n            const e_cache = i_cache[e.entity_id];\n            update_from_cache(payload, e_cache);\n        }\n    }\n    \n    merged_payloads.push(payload);\n});\n\n\nmsg.payloads_merged = merged_payloads;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1380,
        "y": 720,
        "wires": [
            [
                "3af7ac4e.e1f074"
            ]
        ]
    },
    {
        "id": "47751839.0e3ee8",
        "type": "split",
        "z": "7a29c613.b063d8",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1270,
        "y": 920,
        "wires": [
            [
                "fa1fd5a5.cc0d48"
            ]
        ]
    },
    {
        "id": "4ef1ac4a.fd3614",
        "type": "join",
        "z": "7a29c613.b063d8",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 1690,
        "y": 860,
        "wires": [
            [
                "feabc652.6780b8"
            ]
        ]
    },
    {
        "id": "8d86f0c5.255d1",
        "type": "function",
        "z": "7a29c613.b063d8",
        "name": "Inject new cache data",
        "func": "\nmsg.cache_data_new = {\n    all: {\n        state: \"off\"\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1160,
        "y": 1140,
        "wires": [
            [
                "3bc1c346.3473ec"
            ]
        ]
    },
    {
        "id": "3db19aa6.18b336",
        "type": "function",
        "z": "7a29c613.b063d8",
        "name": "Inject new cache data",
        "func": "\nmsg.cache_data_new = {\n    all: {\n        state: \"on\",\n        brightness_pct: 1\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1160,
        "y": 1060,
        "wires": [
            [
                "b76b9c0f.01f15"
            ]
        ]
    },
    {
        "id": "b76b9c0f.01f15",
        "type": "api-call-service",
        "z": "7a29c613.b063d8",
        "name": "Turn on living room lights min",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.living_room",
        "data": "{\"brightness_pct\":1}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1460,
        "y": 1060,
        "wires": [
            [
                "feabc652.6780b8"
            ]
        ]
    },
    {
        "id": "d300391.76a4fc8",
        "type": "function",
        "z": "bc4cdd27.07d12",
        "name": "Merge-in cached state",
        "func": "\nconst merged_payloads = [];\nconst cached_state = flow.get(\"cached_state\");\n\n\nfunction update_from_cache(payload, cache) {\n    payload.state = cache.state;\n        \n    if (\"brightness\" in cache) {\n        payload.attributes.brightness =\n                cache.brightness;\n    } else if (\"brightness_pct\" in cache) {\n        const brightness = Math.round(\n                cache.brightness_pct * 255 / 100);\n        payload.attributes.brightness = brightness;\n    }\n}\n\n\nmsg.payload.forEach((e) => {\n    const payload = {\n        entity_id: e.entity_id,\n        state: e.state,\n        attributes: {\n            brightness: e.attributes.brightness\n        }\n    };\n    \n    if (cached_state && (\"all\" in cached_state)) {\n        const a_cache = cached_state.all;\n        update_from_cache(payload, a_cache);\n        \n    } else if (cached_state && (\"individual\" in cached_state)) {\n        const i_cache = cached_state.individual;\n        if (e.entity_id in i_cache) {\n            const e_cache = i_cache[e.entity_id];\n            update_from_cache(payload, e_cache);\n        }\n    }\n    \n    merged_payloads.push(payload);\n});\n\n\nmsg.payloads_merged = merged_payloads;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1440,
        "y": 620,
        "wires": [
            [
                "e1bd8367.a5f03"
            ]
        ]
    },
    {
        "id": "4748e2a6.99145c",
        "type": "split",
        "z": "bc4cdd27.07d12",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1330,
        "y": 820,
        "wires": [
            [
                "70a23297.261e4c"
            ]
        ]
    },
    {
        "id": "b11361dd.f5c02",
        "type": "join",
        "z": "bc4cdd27.07d12",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 1750,
        "y": 760,
        "wires": [
            [
                "49c40833.49f1c8"
            ]
        ]
    },
    {
        "id": "49c40833.49f1c8",
        "type": "function",
        "z": "bc4cdd27.07d12",
        "name": "Store cache data",
        "func": "\nflow.set(\"cached_state\", msg.cache_data_new);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2010,
        "y": 700,
        "wires": [
            [
                "bdfc83d4.9d004",
                "9a2f07b1.8302f8"
            ]
        ]
    },
    {
        "id": "9a2f07b1.8302f8",
        "type": "stoptimer",
        "z": "bc4cdd27.07d12",
        "duration": "5",
        "units": "Second",
        "payloadtype": "num",
        "payloadval": "0",
        "name": "",
        "x": 2040,
        "y": 760,
        "wires": [
            [
                "60165168.9a581"
            ],
            []
        ]
    },
    {
        "id": "60165168.9a581",
        "type": "function",
        "z": "bc4cdd27.07d12",
        "name": "Invalidate cache",
        "func": "\nflow.set(\"cached_state\", undefined);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2100,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "5139bb56.afe744",
        "type": "comment",
        "z": "bc4cdd27.07d12",
        "name": "Assumes no external activity",
        "info": "This caching works by assuming there is no simultaneous external activity.\n\nIf there is simultaneous external activity between when the cache is stored and the next switch activation (before cache timeout), the cached data will be used, effectively nullifying the external activity effects.\n\nExternal activity can be factored into the caching, but it adds complexity...",
        "x": 2040,
        "y": 880,
        "wires": []
    },
    {
        "id": "fcba3ca1.0b313",
        "type": "function",
        "z": "bc4cdd27.07d12",
        "name": "Inject new cache data",
        "func": "\nmsg.cache_data_new = {\n    all: {\n        state: \"off\"\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1220,
        "y": 1040,
        "wires": [
            [
                "4323a289.d98c8c"
            ]
        ]
    },
    {
        "id": "ba155282.2476c",
        "type": "api-call-service",
        "z": "bc4cdd27.07d12",
        "name": "Turn on upstairs bathroom lights min",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.upstairs_bathroom",
        "data": "{\"brightness_pct\":1}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1550,
        "y": 960,
        "wires": [
            [
                "49c40833.49f1c8"
            ]
        ]
    },
    {
        "id": "3d4f1b64.d3fdb4",
        "type": "function",
        "z": "bc4cdd27.07d12",
        "name": "Inject new cache data",
        "func": "\nmsg.cache_data_new = {\n    all: {\n        state: \"on\",\n        brightness_pct: 1\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1220,
        "y": 960,
        "wires": [
            [
                "ba155282.2476c"
            ]
        ]
    },
    {
        "id": "80893134.dc2fb",
        "type": "function",
        "z": "bc4cdd27.07d12",
        "name": "Merge-in cached state",
        "func": "\nconst merged_payloads = [];\nconst cached_state = flow.get(\"cached_state\");\n\n\nfunction update_from_cache(payload, cache) {\n    payload.state = cache.state;\n        \n    if (\"brightness\" in cache) {\n        payload.attributes.brightness =\n                cache.brightness;\n    } else if (\"brightness_pct\" in cache) {\n        const brightness = Math.round(\n                cache.brightness_pct * 255 / 100);\n        payload.attributes.brightness = brightness;\n    }\n}\n\n\nmsg.payload.forEach((e) => {\n    const payload = {\n        entity_id: e.entity_id,\n        state: e.state,\n        attributes: {\n            brightness: e.attributes.brightness\n        }\n    };\n    \n    if (cached_state && (\"all\" in cached_state)) {\n        const a_cache = cached_state.all;\n        update_from_cache(payload, a_cache);\n        \n    } else if (cached_state && (\"individual\" in cached_state)) {\n        const i_cache = cached_state.individual;\n        if (e.entity_id in i_cache) {\n            const e_cache = i_cache[e.entity_id];\n            update_from_cache(payload, e_cache);\n        }\n    }\n    \n    merged_payloads.push(payload);\n});\n\n\nmsg.payloads_merged = merged_payloads;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1220,
        "y": 280,
        "wires": [
            [
                "78e7e8a1.515548"
            ]
        ]
    },
    {
        "id": "cc34ce75.e30b8",
        "type": "function",
        "z": "bc4cdd27.07d12",
        "name": "Inject new cache data",
        "func": "\nvar cache_data_new = {\n    all: {\n        state: \"on\"\n    }\n};\n\ncached_state = flow.get(\"cached_state\")\n// Force on, use cache for brightness if exists\nif (cached_state && (\"all\" in cached_state)) {\n    cache_data_new = cached_state;\n    cache_data_new.all.state = \"on\";\n} else if (cached_state && (\"individual\" in cached_state)) {\n    cache_data_new = cached_state;\n    Object.keys(cache_data_new.individual).forEach((eid) => {\n        cache_data_new.individual[eid].state = \"on\"\n    });\n}\n\nmsg.cache_data_new = cache_data_new\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1100,
        "y": 460,
        "wires": [
            [
                "fdc8e3dd.02692"
            ]
        ]
    },
    {
        "id": "35e40288.ede27e",
        "type": "split",
        "z": "bc4cdd27.07d12",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1510,
        "y": 340,
        "wires": [
            [
                "65edb766.1b0748"
            ]
        ]
    },
    {
        "id": "a6d2f398.8e406",
        "type": "join",
        "z": "bc4cdd27.07d12",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 1710,
        "y": 340,
        "wires": [
            [
                "49c40833.49f1c8"
            ]
        ]
    },
    {
        "id": "15358b17.cde3f5",
        "type": "mqtt in",
        "z": "bf163cd5.f84c",
        "name": "Floater button MQTT action",
        "topic": "zigbee2mqtt/button_st_floater/action",
        "qos": "2",
        "datatype": "auto",
        "broker": "2ac9b613.9a48fa",
        "x": 160,
        "y": 560,
        "wires": [
            [
                "8815138d.39ffb",
                "3e59fa2.e73b206",
                "c9cd8efc.d3b35"
            ]
        ]
    },
    {
        "id": "a23403f.31dcb",
        "type": "mqtt in",
        "z": "bf163cd5.f84c",
        "name": "Office button MQTT action",
        "topic": "zigbee2mqtt/button_st_office/action",
        "qos": "2",
        "datatype": "auto",
        "broker": "2ac9b613.9a48fa",
        "x": 150,
        "y": 500,
        "wires": [
            [
                "8815138d.39ffb",
                "3e59fa2.e73b206",
                "c9cd8efc.d3b35"
            ]
        ]
    },
    {
        "id": "c705d787.43b708",
        "type": "mqtt in",
        "z": "62ce34cf.a7671c",
        "name": "Upstairs hallway motion MQTT",
        "topic": "zigbee2mqtt/motion_aqara_upstairs_hallway",
        "qos": "2",
        "datatype": "json",
        "broker": "2ac9b613.9a48fa",
        "x": 150,
        "y": 440,
        "wires": [
            [
                "9e728add.a96578"
            ]
        ]
    },
    {
        "id": "523dead1.6b10f4",
        "type": "mqtt in",
        "z": "35ab222c.a6eb9e",
        "name": "Downstairs hallway motion MQTT",
        "topic": "zigbee2mqtt/motion_aqara_downstairs_hallway",
        "qos": "2",
        "datatype": "json",
        "broker": "2ac9b613.9a48fa",
        "x": 150,
        "y": 500,
        "wires": [
            [
                "19863ef.06735c1"
            ]
        ]
    },
    {
        "id": "612c811.036518",
        "type": "mqtt in",
        "z": "e6c80f9f.2d85a",
        "name": "Laundry room button MQTT action",
        "topic": "zigbee2mqtt/button_st_laundry_room/action",
        "qos": "2",
        "datatype": "auto",
        "broker": "2ac9b613.9a48fa",
        "x": 160,
        "y": 780,
        "wires": [
            [
                "40b3d527.341c6c",
                "9e3194ff.7878b8"
            ]
        ]
    },
    {
        "id": "ed942cc3.81af3",
        "type": "mqtt in",
        "z": "4c3e78a1.ebb138",
        "name": "Master bedroom button MQTT action",
        "topic": "zigbee2mqtt/button_st_master_bedroom/action",
        "qos": "2",
        "datatype": "auto",
        "broker": "2ac9b613.9a48fa",
        "x": 180,
        "y": 580,
        "wires": [
            [
                "b3772296.72252"
            ]
        ]
    },
    {
        "id": "86c70aba.4412f8",
        "type": "mqtt in",
        "z": "7b5378f9.154968",
        "name": "Kitchen button MQTT action",
        "topic": "zigbee2mqtt/button_st_kitchen/action",
        "qos": "2",
        "datatype": "auto",
        "broker": "2ac9b613.9a48fa",
        "x": 160,
        "y": 560,
        "wires": [
            [
                "57754fcc.df72e"
            ]
        ]
    },
    {
        "id": "61147ac4.90c1b4",
        "type": "mqtt in",
        "z": "ae1f782f.839ce8",
        "name": "Kitchen sink button MQTT action",
        "topic": "zigbee2mqtt/button_st_kitchen_sink/action",
        "qos": "2",
        "datatype": "auto",
        "broker": "2ac9b613.9a48fa",
        "x": 170,
        "y": 580,
        "wires": [
            [
                "732b3b8.714e7c4"
            ]
        ]
    },
    {
        "id": "9263f749.a4b948",
        "type": "mqtt in",
        "z": "bc4cdd27.07d12",
        "name": "Upstairs bathroom dimmer MQTT action",
        "topic": "zigbee2mqtt/button_hue_dim_upstairs_bathroom/action",
        "qos": "2",
        "datatype": "auto",
        "broker": "2ac9b613.9a48fa",
        "x": 210,
        "y": 700,
        "wires": [
            [
                "820c4df9.ca0ea",
                "ba7c746d.57ff28",
                "b1066a75.36a8b8",
                "5e54deaa.ff356"
            ]
        ]
    },
    {
        "id": "5ac10ec6.d8f1c",
        "type": "mqtt in",
        "z": "7a29c613.b063d8",
        "name": "Living room dimmer MQTT action",
        "topic": "zigbee2mqtt/button_hue_dim_living_room/action",
        "qos": "2",
        "datatype": "auto",
        "broker": "2ac9b613.9a48fa",
        "x": 170,
        "y": 800,
        "wires": [
            [
                "e019762.dd47f88",
                "cbd66a92.d0b1c8",
                "8692e443.9a2b48",
                "f75dd00c.e4817"
            ]
        ]
    },
    {
        "id": "1f0b55ce.8cc65a",
        "type": "mqtt in",
        "z": "1e7298d6.94a3d7",
        "name": "Guest bedroom dimmer MQTT action",
        "topic": "zigbee2mqtt/button_hue_dim_guest_bedroom/action",
        "qos": "2",
        "datatype": "auto",
        "broker": "2ac9b613.9a48fa",
        "x": 190,
        "y": 680,
        "wires": [
            [
                "71655899.33d148",
                "18e1d0b9.e23c1f",
                "d0c2115c.d57b7",
                "14eb87ba.7b5968"
            ]
        ]
    },
    {
        "id": "ad0c72ce.071f7",
        "type": "mqtt in",
        "z": "e9868773.797078",
        "name": "Front door entry/exit MQTT",
        "topic": "zigbee2mqtt/doorwin_st_front_door",
        "qos": "2",
        "datatype": "json",
        "broker": "2ac9b613.9a48fa",
        "x": 150,
        "y": 560,
        "wires": [
            [
                "ed05a9af.2d13e8"
            ]
        ]
    },
    {
        "id": "26ef5d84.8244a2",
        "type": "mqtt in",
        "z": "884319a9.e92148",
        "name": "Kitchen door entry/exit MQTT",
        "topic": "zigbee2mqtt/doorwin_st_kitchen_door",
        "qos": "2",
        "datatype": "json",
        "broker": "2ac9b613.9a48fa",
        "x": 140,
        "y": 600,
        "wires": [
            [
                "210c5d3b.b91672"
            ]
        ]
    },
    {
        "id": "cc5d273a.4bf2d8",
        "type": "mqtt in",
        "z": "1d296556.09592b",
        "name": "Foyer motion MQTT",
        "topic": "zigbee2mqtt/motion_aqara_foyer",
        "qos": "2",
        "datatype": "json",
        "broker": "2ac9b613.9a48fa",
        "x": 130,
        "y": 360,
        "wires": [
            [
                "c6a17f72.67465"
            ]
        ]
    },
    {
        "id": "eb3e13ce.7e39b",
        "type": "switch",
        "z": "61cd3ec7.a4b89",
        "name": "Motion On or Off?",
        "property": "payload.occupancy",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 480,
        "wires": [
            [
                "9f02fec0.7b71c",
                "c3bf1639.e8ca08",
                "9673ac59.b3eb9"
            ],
            [
                "9c8f4edc.ec6f5"
            ]
        ]
    },
    {
        "id": "7daaf610.f1ea58",
        "type": "api-current-state",
        "z": "61cd3ec7.a4b89",
        "name": "Light not on yet?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is_not",
        "override_topic": false,
        "entity_id": "light.liquor_room",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 630,
        "y": 400,
        "wires": [
            [
                "6380f5d9.c38a6c",
                "3aefbd37.697d32"
            ],
            []
        ]
    },
    {
        "id": "73fce3cb.5c9d9c",
        "type": "api-call-service",
        "z": "61cd3ec7.a4b89",
        "name": "Turn on light (max)",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.liquor_room",
        "data": "{\"brightness_pct\":100}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1090,
        "y": 500,
        "wires": [
            [
                "fee642b2.48119"
            ]
        ]
    },
    {
        "id": "1915322f.6d2c4e",
        "type": "change",
        "z": "61cd3ec7.a4b89",
        "name": "Stop timer msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "stop",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 520,
        "wires": [
            [
                "1e588aea.448465"
            ]
        ]
    },
    {
        "id": "1e588aea.448465",
        "type": "stoptimer",
        "z": "61cd3ec7.a4b89",
        "duration": "30",
        "units": "Second",
        "payloadtype": "num",
        "payloadval": "0",
        "name": "",
        "x": 690,
        "y": 600,
        "wires": [
            [
                "914bbd2c.7ac0d",
                "38c79477.5b837c"
            ],
            []
        ]
    },
    {
        "id": "914bbd2c.7ac0d",
        "type": "api-call-service",
        "z": "61cd3ec7.a4b89",
        "name": "Turn off light",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_off",
        "entityId": "light.liquor_room",
        "data": "",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1050,
        "y": 620,
        "wires": [
            [
                "fee642b2.48119"
            ]
        ]
    },
    {
        "id": "6380f5d9.c38a6c",
        "type": "change",
        "z": "61cd3ec7.a4b89",
        "name": "Mark light on by motion",
        "rules": [
            {
                "t": "set",
                "p": "did_turn_light_on",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "9c8f4edc.ec6f5",
        "type": "switch",
        "z": "61cd3ec7.a4b89",
        "name": "Is on from motion?",
        "property": "did_turn_light_on",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 390,
        "y": 600,
        "wires": [
            [
                "1e588aea.448465"
            ]
        ]
    },
    {
        "id": "9f02fec0.7b71c",
        "type": "api-current-state",
        "z": "61cd3ec7.a4b89",
        "name": "(N/A; All day)",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "invalid_value",
        "halt_if_type": "str",
        "halt_if_compare": "is_not",
        "override_topic": false,
        "entity_id": "sun.sun",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 350,
        "y": 420,
        "wires": [
            [
                "7daaf610.f1ea58",
                "1915322f.6d2c4e"
            ],
            []
        ]
    },
    {
        "id": "38c79477.5b837c",
        "type": "change",
        "z": "61cd3ec7.a4b89",
        "name": "Clear light on by motion or user",
        "rules": [
            {
                "t": "set",
                "p": "did_turn_light_on",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "fee642b2.48119",
        "type": "api-call-service",
        "z": "61cd3ec7.a4b89",
        "name": "Log execution to HA logbook",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "logbook",
        "service": "log",
        "entityId": "",
        "data": "{\"name\":\"node-red\",\"message\":\"Liquor Room Motion flow executed successfully.\",\"domain\":\"automation\"}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1400,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "5f5b9933.94fe18",
        "type": "server-state-changed",
        "z": "61cd3ec7.a4b89",
        "name": "Was light turned off by this or user?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "entityidfilter": "light.liquor_room",
        "entityidfiltertype": "exact",
        "outputinitially": false,
        "state_type": "str",
        "haltifstate": "off",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "outputs": 2,
        "output_only_on_state_change": true,
        "x": 640,
        "y": 720,
        "wires": [
            [
                "38c79477.5b837c"
            ],
            []
        ]
    },
    {
        "id": "3aefbd37.697d32",
        "type": "time-range-switch",
        "z": "61cd3ec7.a4b89",
        "name": "Is night-light time?",
        "lat": "",
        "lon": "",
        "startTime": "21:00",
        "endTime": "05:00",
        "startOffset": 0,
        "endOffset": 0,
        "x": 870,
        "y": 460,
        "wires": [
            [
                "91984fe8.c71a2"
            ],
            [
                "73fce3cb.5c9d9c"
            ]
        ]
    },
    {
        "id": "91984fe8.c71a2",
        "type": "api-call-service",
        "z": "61cd3ec7.a4b89",
        "name": "Turn on light (half dim)",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "light",
        "service": "turn_on",
        "entityId": "light.liquor_room",
        "data": "{\"brightness_pct\":50}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 1100,
        "y": 420,
        "wires": [
            [
                "fee642b2.48119"
            ]
        ]
    },
    {
        "id": "7fa5d1aa.2548",
        "type": "link in",
        "z": "61cd3ec7.a4b89",
        "name": "In: Relinquish to Motion Triggered",
        "links": [
            "2d335beb.472f24"
        ],
        "x": 475,
        "y": 320,
        "wires": [
            [
                "a0ccec9e.413ec"
            ]
        ]
    },
    {
        "id": "a0ccec9e.413ec",
        "type": "api-current-state",
        "z": "61cd3ec7.a4b89",
        "name": "Light already on?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "light.liquor_room",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 630,
        "y": 320,
        "wires": [
            [
                "6380f5d9.c38a6c"
            ],
            []
        ]
    },
    {
        "id": "c3bf1639.e8ca08",
        "type": "switch",
        "z": "61cd3ec7.a4b89",
        "name": "Is on from motion?",
        "property": "did_turn_light_on",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 380,
        "wires": [
            [
                "1915322f.6d2c4e",
                "7daaf610.f1ea58"
            ]
        ]
    },
    {
        "id": "8c32bbf0.914058",
        "type": "api-current-state",
        "z": "61cd3ec7.a4b89",
        "name": "Is spotlight disabled?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "false",
        "halt_if_type": "bool",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "input_boolean.spotlight_mode",
        "state_type": "habool",
        "state_location": "",
        "override_payload": "none",
        "entity_location": "",
        "override_data": "none",
        "blockInputOverrides": false,
        "x": 160,
        "y": 320,
        "wires": [
            [
                "eb3e13ce.7e39b"
            ],
            []
        ]
    },
    {
        "id": "25f7a15c.4320ee",
        "type": "mqtt in",
        "z": "61cd3ec7.a4b89",
        "name": "Liquor room motion MQTT",
        "topic": "zigbee2mqtt/motion_aqara_liquor_room",
        "qos": "2",
        "datatype": "json",
        "broker": "2ac9b613.9a48fa",
        "x": 150,
        "y": 240,
        "wires": [
            [
                "8c32bbf0.914058"
            ]
        ]
    },
    {
        "id": "9673ac59.b3eb9",
        "type": "api-call-service",
        "z": "61cd3ec7.a4b89",
        "d": true,
        "name": "Notify phone of motion on",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "debugenabled": false,
        "service_domain": "notify",
        "service": "mobile_app_sm_n970u",
        "entityId": "",
        "data": "{\"title\":\"Liquor Room Motion Triggered\",\"message\":\"Was this correct, or ghosting?\",\"data\":{\"tag\":\"liquor_room_motion_triggered_alert\"}}",
        "dataType": "json",
        "mergecontext": "",
        "output_location": "",
        "output_location_type": "none",
        "mustacheAltTags": false,
        "x": 470,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "252366ce.771bca",
        "type": "mqtt in",
        "z": "62ce34cf.a7671c",
        "name": "Pantry door doorwin MQTT",
        "topic": "zigbee2mqtt/doorwin_aqara_pantry_door",
        "qos": "2",
        "datatype": "json",
        "broker": "2ac9b613.9a48fa",
        "x": 130,
        "y": 880,
        "wires": [
            [
                "f7ab0b99.042e68"
            ]
        ]
    },
    {
        "id": "79970d8d.ff80c4",
        "type": "comment",
        "z": "62ce34cf.a7671c",
        "name": "TODO: Pantry better integration with spotlight",
        "info": "For now, will bypass spotlight (because should work independent of spotlight), but may cause contention issues when spotlight is enabled in the future.",
        "x": 190,
        "y": 960,
        "wires": []
    },
    {
        "id": "f7ab0b99.042e68",
        "type": "switch",
        "z": "62ce34cf.a7671c",
        "name": "Open or closed?",
        "property": "payload.contact",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 140,
        "y": 760,
        "wires": [
            [
                "7a861800.e44a98",
                "ba91b17f.0c531"
            ],
            [
                "d4db5027.93ab9"
            ]
        ],
        "outputLabels": [
            "Open",
            "Closed"
        ]
    },
    {
        "id": "d4db5027.93ab9",
        "type": "api-current-state",
        "z": "62ce34cf.a7671c",
        "name": "Is motion clear?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "off",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "binary_sensor.motion_aqara_upstairs_hallway_occupancy",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 400,
        "y": 840,
        "wires": [
            [
                "eb2fd5d5.268818"
            ],
            []
        ]
    },
    {
        "id": "8ca5b256.32671",
        "type": "api-current-state",
        "z": "62ce34cf.a7671c",
        "name": "Is pantry closed?",
        "server": "2f5bd1e0.67e40e",
        "version": 1,
        "outputs": 2,
        "halt_if": "off",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "override_topic": false,
        "entity_id": "binary_sensor.doorwin_aqara_pantry_door_contact",
        "state_type": "str",
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "blockInputOverrides": false,
        "x": 390,
        "y": 780,
        "wires": [
            [
                "eb2fd5d5.268818"
            ],
            []
        ]
    }
]